#include "stdh.h"
//#define USING_SQLITE
// KALYDO
#include <Engine/Entities/EntityClass.h>
#include <Engine/Interface/UIInternalClasses.h>
#include "UIManager.h"
#include <Engine/Ska/ModelInstance.h>

#include <Engine/Base/Input.h>
#include <Engine/Base/KeyNames.h>
#include <Engine/GameState.h>
#include <Engine/GlobalDefinition.h>
#include <Engine/LocalDefine.h>
#include <Engine/Entities/InternalClasses.h>
#include <Engine/JobInfo.h>
#include <Engine/World/World.h>
#include <Engine/Effect/CMdlEffect.h>
#include <Engine/Network/Web.h>
#include <Common/Packet/ptype_old_do_exapet.h>
#include <Common/Packet/ptype_old_do_item.h>
#include <Engine/Entities/NoticeData.h>
#include <Engine/Help/DefineHelp.h>
#include <Engine/Help/LoadString.h>
#include <Engine/GameDataManager/GameDataManager.h>
#include <Engine/Object/ActorMgr.h>
#include <Engine/GameStageManager/StageMgr.h>
#include <Engine/Loading.h>

#include <Engine/Interface/UIInventory.h>

#include <Engine/Contents/Base/InvenData.h>
#include <Engine/Contents/Base/UIAuctionNew.h>
#include <Engine/Contents/Base/UICharacterInfoNew.h>
#include <Engine/Contents/Base/UIMsgBoxMgr.h>
#include <Engine/Contents/Base/UIMsgBoxNumeric_only.h>
#include <Engine/Contents/Base/UIMysteriousBead.h>
#include <Engine/Contents/Base/UIQuestNew.h>
#include <Engine/Contents/Login/BackImageManager.h>
#include <Engine/Contents/Login/ServerSelect.h>
#include <Engine/Contents/Login/UICharacterCreateNew.h>
#include <Engine/Contents/Login/UICharacterSelect.h>
#include <Engine/Contents/Login/UILoginNew.h>
#include <Engine/Contents/Login/LoginNew.h>
#include <Engine/Contents/Login/UIServerSelect.h>
#include <Engine/Contents/function/AffinityUI.h>
#include <Engine/Contents/function/AffinityInfoUI.h>
#include <Engine/Interface/UIAutoHelp.h>
#include <Engine/Interface/UICashShopEX.h>
#include <Engine/Interface/UIChildInvenSlot.h>
#include <Engine/Interface/UIExchange.h>
#include <Engine/Interface/UIFactory.h>
#include <Engine/Interface/UIGamble.h>
#include <Engine/Interface/UIGuildBattle.h>
#include <Engine/Interface/UIGuildStash.h>
#include <Engine/Interface/UIHelp.h>
#include <Engine/Interface/UIInvenCashBag.h>
#include <Engine/Interface/UIMessenger.h>
#include <Engine/Interface/UIMinigame.h>
#include <Engine/Interface/UIMixNew.h>
#include <Engine/Interface/UIMonsterCombo.h>
#include <Engine/Interface/UIMouseCursor.h>
#include <Engine/Interface/UINickName.h>
#include <Engine/Interface/UIOption.h>
#include <Engine/Contents/Base/UIPartyNew.h>
#include <Engine/Contents/Base/Party.h>
#include <Engine/Interface/UIPetTraining.h>
#include <Engine/Interface/UIPlayerInfo.h>
#include <Engine/Contents/function/UIPortalNew.h>
#include <Engine/Interface/UIQuickSlot.h>
#include <Engine/Interface/UIRefine.h>
#include <Engine/Interface/UIResurrection.h>
#include <Engine/Interface/UIShop.h>
#include <Engine/Interface/UISiegeWarfareDoc.h>
#include <Engine/Interface/UISiegeWarfareNew.h>
#include <Engine/Interface/UISignBoard.h>
#include <Engine/Interface/UISkillToolTip.h>
#include <Engine/Interface/UISocketSystem.h>
#include <Engine/Interface/UISystemMenu.h>
#include <Engine/Contents/function/TargetInfoNewUI.h>
#include <Engine/Interface/UITatoo.h>
#include <Engine/Interface/UIWareHouse.h>
#include <Engine/Contents/function/WildPetInfoUI.h>
#include <Engine/Contents/function/ItemCollectionData.h>
#include <Engine/Contents/function/SimplePlayerMenuUI.h>
#include <Engine/Contents/function/PremiumChar.h>
#include <Engine/Contents/function/News_Web_UI.h>
#include <Engine/Contents/function/HelpWebUI.h>
#include <Engine/Interface/UIImageSplit.h>

#include <Engine/Info/MyInfo.h>
#include <Engine/Help/Util_Help.h>
#include <Engine/Contents/Base/PersonalshopUI.h>

extern CDrawPort	*_pdpMain;
CUIButtonTextureManager	*_pUIBtnTexMgr = NULL;
CUIFontTextureManager	*_pUIFontTexMgr = NULL;
CUIBuff					*_pUIBuff = NULL;
INDEX					_iNameType = 1;
FLOAT					_fTmpTerLODMul = 1.0f;

// KALYDO
struct PlayerControls pctlCurrent;

extern HWND		_hwndMain;
extern INDEX	inp_iKeyboardReadingMethod;			// 0: getasynckey, 1: virtkeytrap, 2: scancodetrap
extern INDEX	_aiScanToKid[512];					// autogenerated fast conversion tables
extern INDEX	_aiVirtToKid[256];					// autogenerated fast conversion tables
extern UBYTE	_abKeysPressed[256];				// which keys are pressed, as recorded by message interception (by KIDs)
extern int		_iMouseZ;
extern INDEX	inp_bAllowMouseAcceleration;

extern INDEX	sam_bFullScreenActive;
extern INDEX	sam_iScreenSizeI;
extern INDEX	sam_iScreenSizeJ;

extern INDEX g_iCountry;
extern BOOL		_bWorldEditorApp;
extern CUIFiltering _UIFilteringCharacter;			// wooss 050812 name filtering 
extern BOOL g_bIsMalEng;
extern BOOL g_bAutoLogin;
extern BOOL g_bAutoRestart;
extern cWeb g_web;
extern CFontData *_pfdDefaultFont;

// For final consonant
#define	COMP_STRING_COUNT	399

// wooss 050817
#define	MIN_NAME_SIZE			4
#define MAX_MY_NAME_SIZE		16		// Date : 2006-05-02(¿ÀÈÄ 1:11:46), By eons( ÀÏº»Àº ÃÖ´ë 8, 16ÀÚ·Î µÊ )
#define MAX_GUILD_NAME_SIZE		16 

#define RAREITEM_NAME_COLOR		0xFFD31DFF

const INDEX _RTRusToyWidth = 226, _RTRusToyHeight = 226;

extern ENGINE_API INDEX g_iAutoAttack;

const static char	aszCompString[COMP_STRING_COUNT][3] =
{
	"°¡", "°¼", "°Å", "°Ü", "°í", "±³", "±¸", "±Ô", "±×", "±â", "°³", "°Â", "°Ô", "°è", "°ú", "±¥", "±Å", "±Ë", "±«", "±Í", "±á",
	"±î", "²¥", "²¨", "²¸", "²¿", "²Ø", "²Ù", "²ó", "²ô", "³¢", "±ú", "ƒÆ", "²²", "²¾", "²Ê", "²Ï", "²ã", "²ç", "²Ò", "²î", "…Ê",
	"³ª", "³Ä", "³Ê", "³à", "³ë", "´¢", "´©", "´º", "´À", "´Ï", "³»", "†v", "³×", "³é", "³ö", "‡R", "´²", "´´", "³ú", "´µ", "´Ì",
	"´Ù", "´ô", "´õ", "µ®", "µµ", "µÍ", "µÎ", "µà", "µå", "µð", "´ë", "ˆÛ", "µ¥", "µ³", "µÂ", "µÅ", "µÖ", "µØ", "µÇ", "µÚ", "µï",
	"µû", "‹x", "¶°", "¶Å", "¶Ç", "ŒÃ", "¶Ñ", "", "¶ß", "¶ì", "¶§", "‹š", "¶¼", "‹ó", "¶Ì", "¶Î", "Œô", "¶Ø", "¶Ï", "¶Ù", "¶ç",
	"¶ó", "·ª", "·¯", "·Á", "·Î", "·á", "·ç", "·ù", "¸£", "¸®", "·¡", "Žm", "·¹", "·Ê", "·Ö", "O", "·ï", "·ñ", "·Ú", "·ò", "l",
	"¸¶", "¸Ï", "¸Ó", "¸ç", "¸ð", "¹¦", "¹«", "¹Â", "¹Ç", "¹Ì", "¸Å", "Ù", "¸Þ", "¸ï", "¸ú", "‘À", "¹¹", "¹¾", "¸þ", "¹¿", "’Þ",
	"¹Ù", "¹ò", "¹ö", "º­", "º¸", "ºÌ", "ºÎ", "ºä", "ºê", "ºñ", "¹è", "“Ž", "º£", "º¶", "ºÁ", "ºÄ", "ºÛ", "ºÞ", "ºÆ", "ºß", "•‘",
	"ºü", "»²", "»µ", "»À", "»Ç", "»Ï", "»Ñ", "»Ø", "»Ú", "»ß", "»©", "•û", "»¾", "–§", "–Ø", "–ô", "—¨", "—Ä", "»Î", "—à", "˜u",
	"»ç", "»þ", "¼­", "¼Å", "¼Ò", "¼î", "¼ö", "½´", "½º", "½Ã", "»õ", "¼¨", "¼¼", "¼Î", "¼Ý", "¼â", "½¤", "½¦", "¼è", "½¬", "šÃ",
	"½Î", "›X", "½á", "›Ç", "½î", "¾¤", "¾¥", "o", "¾²", "¾¾", "½Ø", "›y", "½ê", "›ã", "½÷", "½û", "¾¬", "¾®", "½ý", "¾¯", "¾º",
	"¾Æ", "¾ß", "¾î", "¿©", "¿À", "¿ä", "¿ì", "À¯", "À¸", "ÀÌ", "¾Ö", "¾ê", "¿¡", "¿¹", "¿Í", "¿Ö", "¿ö", "¿þ", "¿Ü", "À§", "ÀÇ",
	"ÀÚ", "Àð", "Àú", "Á®", "Á¶", "ÁÒ", "ÁÖ", "Áê", "Áî", "Áö", "Àç", "À÷", "Á¦", "Áµ", "ÁÂ", "ÁÈ", "Áà", "Áâ", "ÁË", "Áã", "£p",
	"Â¥", "Â¹", "Â¼", "ÂÇ", "ÂÉ", "§c", "ÂÞ", "Âé", "Âê", "Âî", "Â°", "¤Š", "ÂÅ", "¥™", "ÂÒ", "ÂÖ", "Âå", "¨R", "ÂØ", "Âè", "©n",
	"Â÷", "Ã­", "Ã³", "ÃÄ", "ÃÊ", "ÃÝ", "Ãß", "Ãò", "Ã÷", "Ä¡", "Ã¤", "ª‰", "Ã¼", "ÃÇ", "ÃÒ", "¬‚", "Ãç", "Ãé", "ÃÖ", "Ãë", "¯M",
	"Ä«", "Ä¼", "Ä¿", "ÄÑ", "ÄÚ", "Äì", "Äí", "Å¥", "Å©", "Å°", "Ä³", "°m", "ÄÉ", "ÄÙ", "Äâ", "Äè", "Äõ", "Äù", "Äê", "Äû", "´”",
	"Å¸", "ÅË", "ÅÍ", "Åß", "Åä", "Åô", "Åõ", "Æ©", "Æ®", "Æ¼", "ÅÂ", "¶O", "Å×", "Åâ", "Åí", "Åï", "Åý", "Æ¡", "Åð", "Æ¢", "Æ·",
	"ÆÄ", "ÆÙ", "ÆÛ", "Æì", "Æ÷", "Ç¥", "Çª", "Ç»", "ÇÁ", "ÇÇ", "ÆÐ", "»—", "Æä", "Æó", "Ç¡", "½", "Ç´", "¿R", "Ç£", "Ç¶", "Àc",
	"ÇÏ", "Çá", "Çã", "Çô", "È£", "È¿", "ÈÄ", "ÈÞ", "Èå", "È÷", "ÇØ", "Á…", "Çì", "Çý", "È­", "È³", "ÈÌ", "ÈÑ", "È¸", "ÈÖ", "Èñ",
};

#define	COMP_DIGIT_COUNT	4
const static INDEX	aiCompDigit[COMP_DIGIT_COUNT] = { 2, 4, 5, 9 };
static __int64	llOldTime;
#define ST_UNLOCK_URL	_S( 1406, "http://azazellc.ru")
// WSS_GUILDMASTER 050717------------------------------------------------------>>

class CmdDropItem : public Command
{
public:
	void execute() 
	{
		UIMGR()->DropItemCallback();
	}
};

void CUIManager::DrawGuildRankBox(UIRect m_rcRect,SBYTE sbGuildRank,FLOAT fPopupZ)
{
	WRect tRect;
	tRect = m_rcRect;
	tRect +=8; 
	tRect.Left -= 2;
	tRect.Right += 2;

	switch(sbGuildRank)
	{
	case 1:
		m_bxGuildRankBox.SetBoxUV(m_ptdPopupTexture,19,WRect(76,0,123,44));	
		m_bxGuildRankBox.SetBoxPos(tRect);
		m_bxGuildRankBox.Render(0,0,0xFFFFFFFF,fPopupZ);
		break;
	case 2:
		m_bxGuildRankBox.SetBoxUV(m_ptdPopupTexture,19,WRect(128,0,175,44));	
		m_bxGuildRankBox.SetBoxPos(tRect);
		m_bxGuildRankBox.Render(0,0,0xFFFFFFFF,fPopupZ);
		break;
	case 3:
		m_bxGuildRankBox.SetBoxUV(m_ptdPopupTexture,19,WRect(180,0,227,44));	
		m_bxGuildRankBox.SetBoxPos(tRect);
		m_bxGuildRankBox.Render(0,0,0xFFFFFFFF,fPopupZ);
		break;
	}
}
// ---------------------------------------------------------------------------<<

// ----------------------------------------------------------------------------
// Name : CUIManager()
// Desc : Constructor
// ----------------------------------------------------------------------------
CUIManager::CUIManager()
	: m_pGame ( NULL )
	, m_pIconGuildMark(NULL)
	, m_pIconDrag(NULL)
	, m_pBaseDrag(NULL)
	, m_pIsMakeTitleGuideLine(NULL)
{

	if( !_bWorldEditorApp )
		_pInput->m_bTcpIp = TRUE;
	
	m_showindex = FALSE;
	m_umctTypeInUI = UMCT_NORMAL;
	m_pUIDrawPort = NULL;
	m_pumcMouseCursor = NULL;
	m_bShowUIs = TRUE;
	m_bRButtonDown = FALSE;
	m_bMouseInsideUIs = FALSE;
	m_pixMinI = 0;
	m_pixMinJ = 0;
	m_pixMaxI = 0;
	m_pixMaxJ = 0;
	m_ptdPopupTexture = NULL;
	m_ptBlackTexture	= NULL;
	m_ptdExpeditionTexture = NULL;
	m_dwCSF = 0;
	m_tCSFElapsedTime = 0;

	for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
	{
		m_apUIs[iUI] = NULL;
		m_aUIOrder[iUI] = iUI;
	}
	m_nShowMessageBox = -1;
	m_bDamageState = false;
	m_nCoolTimeReductionRate =0;
	m_nNeedMPReductionRate =0;

	m_nHelpNpc_Index = -1;		//NPC ¾È³» ½Ã½ºÅÛ

	m_IsInField = TRUE;

	m_nCurInfoLines = 0;

	m_bShowAni = FALSE;
	m_RenderTarget = NULL;
//	InitRenderTarget();
	m_fAniStartTime = 0.0f;
	m_ptdAniBG = NULL;

	m_apUIsOld = NULL;
#ifdef	VER_TEST
	m_bOutDebugString = false;
#endif
	
	std::string strLocal = DefHelp::getNationPostfix(g_iCountry, true);
	// ÆÐ½º Ãß°¡
	m_vecAdditionalPath.push_back("Data\\Interface\\");
	m_vecAdditionalPath.push_back("Data\\Interface\\Loading\\");
	m_vecAdditionalPath.push_back("Local\\" + strLocal + "\\");
	m_vecAdditionalPath.push_back("Local\\" + strLocal + "\\SignBoard\\");
	m_vecAdditionalPath.push_back("Local\\" + strLocal + "\\Loading\\");

	ItemNameColorInI();
}

// ----------------------------------------------------------------------------
// Name : ~CUIManager()
// Desc : Destructor
// ----------------------------------------------------------------------------
CUIManager::~CUIManager()
{
	DestroyAll();
	DestroyRenderTarget();
	CNoticeData::destroy();
	UIFactory::destroy();
	CUITooltipMgr::destroy();
	CUIFocus::destroy();
	CUISkillToolTip::destroy();
	CInvenData::destroy();
	CBackImageManager::destroy();
	CUISupport::destroy();
	SAFE_DELETE(m_pIconGuildMark);
	SAFE_DELETE(m_pIsMakeTitleGuideLine);
}

// ----------------------------------------------------------------------------
// Name : Create()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::Create()
{
	UIFactory* pFactory = UIFactory::getSingleton();

	CInvenData* pInventory = CInvenData::getSingleton();
	// Mouse cursor
	m_pumcMouseCursor = new CUIMouseCursor;

	if( _bWorldEditorApp )
	{
		m_bShowUIs = FALSE;
		//return;	//Å×½ºÆ® °ÔÀÓ ½ÇÇà½Ã UIManager¸¦ »ç¿ëÇÏ´Â ºÎºÐ¿¡¼­ ¿¡·¯°¡ ¹ß»ýÇØ¼­ ±×³É create ÁøÇà½ÃÅ´ :Su-won
	}

	// Load string data
	CTFileName	fnmStringData;

	CTFileName	fnmHelp1Data;

	CTString	strFullPath = _fnmApplicationPath.FileDir();
	CTString	strImmoralWordList;	// ÀÌ±âÈ¯ Ãß°¡ ( 11.29 )
	CTString	strImmoralCharacter;	// Date : 2005-02-16,   By Lee Ki-hwan
	CTString	strChatFilter;

	strChatFilter = strFullPath + "Data\\CharacterChatFilter.dat";

	InitUIString();	
		
	//!! ÀÌ±âÈ¯ Ãß°¡ (04.12.17) : Áö¿ª ÀÌ¸§ Ç¥½Ã 
	_UISignBoard = new CUISignBoard ();
	_UISignBoard->Create ( g_iCountry );

	//!! ÀÌ±âÈ¯ Ãß°¡ (40.12.19) : ÀÚµ¿ µµ¿ò¸» Ç¥½Ã 
	_UIAutoHelp = new CUIAutoHelp ();
	_UIAutoHelp->Create ();

	// Buff
	_pUIBuff = new CUIBuff();
	_pUIBuff->Create();

	// Reset CInput
	if( !_bWorldEditorApp )		//¿¡µðÅÍ¿¡¼­´Â ¾Æ·¡ ºÎºÐÀ» ³ÖÀ¸¸é ¸¶¿ì½º°¡ ÀÌ»óÇÏ°Ô ¿òÁ÷¿©¼­
								//¿¡µðÅÍÀÏ ¶§´Â Á¦¿Ü :Su-won
	{
		_pInput->inp_bInputEnabled = TRUE;
		memset( _abKeysPressed, 0, sizeof( _abKeysPressed ) );
	}

	m_ptBlackTexture = _pTextureStock->Obtain_t( CTString( "Data\\Interface\\Black.tex" ) );
	m_rtBlack.SetUV( 0, 0, 512, 512, m_ptBlackTexture->GetPixWidth(), m_ptBlackTexture->GetPixWidth() );

	// Popup texture
	m_ptdPopupTexture = _pTextureStock->Obtain_t( CTString( "Data\\Interface\\NamePopup.tex" ) );
	FLOAT	fTexWidth = m_ptdPopupTexture->GetPixWidth();
	FLOAT	fTexHeight = m_ptdPopupTexture->GetPixHeight();
	m_rtNameL.SetUV( 0, 14, 2, 29, fTexWidth, fTexHeight );
	m_rtNameC.SetUV( 4, 14, 14, 29, fTexWidth, fTexHeight );
	m_rtNameR.SetUV( 30, 14, 32, 29, fTexWidth, fTexHeight );
#ifdef PREMIUM_CHAR
	m_rtPremiumNameL.SetUV( 238, 58, 240, 108, fTexWidth, fTexHeight );
	m_rtPremiumNameC.SetUV( 240, 58, 241, 108, fTexWidth, fTexHeight );
	m_rtPremiumNameR.SetUV( 241, 58, 304, 108, fTexWidth, fTexHeight );
#endif	//	PREMIUM_CHAR
	m_rtNameRPK.SetUV( 16, 14, 32, 29, fTexWidth, fTexHeight );
	m_rtNameRDefPK1.SetUV( 0, 30, 16, 45, fTexWidth, fTexHeight );
	m_rtNameRDefPK2.SetUV( 18, 30, 34, 45, fTexWidth, fTexHeight );
	m_rtChatLU.SetUV( 0, 0, 5, 5, fTexWidth, fTexHeight );
	m_rtChatUp.SetUV( 6, 0, 7, 5, fTexWidth, fTexHeight );
	m_rtChatRU.SetUV( 8, 0, 13, 5, fTexWidth, fTexHeight );
	m_rtChatL.SetUV( 0, 6, 5, 7, fTexWidth, fTexHeight );
	m_rtChatC.SetUV( 6, 6, 7, 7, fTexWidth, fTexHeight );
	m_rtChatR.SetUV( 8, 6, 13, 7, fTexWidth, fTexHeight );
	m_rtChatLL.SetUV( 0, 8, 5, 13, fTexWidth, fTexHeight );
	m_rtChatLo.SetUV( 6, 8, 7, 13, fTexWidth, fTexHeight );
	m_rtChatRL.SetUV( 8, 8, 13, 13, fTexWidth, fTexHeight );
	m_rtShopLU.SetUV( 15, 0, 20, 5, fTexWidth, fTexHeight );
	m_rtShopUp.SetUV( 21, 0, 22, 5, fTexWidth, fTexHeight );
	m_rtShopRU.SetUV( 23, 0, 28, 5, fTexWidth, fTexHeight );
	m_rtShopL.SetUV( 15, 6, 20, 7, fTexWidth, fTexHeight );
	m_rtShopC.SetUV( 21, 6, 22, 7, fTexWidth, fTexHeight );
	m_rtShopR.SetUV( 23, 6, 28, 7, fTexWidth, fTexHeight );
	m_rtShopLL.SetUV( 15, 8, 20, 13, fTexWidth, fTexHeight );
	m_rtShopLo.SetUV( 21, 8, 22, 13, fTexWidth, fTexHeight );
	m_rtShopRL.SetUV( 23, 8, 28, 13, fTexWidth, fTexHeight );
	m_rtShopPremLU.SetUV( 35, 0, 48, 13, fTexWidth, fTexHeight );
	m_rtShopPremUp.SetUV( 49, 0, 50, 13, fTexWidth, fTexHeight );
	m_rtShopPremRU.SetUV( 51, 0, 64, 13, fTexWidth, fTexHeight );
	m_rtShopPremL.SetUV( 35, 14, 48, 16, fTexWidth, fTexHeight );
	m_rtShopPremC.SetUV( 49, 14, 50, 16, fTexWidth, fTexHeight );
	m_rtShopPremR.SetUV( 51, 14, 64, 16, fTexWidth, fTexHeight );
	m_rtShopPremLL.SetUV( 35, 16, 48, 29, fTexWidth, fTexHeight );
	m_rtShopPremLo.SetUV( 49, 16, 50, 29, fTexWidth, fTexHeight );
	m_rtShopPremRL.SetUV( 51, 16, 64, 29, fTexWidth, fTexHeight );
	m_rtNickNameL.SetUV(35, 31, 37, 44, fTexWidth, fTexHeight );
	m_rtNickNameC.SetUV(39, 31, 49, 44, fTexWidth, fTexHeight );
	m_rtNickNameR.SetUV(65, 31, 67, 44, fTexWidth, fTexHeight );
	
	UIRectUV tempUV;
	tempUV.U0 = 625;
	tempUV.V0 = 278;
	tempUV.U1 = 646;
	tempUV.V1 = 292;

	m_pIsMakeTitleGuideLine = new CUIImageSplit;	
	m_pIsMakeTitleGuideLine->setTexString("CustomTitle.tex");
	m_pIsMakeTitleGuideLine->SetUV(tempUV);
	m_pIsMakeTitleGuideLine->SetUnit(3);
	m_pIsMakeTitleGuideLine->SetSplitMode(CUIImageSplit::SPLIT_3H);

	// Number
	int nOffsetX = 0;	// 0
	int nOffsetY = 47;	// 47

	int nNubmerWidth = 22;	//22
	int nNubmerHeight = 23;	// 23

	m_rcNumber.SetRect( 0, 0, 22, 23 );
	
	for( int i = 0 ; i < 10; i++ )
	{
		m_rtNumber[i].SetUV( nOffsetX + i * nNubmerWidth, nOffsetY, 
							(nOffsetX + i * nNubmerWidth + nNubmerWidth) - 1, nOffsetY + nNubmerHeight, 
							fTexWidth, fTexHeight );
	}

#define ST_MISS			0
#define ST_CRITICAL		1
#define ST_DEADLY		2

	m_rcShowText[ST_MISS].SetRect( 0, 0, 50, 21 );
	m_rtShowText[ST_MISS].SetUV( 0, 98, 50, 119, fTexWidth, fTexHeight );

	m_rcShowText[ST_CRITICAL].SetRect( 0, 0, 113, 27 );
	m_rtShowText[ST_CRITICAL].SetUV( 0, 70, 113, 97, fTexWidth, fTexHeight );
	
	m_rcShowText[ST_DEADLY].SetRect( 0, 0, 101, 27 );
	m_rtShowText[ST_DEADLY].SetUV( 118, 70, 219, 97, fTexWidth, fTexHeight );

	// [sora] ¿øÁ¤´ë Å¸°Ù ÁöÁ¤
	m_ptdExpeditionTexture = _pTextureStock->Obtain_t( CTString( "Data\\Interface\\Expedition.tex" ) );
	fTexWidth = m_ptdExpeditionTexture->GetPixWidth();
	fTexHeight = m_ptdExpeditionTexture->GetPixHeight();


	m_rtTargetLabel[6].SetUV( 355, 211, 397, 253, fTexWidth, fTexHeight);
	m_rtTargetLabel[5].SetUV( 403, 210, 445, 252, fTexWidth, fTexHeight);
	m_rtTargetLabel[4].SetUV( 459, 205, 501, 247, fTexWidth, fTexHeight);
	m_rtTargetLabel[3].SetUV( 355, 261, 397, 303, fTexWidth, fTexHeight);
	m_rtTargetLabel[2].SetUV( 401, 258, 443, 300, fTexWidth, fTexHeight);
	m_rtTargetLabel[1].SetUV( 459, 256, 501, 298, fTexWidth, fTexHeight);
	m_rtTargetLabel[0].SetUV( 358, 313, 400, 355, fTexWidth, fTexHeight);

	CUITooltipMgr::getSingleton()->initialize();
	UISUPPORT()->initialize();

	m_apUIs[UI_INVEN_SLOT1] = new CUIChildInvenSlot(INVEN_TAB_NORMAL1);
	m_apUIs[UI_INVEN_SLOT1]->Create( NULL, 370, 346, ITEM_SLOT_TOTAL_WIDTH, ITEM_SLOT_TOTAL_HEIGHT );
	((CUIChildInvenSlot *)m_apUIs[UI_INVEN_SLOT1])->SetRearrangeOrderID(UI_INVEN_SLOT1);

	m_apUIs[UI_INVEN_SLOT2] = new CUIChildInvenSlot(INVEN_TAB_NORMAL2);
	m_apUIs[UI_INVEN_SLOT2]->Create( NULL, 578, 346, ITEM_SLOT_TOTAL_WIDTH, ITEM_SLOT_TOTAL_HEIGHT );
	((CUIChildInvenSlot *)m_apUIs[UI_INVEN_SLOT2])->SetRearrangeOrderID(UI_INVEN_SLOT2);

	m_apUIs[UI_INVEN_SLOT3] = new CUIChildInvenSlot(INVEN_TAB_NORMAL3);
	m_apUIs[UI_INVEN_SLOT3]->Create( NULL, 578, 103, ITEM_SLOT_TOTAL_WIDTH, ITEM_SLOT_TOTAL_HEIGHT );
	((CUIChildInvenSlot *)m_apUIs[UI_INVEN_SLOT3])->SetRearrangeOrderID(UI_INVEN_SLOT3);

	m_apUIs[UI_INVEN_CASH1] = new CUIInvenCashBag(INVEN_TAB_CASH1);
	m_apUIs[UI_INVEN_CASH1]->Create( NULL, 786, 346, INVEN_CASH_BAG_W, INVEN_CASH_BAG_H);
	if (CUIInvenCashBag* pCashBag = dynamic_cast<CUIInvenCashBag*>(m_apUIs[UI_INVEN_CASH1]))
		pCashBag->SetRearrangeOrderID(UI_INVEN_CASH1);

	m_apUIs[UI_INVEN_CASH2] = new CUIInvenCashBag(INVEN_TAB_CASH2);
	m_apUIs[UI_INVEN_CASH2]->Create( NULL, 786, 103, INVEN_CASH_BAG_W, INVEN_CASH_BAG_H);
	if (CUIInvenCashBag* pCashBag = dynamic_cast<CUIInvenCashBag*>(m_apUIs[UI_INVEN_CASH2]))
		pCashBag->SetRearrangeOrderID(UI_INVEN_CASH2);

	// Inventory
	m_apUIs[UI_INVENTORY] = new CUIInventory;
	//m_apUIs[UI_INVENTORY]->Create( NULL, 0, 0, INVENTORY_WIDTH, INVENTORY_HEIGHT );
	m_apUIs[UI_INVENTORY]->Create( NULL, 0, 0, 291,458 );

	CUIWindowDeclare::initUI();

	// added by sam 10/11/11
	// Ranking System
	InitRankSystem();

	SetTitleName( sam_bFullScreenActive, sam_iScreenSizeI, sam_iScreenSizeJ );

	m_nShowMessageBox = -1;

	m_ptdAniBG = _pTextureStock->Obtain_t( CTString( "Data\\Interface\\CommonBtn.tex" ) );
	fTexWidth  = m_ptdAniBG->GetWidth();
	fTexHeight = m_ptdAniBG->GetHeight();

	m_AniBackGround.AddRectSurface(UIRect(0,0,20,20), UIRectUV(0,137,20,157,fTexWidth,fTexHeight));
	m_AniBackGround.AddRectSurface(UIRect(20,0,206,20), UIRectUV(20,137,121,157,fTexWidth,fTexHeight));
	m_AniBackGround.AddRectSurface(UIRect(206,0,226,20), UIRectUV(121,137,141,157,fTexWidth,fTexHeight));

	m_AniBackGround.AddRectSurface(UIRect(0,20,20,206), UIRectUV(0,157,20,207,fTexWidth,fTexHeight));
	m_AniBackGround.AddRectSurface(UIRect(20,20,206,206), UIRectUV(20,157,121,207,fTexWidth,fTexHeight));
	m_AniBackGround.AddRectSurface(UIRect(206,20,226,206), UIRectUV(121,157,141,207,fTexWidth,fTexHeight));

	m_AniBackGround.AddRectSurface(UIRect(0,206,20,226), UIRectUV(0,207,20,227,fTexWidth,fTexHeight));
	m_AniBackGround.AddRectSurface(UIRect(20,206,206,226), UIRectUV(20,207,121,227,fTexWidth,fTexHeight));
	m_AniBackGround.AddRectSurface(UIRect(206,206,226,226), UIRectUV(121,207,141,227,fTexWidth,fTexHeight));
	
	CUISkillToolTip::getSingleton()->initialize();

	MsgBoxMgr* pMsgMgr = MsgBoxMgr::getSingleton();
	pMsgMgr->Initialize();

	CLoadingImage::getSingleton()->initialize();		
}

void CUIManager::InitUIString_restart()
{
	// Load string data
	CTFileName	fnmStringData;

	CTFileName	fnmHelp1Data;

	CTString	strFullPath = _fnmApplicationPath.FileDir();
	CTString	strImmoralWordList;	// ÀÌ±âÈ¯ Ãß°¡ ( 11.29 )
	CTString	strImmoralCharacter;	// Date : 2005-02-16,   By Lee Ki-hwan
	CTString	strChatFilter;
	CTString	strLocalPath = strFullPath;
	strLocalPath += "Local\\";
	strLocalPath += DefHelp::getNationPostfix(USA, true);
	strLocalPath += "\\String\\";
	fnmStringData = strLocalPath + "\\strClient";
	fnmStringData += DefHelp::getNationPostfix(g_iCountry);
	fnmStringData += ".lod";

	LoadStringData(fnmStringData);
}

void CUIManager::InitUIString()
{
	// Load string data
	CTFileName	fnmStringData;

	CTFileName	fnmHelp1Data;

	CTString	strFullPath = _fnmApplicationPath.FileDir();
	CTString	strImmoralWordList;	// ÀÌ±âÈ¯ Ãß°¡ ( 11.29 )
	CTString	strImmoralCharacter;	// Date : 2005-02-16,   By Lee Ki-hwan
	CTString	strChatFilter;
	CTString	strLocalPath = strFullPath;
	strLocalPath += "Local\\";
	strLocalPath += DefHelp::getNationPostfix(USA, true);
	strLocalPath += "\\String\\";


	strChatFilter = strLocalPath + "CharacterChatFilter.dat";

	strImmoralWordList = strLocalPath + "ImmoralWord";
	strImmoralWordList += DefHelp::getNationPostfix(g_iCountry) + ".dat";
	strImmoralCharacter = strLocalPath + "ImmoralCharacterName";
	strImmoralCharacter += DefHelp::getNationPostfix(g_iCountry) + ".dat";

	fnmStringData = strLocalPath + "\\strClient";
	fnmStringData += DefHelp::getNationPostfix(g_iCountry);
	fnmStringData += ".lod";

	LoadStringData( fnmStringData );

	fnmHelp1Data = strFullPath + "data\\Help1.dta";
	LoadHelp1Data( fnmHelp1Data );
	LoadHelp1String();

	BOOL tFilter = TRUE;
	// ÀÌ±âÈ¯ Ãß°¡ ( 04.11.29 )
	tFilter &= _UIFiltering.Create( strImmoralWordList.str_String );
	// Date : 2005-02-16,   By Lee Ki-hwan
	tFilter &= _UIFilteringCharacter.Create ( strImmoralCharacter.str_String );
	tFilter &= _UICharacterChatFilter.Create( strChatFilter.str_String, true );

	//---------------------------------------------------------------------->>
	// Name :
	// Desc : ÇÊÅÍ¸µ ÆÄÀÏÀÌ Á¸ÀçÇÏÁö ¾Ê°Å³ª ÈÑ¼Õ µÆÀ» °æ¿ì °ÔÀÓ Á¾·á
	// Date : [6/27/2006] , Wooss
	//----------------------------------------------------------------------<<
	if (tFilter == FALSE)
	{
		ENGINE_API extern char *g_szExitError ;
		if(g_szExitError) delete[] g_szExitError;
		g_szExitError = new char[2048];
		strcpy(g_szExitError, CTString("ErrorCode : 626"));
		_pGameState->Running() = FALSE;
		_pGameState->QuitScreen() = FALSE;	
	}

	// Button texture
	_pUIBtnTexMgr = new CUIButtonTextureManager;
	_pUIBtnTexMgr->Create();
	// Font texture
	_pUIFontTexMgr = new CUIFontTextureManager;
	_pUIFontTexMgr->Create();
}

// ----------------------------------------------------------------------------
// Name : Destroy()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::DestroyAll()
{
	// Popup texture
	STOCK_RELEASE( m_ptdPopupTexture );
	STOCK_RELEASE( m_ptBlackTexture );
	STOCK_RELEASE(m_ptdExpeditionTexture);
	STOCK_RELEASE( m_ptdAniBG );

	if( _bWorldEditorApp )
		return;

	// set mouse clip region to entire screen
	ClipCursor(NULL);
	// restore mouse pos
	//SetCursorPos( inp_ptOldMousePos.x, inp_ptOldMousePos.y);

	// show mouse on screen
	while (ShowCursor(TRUE) < 0);
	// set system mouse settings
	//SystemParametersInfo(SPI_SETMOUSE, 0, &inp_mscMouseSettings, 0);

	m_pGame = NULL;

	// Button texture
	SAFE_DELETE( _pUIBtnTexMgr );

	// Text texture
	SAFE_DELETE( _pUIFontTexMgr );

	// Buff
	SAFE_DELETE( _pUIBuff );

	// UIs
	for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
	{
		if( m_apUIs[iUI] )
		{
			delete m_apUIs[iUI];
			m_apUIs[iUI] = NULL;
		}
	}

	SAFE_DELETE( _UISignBoard );

	// Date : 2005-01-10,   By Lee Ki-hwan : 
	SAFE_DELETE( _UIAutoHelp );

	// Strings
	m_aStringData.Clear();
	//DeleteFilterList();

	// Date : 2005-01-10,   By Lee Ki-hwan : NULL Check
	if ( m_pumcMouseCursor != NULL )
	{
		delete m_pumcMouseCursor;
		 m_pumcMouseCursor = NULL;
	}

	MsgBoxMgr::getSingleton()->DestroyAll();
	MsgBoxMgr::destroy();
}

void CUIManager::SetGameHandle(CGame *pGame)
{
	ASSERT(pGame != NULL && "Invalid Game Handle");
	m_pGame = pGame;
}

// ----------------------------------------------------------------------------
// Name : CreateMessageBox()
// Desc :
// ----------------------------------------------------------------------------
BOOL CUIManager::CreateMessageBox( CUIMsgBox_Info &rMsgBoxInfo, int nPosX, int nPosY )
{
	// Create message box
	for( int iUI = UI_MESSAGEBOX_START; iUI < UI_MESSAGEBOX_END; iUI++ )
	{
		if( !m_apUIs[iUI]->IsEnabled() )
		{
			((CUIMessageBox *)m_apUIs[iUI])->CreateMessageBox( rMsgBoxInfo, nPosX, nPosY );
			return TRUE;
		}
	}

	return FALSE;
}

// ----------------------------------------------------------------------------
// Name : CloseMessageBox()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::CloseMessageBox( int nCommandCode )
{
	// Find message box and close it
	for( int iUI = UI_MESSAGEBOX_START; iUI < UI_MESSAGEBOX_END; iUI++ )
	{
		if( m_apUIs[iUI]->IsEnabled() &&
			((CUIMessageBox *)m_apUIs[iUI])->GetCmdCode() == nCommandCode )
		{
			((CUIMessageBox *)m_apUIs[iUI])->InitMessageBox();
			break;
		}
	}
}

// ----------------------------------------------------------------------------
// Name : DoesMessageBoxExist()
// Desc :
// ----------------------------------------------------------------------------
BOOL CUIManager::DoesMessageBoxExist( int nCommandCode )
{
	// Find message box and return result
	for( int iUI = UI_MESSAGEBOX_START; iUI < UI_MESSAGEBOX_END; iUI++ )
	{
		if( m_apUIs[iUI]->IsEnabled() &&
			((CUIMessageBox *)m_apUIs[iUI])->GetCmdCode() == nCommandCode )
			return TRUE;
	}

	return FALSE;
}

// ----------------------------------------------------------------------------
// Name : GetMessageBox()
// Desc :
// ----------------------------------------------------------------------------
CUIMessageBox* CUIManager::GetMessageBox( int nCommandCode )
{
	// Find message box and return result
	for( int iUI = UI_MESSAGEBOX_START; iUI < UI_MESSAGEBOX_END; iUI++ )
	{
		if( m_apUIs[iUI]->IsEnabled() &&
			((CUIMessageBox *)m_apUIs[iUI])->GetCmdCode() == nCommandCode )
			return (CUIMessageBox *)m_apUIs[iUI];
	}
	return NULL;
}

// ----------------------------------------------------------------------------
// Name : GetMessageBoxL()
// Desc :
// ----------------------------------------------------------------------------
CUIMessageBoxL* CUIManager::GetMessageBoxL( int nCommandCode )
{
	// Find message box and return result
	for( int iUI = UI_MESSAGEBOXL_START; iUI < UI_MESSAGEBOXL_END; iUI++ )
	{
		if( m_apUIs[iUI]->IsEnabled() &&
			((CUIMessageBoxL *)m_apUIs[iUI])->GetCmdCode() == nCommandCode )
			return (CUIMessageBoxL *)m_apUIs[iUI];
	}
	return NULL;
}

// ----------------------------------------------------------------------------
// Name : CreateMessageBoxL()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::CreateMessageBoxL( CTString &strTitle, int nWhichUI, int nCommandCode, int nPosX, int nPosY )
{
	// Create message box
	for( int iUI = UI_MESSAGEBOXL_START; iUI < UI_MESSAGEBOXL_END; iUI++ )
	{
		if( !m_apUIs[iUI]->IsEnabled() )
		{
			((CUIMessageBoxL *)m_apUIs[iUI])->CreateMessageBox( strTitle, nWhichUI, nCommandCode, nPosX, nPosY );
			break;
		}
	}
}

// ----------------------------------------------------------------------------
// Name : CloseMessageBoxL()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::AddMessageBoxLString( int nCommandCode, BOOL bDesc, CTString &strMessage, int iValue, const COLOR colDesc, CTString strPrefix )
{
	// Find message box
	for( int iUI = UI_MESSAGEBOXL_START; iUI < UI_MESSAGEBOXL_END; iUI++ )
	{
		if( m_apUIs[iUI]->IsEnabled() &&
			((CUIMessageBoxL *)m_apUIs[iUI])->GetCmdCode() == nCommandCode )
		{
			if( bDesc )
				((CUIMessageBoxL *)m_apUIs[iUI])->AddDescString( strMessage, colDesc );
			else
			{
				CTString strTemp;
				strTemp.PrintF("%s %s", strPrefix, strMessage);
				((CUIMessageBoxL *)m_apUIs[iUI])->AddSelString( strTemp, colDesc, iValue );
			}
			break;
		}
	}
}

// ----------------------------------------------------------------------------
// Name : CloseMessageBoxL()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::CloseMessageBoxL( int nCommandCode )
{
	// Find message box and close it
	for( int iUI = UI_MESSAGEBOXL_START; iUI < UI_MESSAGEBOXL_END; iUI++ )
	{
		if( m_apUIs[iUI]->IsEnabled() &&
			((CUIMessageBoxL *)m_apUIs[iUI])->GetCmdCode() == nCommandCode )
		{
			((CUIMessageBoxL *)m_apUIs[iUI])->InitMessageBox();
			break;
		}
	}
}

// ----------------------------------------------------------------------------
// Name : DoesMessageBoxExistL()
// Desc :
// ----------------------------------------------------------------------------
BOOL CUIManager::DoesMessageBoxLExist( int nCommandCode )
{
	// Find message box and return result
	for( int iUI = UI_MESSAGEBOXL_START; iUI < UI_MESSAGEBOXL_END; iUI++ )
	{
		if( m_apUIs[iUI]->IsEnabled() &&
			((CUIMessageBoxL *)m_apUIs[iUI])->GetCmdCode() == nCommandCode )
			return TRUE;
	}

	return FALSE;
}

// ----------------------------------------------------------------------------
// Name : ResetUIPos()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::ResetUIPos( CDrawPort *pdp )
{
	m_pixMinI = pdp->dp_MinI;
	m_pixMinJ = pdp->dp_MinJ;
	m_pixMaxI = pdp->dp_MaxI;
	m_pixMaxJ = pdp->dp_MaxJ;

	for( int iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
	{
		if (m_apUIs[iUI] == NULL)
			continue;

		m_apUIs[iUI]->ResetPosition( m_pixMinI, m_pixMinJ, m_pixMaxI, m_pixMaxJ );
		m_apUIs[iUI]->updatePosition(true);
	}
}

void CUIManager::ResetUISavePos( CDrawPort *pdp )
{
	m_pixMinI = pdp->dp_MinI;
	m_pixMinJ = pdp->dp_MinJ;
	m_pixMaxI = pdp->dp_MaxI;
	m_pixMaxJ = pdp->dp_MaxJ;

	for( int iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
	{
		if (m_apUIs[iUI] == NULL)
			continue;

		m_apUIs[iUI]->ResetSavePosition( m_pixMinI, m_pixMinJ, m_pixMaxI, m_pixMaxJ );
	}
}

// ----------------------------------------------------------------------------
// Name : AdjustUIPos()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::AdjustUIPos( CDrawPort *pdp )
{
	if( m_pixMinI != pdp->dp_MinI || m_pixMinJ != pdp->dp_MinJ ||
		m_pixMaxI != pdp->dp_MaxI || m_pixMaxJ != pdp->dp_MaxJ )
	{
		m_pixMinI = pdp->dp_MinI;
		m_pixMinJ = pdp->dp_MinJ;
		m_pixMaxI = pdp->dp_MaxI;
		m_pixMaxJ = pdp->dp_MaxJ;

		for( int iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
		{
			if (m_apUIs[iUI] == NULL)
				continue;

			m_apUIs[iUI]->AdjustPosition( m_pixMinI, m_pixMinJ, m_pixMaxI, m_pixMaxJ );
			m_apUIs[iUI]->updatePosition(true);
		}
	}

	m_bMouseInsideUIs = FALSE;
}

// ----------------------------------------------------------------------------
// Name : InsertCommaToString()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::InsertCommaToString( CTString &strCount )
{
	char	szCount[256];
	int		iChar = 0, iCharTemp = 0, ctComma = 0;
	int		nLength = strCount.Length();

	for( int iChiper = nLength; iChiper > 0; iChiper-- )
	{
		szCount[iChar++] = strCount[iCharTemp++];
		if( ( iChiper % 3 ) == 1 && iChiper > 1 )
		{
			if (szCount[iChar - 1] != '-')
			{
				szCount[iChar++] = ',';
				ctComma++;
			}
		}
	}
	szCount[nLength + ctComma] = NULL;
	strCount = szCount;
}

//------------------------------------------------------------------------------
// CUIManager::GetNasColor
// Explain:  ³ª½ºÀÇ ±Ý¾×¿¡ µû¶ó¼­ ÁöÁ¤µÈ ³ª½º »öÀ» Á¶Á¤ÇÑ´Ù.
// Date : 2005-11-10,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
COLOR CUIManager::GetNasColor( SQUAD llNas )
{
	ALPHA AlphaValue = 255; 

	if( llNas < 1000 ) 
	{
		return RGBAToColor( 255, 255, 255, AlphaValue );
	}
	else if( llNas < 1000000 ) // 1,000,000 ¹Ì¸¸ 
	{
		return RGBAToColor( 0, 255, 255, AlphaValue );
	}
	else if( llNas < 1000000000 ) // 1,000,000,000 ¹Ì¸¸ 1¾ï
	{
		 return RGBAToColor( 0, 255, 0, AlphaValue );
	}
	else if( llNas < 1000000000000 ) // 1,000,000,000,000 ¹Ì¸¸ 
	{
		return RGBAToColor( 255, 255, 0, AlphaValue );
	}
	else if( llNas >= 1000000000000 ) // 1,000,000,000,000 ÀÌ»ó
	{
		return RGBAToColor( 255, 204, 0, AlphaValue );
	}
	
	return RGBAToColor( 255, 255, 255, AlphaValue );
}


//------------------------------------------------------------------------------
// CUIManager::GetNasColor
// Explain:  ³ª½ºÀÇ ±Ý¾×¿¡ µû¶ó¼­ ÁöÁ¤µÈ ³ª½º »öÀ» Á¶Á¤ÇÑ´Ù.
// Date : 2005-11-10,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
COLOR CUIManager::GetNasColor( CTString strNas )
{
	char		szCount[256];
	SQUAD		llNas = 0;
	int			iChar = 0;

	int nLength = strNas.Length();

	for( int i = 0; i < nLength; i++ )
	{
		if( strNas[i] == ',' ) continue;

		szCount[iChar++] = strNas[i];
	}

	szCount[++iChar] = NULL;

	llNas = _atoi64( szCount );

	return GetNasColor( llNas );
}

//------------------------------------------------------------------------------
// CUIManager::NasNumToWord
// Explain:  ³ª½ºÀÇ ±Ý¾×¿¡ µû¶ó¼­ ´ÜÀ§¸¦ ³ª´©¾î¼­ Ãâ·Â½ÃÄÑÁÜ
// Date : 2009-02-18,Author: sora
//------------------------------------------------------------------------------
CTString CUIManager::NasNumToWord(SQUAD llNas)
{
	CTString strNasString = "";
	CTString strTemp;

	//switch(g_iCountry)
	#if defined G_KOR
	//{
	//	case KOREA:
		//{
		int nQuotient = llNas / 100000000;
		int nRemain = llNas % 100000000;
		if(nQuotient > 0)
		{
			strTemp.PrintF("%d¾ï", nQuotient);
			strNasString += strTemp;
		}
		
		if(nRemain > 0)
		{
			nQuotient = nRemain / 10000;
			nRemain = nRemain % 10000;
			if(nQuotient > 0)
			{
				if(nRemain > 0)
				{
					strTemp.PrintF("%d¸¸%d", nQuotient, nRemain);
				}
				else
				{
					strTemp.PrintF("%d¸¸", nQuotient);
				}
			}
			else
			{
				if(nRemain > 0)
				{
					strTemp.PrintF("%d", nRemain);
				}
			}
			strNasString += strTemp;

		}
	//}
	//	break;

	//	default: //±¹³»¸¸ ´ÜÀ§¸¦ ³ª´©¾î¼­ Ãâ·Â, ´Ù¸¥±¹°¡´Â ÄÞ¸¶·Î ±¸ºÐ
	#else
		{
			strNasString.PrintF("%I64d", llNas);
			InsertCommaToString( strNasString );
		}
	#endif
		//break;
	//}

	return strNasString;
}

// ----------------------------------------------------------------------------
// Name : Render()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::Render( CDrawPort *pdp, CProjection3D* pprProjection )
{
	m_pUIDrawPort = pdp;

	CBackImageManager::getSingleton()->Render(pdp);

	//if(g_iCountry == RUSSIA)
#if defined G_RUSSIA
	{			
		m_pUIDrawPort->SetFont(_pfdDefaultFont);
		m_pUIDrawPort->SetTextMode(-1);
	}
#endif

	// If UIs are not shown
	if( !m_bShowUIs )
		return;

	LONGLONG llElapsedTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();

	if( llElapsedTime - llOldTime > 5000 )
	{
		CPrintF( "ClearAllDamageEffect\n" );
		llOldTime = llElapsedTime;

		if( STAGEMGR()->GetCurStage() == eSTAGE_GAMEPLAY )
		{
			ClearDamageData();
		}	
	}


	// Mipmap bias
	FLOAT	fMipmapBias = GetOption()->GetTextureQuality( 2 );
	gfxSetTextureBiasing( fMipmapBias );

	if( STAGEMGR()->GetCurStage() == eSTAGE_ZONELOADING )
	{
		m_pUIDrawPort->InitTextureData( m_ptBlackTexture );
		
		m_pUIDrawPort->AddTexture( 0, 0, m_pUIDrawPort->dp_MaxI, m_pUIDrawPort->dp_MaxJ,
										m_rtBlack.U0, m_rtBlack.V0, m_rtBlack.U1, m_rtBlack.V1, 0xFFFFFFFF );
		m_pUIDrawPort->FlushRenderingQueue();
		return;
	}

	// Popups of objects
	if( _iNameType )
		RenderObjectNamePopup( pprProjection );
	else
		RenderObjectIndexPopup( pprProjection );

	SetDamageState();

	// Render UIs
	for( INDEX iUI = UI_TYPE_END - 1; iUI >= UI_TYPE_START; iUI-- )
	{
		INDEX	iCurUI = m_aUIOrder[iUI];
		if( m_apUIs[iCurUI] != NULL &&
			m_apUIs[iCurUI]->IsEnabled() && m_apUIs[iCurUI]->IsVisible() )
		{
			if(iCurUI>=UI_MESSAGEBOX_START)
			{
				if(DoesMessageBoxLExist(MSGLCMD_QUEST_REQ)||
					DoesMessageBoxLExist(MSGLCMD_EVENT_2PAN4PAN_ONE)||
					DoesMessageBoxLExist(MSGLCMD_EVENT_2PAN4PAN_TWO)||
					DoesMessageBoxExist(MSGCMD_ASK_ONE_FIVE)||
					DoesMessageBoxExist(MSGCMD_ASK_ONE_FOUR)||
					DoesMessageBoxExist(MSGCMD_ASK_TWO_OPEN))
				{

					// 051104 npc¿¡ ÀÇÇØ »ý¼ºµÈ Ã¢À» °Å¸®°¡ ¸Ö¾îÁö¸é Áö¿öÁØ´Ù
					// Check distance
					FLOAT	fDiffX = _pNetwork->MyCharacterInfo.x - GetQuest()->GetNpcPosX();
					FLOAT	fDiffZ = _pNetwork->MyCharacterInfo.z - GetQuest()->GetNpcPosZ();
					if( fDiffX * fDiffX + fDiffZ * fDiffZ > UI_VALID_SQRDIST )
					{
						GetQuest()->CloseQuest();
						continue;
					}
				}

				if(DoesMessageBoxLExist(MSGLCMD_AUCTION))
				{
					if(GetAuction()->IsFarNPC())
						CloseMessageBoxL(MSGLCMD_AUCTION);
				}

				if(DoesMessageBoxLExist(MSGLCMD_WAREHOUSE_REQ))
				{
					if (GetWareHouse()->GetUseCashRemote() == false)
					{
						FLOAT	fDiffX = _pNetwork->MyCharacterInfo.x - GetWareHouse()->GetNpcPosX();
						FLOAT	fDiffZ = _pNetwork->MyCharacterInfo.z - GetWareHouse()->GetNpcPosZ();
						if( fDiffX * fDiffX + fDiffZ * fDiffZ > UI_VALID_SQRDIST )
						{
							CloseMessageBoxL(MSGLCMD_WAREHOUSE_REQ);
							continue;
						}
					}
				}				
			}

			if (isCreateVisible(UI_AUCTION) == true)
			{
				if (GetAuction()->IsFarNPC())
					GetAuction()->CloseAuction();
			}
			// [7/29/2009 rumist] Æ¯Á¤ °Å¸®¸¦ ¹þ¾î³ª¸é Ã¢ ´Ý±â ¿É¼Ç. 
			if( GetAffinity()->IsOpenUI() )
			{
				FLOAT	fDiffX = _pNetwork->MyCharacterInfo.x - GetAffinity()->GetNPCPosX();
				FLOAT	fDiffZ = _pNetwork->MyCharacterInfo.z - GetAffinity()->GetNPCPosZ();
				if( fDiffX * fDiffX + fDiffZ * fDiffZ > UI_VALID_SQRDIST ){
					GetAffinity()->CloseAllUI();
					continue;
				}
			}
			// close UI automatically. [6/16/2010 rumist]
			if( GetSocketSystem()->IsOpenedUI() )
			{
				FLOAT	fDiffX = _pNetwork->MyCharacterInfo.x - GetSocketSystem()->GetNPCPosX();
				FLOAT	fDiffZ = _pNetwork->MyCharacterInfo.z - GetSocketSystem()->GetNPCPosZ();
				if( fDiffX * fDiffX + fDiffZ * fDiffZ > UI_VALID_SQRDIST ){
					GetSocketSystem()->absCloseAllUI();
					CTString strMessage;
					strMessage.PrintF( _S( 322, "°Å¸®°¡ ¸Ö¾î¼­ »ç¿ëÇÒ ¼ö ¾ø½À´Ï´Ù.") );
					_pNetwork->ClientSystemMessage(strMessage, SYSMSG_ERROR);
					continue;
				}
			}
			m_apUIs[iCurUI]->Render();

			// »õ·Î¿î ¹æ½Ä 
			m_apUIs[iCurUI]->Render(pdp);

		}
	}

	// MSG Box Render;
	MSGBOXMGR()->Render(pdp);

	CUIBase* pUI = CUIFocus::getSingleton()->getUI();
	if (pUI)
		pUI->Render(pdp);

	CUITooltipMgr::getSingleton()->Render(pdp);
	CUISkillToolTip::getSingleton()->Render(pdp);

	//----------------------------------------------------------------------
	
	// Post Render UIs
	for( INDEX jUI = UI_TYPE_END - 1; jUI >= UI_TYPE_START; jUI-- )
	{
		INDEX	iCurUI = m_aUIOrder[jUI];
		if( m_apUIs[iCurUI] != NULL &&
			m_apUIs[iCurUI]->IsEnabled() && m_apUIs[iCurUI]->IsVisible() )
		{
			
			m_apUIs[iCurUI]->PostRender();
			
		}
	}

	if ( IsShowAni() )
	{
		HUD_DrawItemModel();
	}
	_UISignBoard->Render();
	_UIAutoHelp->Render();
	_UIAutoHelp->RenderGMNotice();
	GetCombo()->SysStateRender();
	

//	if(g_iCountry == KOREA) 
#if defined G_KOR
		_UIAutoHelp->ClassificationShowRender();
#endif

	if (m_pIconDrag != NULL)
	{
		int		ox, oy;
		m_pIconDrag->GetPos(ox, oy);
		m_pIconDrag->SetPos(m_nDragX, m_nDragY);
		CUIBase* pParent = m_pIconDrag->getParent();
		m_pIconDrag->setParent(NULL);
		m_pIconDrag->Render(pdp);
		m_pIconDrag->setParent(pParent);
		m_pIconDrag->SetPos(ox, oy);
	}

	if (m_pBaseDrag != NULL)
	{
		int		ox, oy;
		m_pBaseDrag->GetPos(ox, oy);
		m_pBaseDrag->SetPos(m_nDragX, m_nDragY);
		CUIBase* pParent = m_pBaseDrag->getParent();
		m_pBaseDrag->setParent(NULL);
		m_pBaseDrag->Render(pdp);
		m_pBaseDrag->setParent(pParent);
		m_pBaseDrag->SetPos(ox, oy);
	}

	// Render cursor
	if( !m_bRButtonDown )
	{
		if( m_bMouseInsideUIs )
		{
			if (!g_web.GetWebHandle())
			{
				GetMouseCursor()->SetCursorType( m_umctTypeInUI );
			}
		}
		else
			m_umctTypeInUI = UMCT_NORMAL;
	}

	// Mipmap bias
	extern FLOAT	gap_fTextureLODBias;
	gfxSetTextureBiasing( gap_fTextureLODBias );
}

// ----------------------------------------------------------------------------
// Name : RenderObjectNamePopup()
// Desc : Character, npc and item must use ska...
// ----------------------------------------------------------------------------
void CUIManager::RenderObjectNamePopup( CProjection3D* pprProjection )
{	
	// If game state is not on game
	if( STAGEMGR()->GetCurStage() != eSTAGE_GAMEPLAY || _pInput->inp_bFreeMode )
		return;
	extern INDEX	g_iShowName;
	extern INDEX	g_iShowNameItem;
	if(g_iShowName == -1 && g_iShowNameItem == -1)
		return;

	// Blinking name popup for pk
	static bool		bHideName = TRUE;
	static __int64	llOldTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();
	static __int64	llElapsedTime = 0;
	__int64			llCurTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();
	llElapsedTime += llCurTime - llOldTime;
	llOldTime = llCurTime;
	if( llElapsedTime > 500 )
	{
		bHideName = !bHideName;
		do
		{
			llElapsedTime -= 500;
		}
		while( llElapsedTime > 500 );
	}

	COLOR	colNameBlend;
	if( bHideName ) colNameBlend = 0xFFFFFF00 | COLOR( 0x3C + 0xC3 * ( 1.0f - ( (FLOAT)llElapsedTime / 500.0f ) ) );
	else colNameBlend = 0xFFFFFF00 | COLOR( 0x3C + 0xC3 * ( (FLOAT)llElapsedTime / 500.0f ) );

	// Get font size
	int	nBoxWidth = 0, nTextSX, nTextSY, nChatMsgLines, nShopMsgLines;
	int	nFontWidth = _pUIFontTexMgr->GetFontWidth() + _pUIFontTexMgr->GetFontSpacing();
	int	nFontHeight = _pUIFontTexMgr->GetLineHeight();

	CEntity			*penObject;
	CTString		strName, strTemp;
	CTString		myNick, otherNick;
	CModelInstance	*pmi;
	FLOAT3D			vObjectPos, vViewPos, vPopupPos, vObjCenter;
	FLOATaabbox3D	boxModel;
	int				nColIndex, nLevelDiff, nPopupY;
	FLOAT			fRadius, fHeight, fX, fZ, fPopupZ, fSqrDist;
	FLOAT			fSqrDistance = g_iShowName * OPTION_NAME_DISTANCE;
	FLOAT			fSqrDistanceItem = g_iShowNameItem * OPTION_NAME_DISTANCE;
	fSqrDistance *= fSqrDistance;
	fSqrDistanceItem *= fSqrDistanceItem;
	UtilHelp* pHelp = UtilHelp::getSingleton();
	ObjInfo* pInfo = ObjInfo::getSingleton();

	if (pHelp == NULL)
		return;

	int				nMySyndiType = _pNetwork->MyCharacterInfo.iSyndicateType;

	////////////////////////////////////////////////////////////////////////
	// Show name of npc
	if( g_iShowName > 0 )
	{
		ACTORMGR()->DrawObjectName(m_pUIDrawPort, pprProjection, colNameBlend, bHideName);
	}

	// My character
	nChatMsgLines = _pNetwork->MyCharacterInfo.ChatMsg.GetCount();
#ifdef GM_INVISIBLE_MODE
	if(_pNetwork->MyCharacterInfo.m_ModelColor ==NULL)
	{	
#endif
	if( g_iShowName > 0 || nChatMsgLines > 0 || _pNetwork->MyCharacterInfo.sbShopType != PST_NOSHOP ||
		_pNetwork->MyCharacterInfo.pk_mode != 0 )
	{
		penObject = CEntity::GetPlayerEntity( 0 );
		vObjectPos = penObject->GetLerpedPlacement().pl_PositionVector;

		// Get frame box
		pmi = penObject->GetModelInstance();
		ASSERT( pmi != NULL );
		if(pmi == NULL)						
			return;
		ASSERT( pmi->GetName() != "" );
		if( pmi->GetName() == "" )
			return;
		pmi->GetAllFramesBBox( boxModel );
		boxModel.StretchByVector( pmi->mi_vStretch );
		fHeight = boxModel.maxvect(2) - boxModel.minvect(2);

		fRadius = fHeight * 0.5f;

		// Object point to screen point

		if (_pNetwork->MyCharacterInfo.ulPlayerState & PLAYER_STATE_FLYING)
		{
			vObjectPos(2) += (fHeight * 1.5f);
		}
		else
		{
			vObjectPos(2) += fHeight;
		}
		
		pprProjection->PreClip( vObjectPos, vViewPos );
		pprProjection->PostClip( vViewPos, vPopupPos );
		fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
					* pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

		// Get box region
		//if(g_iCountry == THAILAND) 
#if defined G_THAI
		{
			nBoxWidth = FindThaiLen(_pNetwork->MyCharacterInfo.name); //wooss 051017
			if(_pNetwork->MyCharacterInfo.pk_mode == 0 ) 
				nBoxWidth+=13;
			else 
				nBoxWidth+=27;
		} 
		//else 
#else
		if( _pNetwork->MyCharacterInfo.pk_mode == 0 )
		{
			//if(g_iCountry == RUSSIA)
			#if defined G_RUSSIA
				nBoxWidth = m_pUIDrawPort->GetTextWidth(_pNetwork->MyCharacterInfo.name) + 13;
			//else
			#else
				nBoxWidth = _pNetwork->MyCharacterInfo.name.Length() * nFontWidth + 13;
			#endif
		}
		else
		{
			//if(g_iCountry == RUSSIA)
			#if defined G_RUSSIA
				nBoxWidth = m_pUIDrawPort->GetTextWidth(_pNetwork->MyCharacterInfo.name) + 27;
			//else
			#else
				nBoxWidth = _pNetwork->MyCharacterInfo.name.Length() * nFontWidth + 27;
			#endif
		}
#endif
		m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
		m_rcName.Right = m_rcName.Left + nBoxWidth;
		m_rcName.Bottom = vPopupPos(2) - 7;
		m_rcName.Top = m_rcName.Bottom - 15;
		nPopupY = m_rcName.Top;

		// Set popup texture
		m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

#ifdef PREMIUM_CHAR
		if (GAMEDATAMGR()->GetPremiumChar()->getType() == PREMIUM_CHAR_TYPE_FIRST)
		{
			UIRect			rcPcName;
			rcPcName.Left = m_rcName.Left - 2;
			rcPcName.Top = m_rcName.Top - 11;
			rcPcName.Right = m_rcName.Right + 30;
			rcPcName.Bottom = m_rcName.Bottom + 24;

			m_pUIDrawPort->AddTexture( rcPcName.Left, rcPcName.Top, rcPcName.Left + 2, rcPcName.Bottom,
				m_rtPremiumNameL.U0, m_rtPremiumNameL.V0, m_rtPremiumNameL.U1, m_rtPremiumNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( rcPcName.Left + 2, rcPcName.Top, rcPcName.Right - 63, rcPcName.Bottom,
				m_rtPremiumNameC.U0, m_rtPremiumNameC.V0, m_rtPremiumNameC.U1, m_rtPremiumNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( rcPcName.Right - 63, rcPcName.Top, rcPcName.Right, rcPcName.Bottom,
				m_rtPremiumNameR.U0, m_rtPremiumNameR.V0, m_rtPremiumNameR.U1, m_rtPremiumNameR.V1, 0xFFFFFFFF, fPopupZ );

			nPopupY = m_rcName.Top - 5;
		}
#endif	//	PREMIUM_CHAR

		// Add render regions
		if( _pNetwork->MyCharacterInfo.pk_mode == 0 )
		{
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );
		}
		else
		{
			COLOR	colBlend = 0xFFFFFFFF;
			if( _pNetwork->MyCharacterInfo.pk_mode == 2 )
				colBlend = colNameBlend;

			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colBlend, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 16, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colBlend, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameRPK.U0, m_rtNameRPK.V0, m_rtNameRPK.U1, m_rtNameRPK.V1, colBlend, fPopupZ );
		}

		// È£Äª
		COLOR myNickColor;
		INDEX iMyNickItemIndex;
		if (_pNetwork->MyCharacterInfo.iNickType > 0)	// È£ÄªÀÌ ÀÖÀ» ¶§
		{
			if (_pNetwork->MyCharacterInfo.iNickType == DEF_DUMMY_TITLE_INDEX)	// new
			{
				myNick		= _pNetwork->MyCharacterInfo.stCustomTitle.name;
				myNickColor = CustomTitleData::m_vecBackColor[_pNetwork->MyCharacterInfo.stCustomTitle.nBackColor];
			}
			else
			{
				//  [3/25/2010 kiny8216] È£Äª ÀÌ¸§À» ¾ÆÀÌÅÛ lod¿¡¼­ ºÒ·¯¿Àµµ·Ï º¯°æ
				iMyNickItemIndex	=TitleStaticData::getData(_pNetwork->MyCharacterInfo.iNickType)->GetItemIndex();
				myNick		= GetNickName()->GetName(iMyNickItemIndex);
				COLOR tmpColor = TitleStaticData::getData(_pNetwork->MyCharacterInfo.iNickType)->GetBGColor();
				myNickColor = (tmpColor|255);
			}

#if defined G_RUSSIA
			nBoxWidth = m_pUIDrawPort->GetTextWidth(myNick) + 13; 
#else
			nBoxWidth = myNick.Length() * nFontWidth + 13;
#endif
			m_rcNickName.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcNickName.Right = m_rcNickName.Left + nBoxWidth;
			m_rcNickName.Bottom = nPopupY - 5;
			m_rcNickName.Top = (m_rcNickName.Bottom - 1 * nFontHeight) - 4;
			nPopupY = m_rcNickName.Top;

			m_pUIDrawPort->AddTexture( m_rcNickName.Left, m_rcNickName.Top, m_rcNickName.Left + 2, m_rcNickName.Bottom,
										m_rtNickNameL.U0, m_rtNickNameL.V0, m_rtNickNameL.U1, m_rtNickNameL.V1, myNickColor, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcNickName.Left + 2, m_rcNickName.Top, m_rcNickName.Right - 2, m_rcNickName.Bottom,
										m_rtNickNameC.U0, m_rtNickNameC.V0, m_rtNickNameC.U1, m_rtNickNameC.V1, myNickColor, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcNickName.Right - 2, m_rcNickName.Top, m_rcNickName.Right, m_rcNickName.Bottom,
										m_rtNickNameR.U0, m_rtNickNameR.V0, m_rtNickNameR.U1, m_rtNickNameR.V1, myNickColor, fPopupZ );
		}
		// Guild Name
		if( _pNetwork->MyCharacterInfo.lGuildIndex > 0)
		{
			// Get box region
			//if(g_iCountry == THAILAND) 
			#if defined G_THAI
				nBoxWidth = FindThaiLen(_pNetwork->MyCharacterInfo.strGuildName)+13; //wooss 051017
			//else
			#else
			{
				//if(g_iCountry == RUSSIA)
				#if defined G_RUSSIA
					nBoxWidth = m_pUIDrawPort->GetTextWidth(_pNetwork->MyCharacterInfo.strGuildName) + 13;
				//else
				#else
					nBoxWidth = _pNetwork->MyCharacterInfo.strGuildName.Length() * nFontWidth + 13;
				#endif
			}
			#endif
			m_rcGuildName.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcGuildName.Right = m_rcGuildName.Left + nBoxWidth;
			m_rcGuildName.Bottom = nPopupY - 5;
			m_rcGuildName.Top = (m_rcGuildName.Bottom - 1 * nFontHeight) - 4;
			nPopupY = m_rcGuildName.Top;
			
			m_pUIDrawPort->AddTexture( m_rcGuildName.Left, m_rcGuildName.Top, m_rcGuildName.Left + 2, m_rcGuildName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcGuildName.Left + 2, m_rcGuildName.Top, m_rcGuildName.Right - 2, m_rcGuildName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcGuildName.Right - 2, m_rcGuildName.Top, m_rcGuildName.Right, m_rcGuildName.Bottom,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );
			// WSS_GUILDMASTER 070517 -------------------------->>
			DrawGuildRankBox(m_rcGuildName,_pNetwork->MyCharacterInfo.sbGuildRank,fPopupZ);
			// -------------------------------------------------<<

		}

		nShopMsgLines = 0;
		if( _pNetwork->MyCharacterInfo.sbShopType != PST_NOSHOP )
		{
			nShopMsgLines = _pNetwork->MyCharacterInfo.ShopMsg.GetCount();
			//if(g_iCountry == THAILAND) 
			#if defined G_THAI
				nBoxWidth = FindThaiLen(_pNetwork->MyCharacterInfo.ShopMsg.GetString(0)); //wooss 051017
			//else
			#else
			{
				//if(g_iCountry == RUSSIA)
				#if defined G_RUSSIA
					nBoxWidth = m_pUIDrawPort->GetTextWidth(_pNetwork->MyCharacterInfo.ShopMsg.GetString(0));
				//else
				#else
					nBoxWidth = _pNetwork->MyCharacterInfo.ShopMsg.GetWidth();
				#endif
			}
			#endif
			m_rcShop.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcShop.Right = m_rcShop.Left + nBoxWidth;

			if( _pNetwork->MyCharacterInfo.sbShopType & PST_PREMIUM )
			{
				m_rcShop.Bottom = nPopupY - 18;
				m_rcShop.Top = m_rcShop.Bottom - nShopMsgLines * nFontHeight;

				m_pUIDrawPort->AddTexture( m_rcShop.Left - 13, m_rcShop.Top - 13, m_rcShop.Left, m_rcShop.Top,
											m_rtShopPremLU.U0, m_rtShopPremLU.V0, m_rtShopPremLU.U1, m_rtShopPremLU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top - 13, m_rcShop.Right, m_rcShop.Top,
											m_rtShopPremUp.U0, m_rtShopPremUp.V0, m_rtShopPremUp.U1, m_rtShopPremUp.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top - 13, m_rcShop.Right + 13, m_rcShop.Top,
											m_rtShopPremRU.U0, m_rtShopPremRU.V0, m_rtShopPremRU.U1, m_rtShopPremRU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 13, m_rcShop.Top, m_rcShop.Left, m_rcShop.Bottom,
											m_rtShopPremL.U0, m_rtShopPremL.V0, m_rtShopPremL.U1, m_rtShopPremL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top, m_rcShop.Right, m_rcShop.Bottom,
											m_rtShopPremC.U0, m_rtShopPremC.V0, m_rtShopPremC.U1, m_rtShopPremC.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top, m_rcShop.Right + 13, m_rcShop.Bottom,
											m_rtShopPremR.U0, m_rtShopPremR.V0, m_rtShopPremR.U1, m_rtShopPremR.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 13, m_rcShop.Bottom, m_rcShop.Left, m_rcShop.Bottom + 13,
											m_rtShopPremLL.U0, m_rtShopPremLL.V0, m_rtShopPremLL.U1, m_rtShopPremLL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Bottom, m_rcShop.Right, m_rcShop.Bottom + 13,
											m_rtShopPremLo.U0, m_rtShopPremLo.V0, m_rtShopPremLo.U1, m_rtShopPremLo.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Bottom, m_rcShop.Right + 13, m_rcShop.Bottom + 13,
											m_rtShopPremRL.U0, m_rtShopPremRL.V0, m_rtShopPremRL.U1, m_rtShopPremRL.V1, 0xFFFFFFFF, fPopupZ );

				nPopupY = m_rcShop.Top - 8;
			}
			else
			{
				m_rcShop.Bottom = nPopupY - 10;
				m_rcShop.Top = m_rcShop.Bottom - nShopMsgLines * nFontHeight;

				m_pUIDrawPort->AddTexture( m_rcShop.Left - 5, m_rcShop.Top - 5, m_rcShop.Left, m_rcShop.Top,
											m_rtShopLU.U0, m_rtShopLU.V0, m_rtShopLU.U1, m_rtShopLU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top - 5, m_rcShop.Right, m_rcShop.Top,
											m_rtShopUp.U0, m_rtShopUp.V0, m_rtShopUp.U1, m_rtShopUp.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top - 5, m_rcShop.Right + 5, m_rcShop.Top,
											m_rtShopRU.U0, m_rtShopRU.V0, m_rtShopRU.U1, m_rtShopRU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 5, m_rcShop.Top, m_rcShop.Left, m_rcShop.Bottom,
											m_rtShopL.U0, m_rtShopL.V0, m_rtShopL.U1, m_rtShopL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top, m_rcShop.Right, m_rcShop.Bottom,
											m_rtShopC.U0, m_rtShopC.V0, m_rtShopC.U1, m_rtShopC.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top, m_rcShop.Right + 5, m_rcShop.Bottom,
											m_rtShopR.U0, m_rtShopR.V0, m_rtShopR.U1, m_rtShopR.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 5, m_rcShop.Bottom, m_rcShop.Left, m_rcShop.Bottom + 5,
											m_rtShopLL.U0, m_rtShopLL.V0, m_rtShopLL.U1, m_rtShopLL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Bottom, m_rcShop.Right, m_rcShop.Bottom + 5,
											m_rtShopLo.U0, m_rtShopLo.V0, m_rtShopLo.U1, m_rtShopLo.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Bottom, m_rcShop.Right + 5, m_rcShop.Bottom + 5,
											m_rtShopRL.U0, m_rtShopRL.V0, m_rtShopRL.U1, m_rtShopRL.V1, 0xFFFFFFFF, fPopupZ );

				nPopupY = m_rcShop.Top;
			}
		}

		if( nChatMsgLines > 0 )
		{
			//if(g_iCountry == THAILAND) 
			#if defined G_THAI
				nBoxWidth = FindThaiLen(_pNetwork->MyCharacterInfo.ChatMsg.GetString(0)); //wooss 051017
			//else
			#else
			{
				//if(g_iCountry == RUSSIA)
				#if defined G_RUSSIA
					int nCurWidth = 0;
					int nMaxWidth = 0;
					for( int i=0; i<_pNetwork->MyCharacterInfo.ChatMsg.GetCount(); ++i )
					{
						nCurWidth = m_pUIDrawPort->GetTextWidth(_pNetwork->MyCharacterInfo.ChatMsg.GetString(i));
						if( nMaxWidth < nCurWidth )
						{
							nMaxWidth = nCurWidth;
						}
					}
					nBoxWidth = nMaxWidth;
				//else
				#else
					nBoxWidth = _pNetwork->MyCharacterInfo.ChatMsg.GetWidth();
				#endif
			}
			#endif
			m_rcChat.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcChat.Right = m_rcChat.Left + nBoxWidth;
			m_rcChat.Bottom = nPopupY - 10;
			m_rcChat.Top = m_rcChat.Bottom - nChatMsgLines * nFontHeight;
			nPopupY = m_rcChat.Top;

			m_pUIDrawPort->AddTexture( m_rcChat.Left - 5, m_rcChat.Top - 5, m_rcChat.Left, m_rcChat.Top,
										m_rtChatLU.U0, m_rtChatLU.V0, m_rtChatLU.U1, m_rtChatLU.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left, m_rcChat.Top - 5, m_rcChat.Right, m_rcChat.Top,
										m_rtChatUp.U0, m_rtChatUp.V0, m_rtChatUp.U1, m_rtChatUp.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Right, m_rcChat.Top - 5, m_rcChat.Right + 5, m_rcChat.Top,
										m_rtChatRU.U0, m_rtChatRU.V0, m_rtChatRU.U1, m_rtChatRU.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left - 5, m_rcChat.Top, m_rcChat.Left, m_rcChat.Bottom,
										m_rtChatL.U0, m_rtChatL.V0, m_rtChatL.U1, m_rtChatL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left, m_rcChat.Top, m_rcChat.Right, m_rcChat.Bottom,
										m_rtChatC.U0, m_rtChatC.V0, m_rtChatC.U1, m_rtChatC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Right, m_rcChat.Top, m_rcChat.Right + 5, m_rcChat.Bottom,
										m_rtChatR.U0, m_rtChatR.V0, m_rtChatR.U1, m_rtChatR.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left - 5, m_rcChat.Bottom, m_rcChat.Left, m_rcChat.Bottom + 5,
										m_rtChatLL.U0, m_rtChatLL.V0, m_rtChatLL.U1, m_rtChatLL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left, m_rcChat.Bottom, m_rcChat.Right, m_rcChat.Bottom + 5,
										m_rtChatLo.U0, m_rtChatLo.V0, m_rtChatLo.U1, m_rtChatLo.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Right, m_rcChat.Bottom, m_rcChat.Right + 5, m_rcChat.Bottom + 5,
										m_rtChatRL.U0, m_rtChatRL.V0, m_rtChatRL.U1, m_rtChatRL.V1, 0xFFFFFFFF, fPopupZ );
		}

		ShowDamageList( vPopupPos, fPopupZ, CEntity::GetPlayerEntity( 0 )->en_ulID );

		// Render all elements
		m_pUIDrawPort->FlushRenderingQueue();


		// [sora] RAID_SYSTEM
		if(_pNetwork->MyCharacterInfo.slLabel >= MSG_EXPED_SETLABEL_INDEX_1 && _pNetwork->MyCharacterInfo.slLabel <= MSG_EXPED_SETLABEL_INDEX_7) // Å¸°Ù Ç¥½Ä render
		{
			m_pUIDrawPort->InitTextureData(m_ptdExpeditionTexture);
			
			int nPosX = ((m_rcName.Left + m_rcName.Right) / 2 ) - 21;
			
			int nPosY = 0;

			if(nChatMsgLines > 0)
			{
				nPosY = m_rcChat.Top - 3;
			}
			else if(_pNetwork->MyCharacterInfo.lGuildIndex > 0)	// ¼Ò¼Ó ±æµå°¡ ÀÖÀ»°æ¿ì ±æµå¸í À§¿¡ Ç¥½Ã
			{
				nPosY = m_rcGuildName.Top;
			}
			else if (_pNetwork->MyCharacterInfo.iNickType > 0)	// È£ÄªÀÌ ÀÖ´Â °æ¿ì È£Äª À§¿¡ Ç¥½Ã
			{
				nPosY = m_rcNickName.Top;
			}
			else
			{
				nPosY = m_rcName.Top;
			}

			m_pUIDrawPort->AddTexture(nPosX, nPosY - 42, nPosX + 42, nPosY,
									  m_rtTargetLabel[_pNetwork->MyCharacterInfo.slLabel].U0, m_rtTargetLabel[_pNetwork->MyCharacterInfo.slLabel].V0,
									  m_rtTargetLabel[_pNetwork->MyCharacterInfo.slLabel].U1, m_rtTargetLabel[_pNetwork->MyCharacterInfo.slLabel].V1,
									  0xFFFFFFFF, fPopupZ);

			m_pUIDrawPort->FlushRenderingQueue();
		}
// [sora] GUILD_MARK
#ifdef GUILD_MARK
		if (m_pIconGuildMark != NULL)
		{
			m_pIconGuildMark->SetPos(m_rcGuildName.Left - 17, m_rcGuildName.Top);
			m_pIconGuildMark->setZ(fPopupZ);
			m_pIconGuildMark->Render(m_pUIDrawPort);
		}
#endif
		if ( _pNetwork->IsRvrZone() && nMySyndiType > 0 )
		{
			// ³ªÀÇ °á»ç´ë ¸¶Å©
			ActorMgr* pAcMgr = ActorMgr::getSingleton();
			int nGrade = _pNetwork->MyCharacterInfo.iSyndicateGrade;
			int nIdx = pAcMgr->CheckSyndiMark(nMySyndiType, nGrade);
			pAcMgr->DrawSyndiMark(nIdx, m_pUIDrawPort, m_rcName.Left, m_rcName.Top, fPopupZ);
		}
		// Text
		nTextSX = m_rcName.Left + 7;
		nTextSY = m_rcName.Top + 1;
		// Title
#ifdef NEW_CHAO_SYS
//		BOOL buseblindchao = TRUE;
//		if(_pUIBuff->IsBuffBySkill(1395))
//			buseblindchao = FALSE;
		//ÀÚ±â ÀÚ½Å
		if (_pNetwork->MyCharacterInfo.pkpenalty  > 19000 && _pNetwork->MyCharacterInfo.pkpenalty  <= 32000)
			nColIndex = 14;
		else if(_pNetwork->MyCharacterInfo.pkpenalty  > 6000 && _pNetwork->MyCharacterInfo.pkpenalty  <= 19000)
			nColIndex = 15;
		else if(_pNetwork->MyCharacterInfo.pkpenalty  > 0 && _pNetwork->MyCharacterInfo.pkpenalty  <= 6000)
			nColIndex = 16;
		else if(_pNetwork->MyCharacterInfo.pkpenalty  >= -6000 && _pNetwork->MyCharacterInfo.pkpenalty  < 0)
			nColIndex = 17;
		else if(_pNetwork->MyCharacterInfo.pkpenalty  >= -19000 && _pNetwork->MyCharacterInfo.pkpenalty  < -6000)
			nColIndex = 18;
		else if(_pNetwork->MyCharacterInfo.pkpenalty  >= -32000 && _pNetwork->MyCharacterInfo.pkpenalty  < -19000)
			nColIndex = 19;
		else nColIndex = 9;
#else
		if( _pNetwork->MyCharacterInfo.pkpenalty < -9 ) nColIndex = 11;
		else if( _pNetwork->MyCharacterInfo.pkpenalty > 9 ) nColIndex = 7;
		else nColIndex = 9;
		// PK
		if( _pNetwork->MyCharacterInfo.pk_mode != 0 )
			nColIndex--;
#endif
		if( _pNetwork->MyCharacterInfo.sbPresscorps > 0)
		{
			if ( _pNetwork->MyCharacterInfo.lGuildIndex > 0 && _pNetwork->MyCharacterInfo.ubGuildNameColor == 6)
				 m_pUIDrawPort->PutTextEx( _pNetwork->MyCharacterInfo.name, nTextSX, nTextSY,
				0xFF8C00FF, fPopupZ );
			else
				m_pUIDrawPort->PutTextEx( _pNetwork->MyCharacterInfo.name, nTextSX, nTextSY,
				0x00C80FFF, fPopupZ );
		}
		else
		{
			if ( _pNetwork->MyCharacterInfo.lGuildIndex > 0 && _pNetwork->MyCharacterInfo.ubGuildNameColor == 6)
				 nColIndex = 22;
			m_pUIDrawPort->PutTextEx( _pNetwork->MyCharacterInfo.name, nTextSX, nTextSY,
										pHelp->GetTargetNameColor( nColIndex ), fPopupZ );
		}

		// È£Äª
		nTextSX = m_rcNickName.Left + 7;
		nTextSY = m_rcNickName.Top + 2;

		if( _pNetwork->MyCharacterInfo.iNickType > 0) //new 08.06.2015
		{
			COLOR tmpColor2;

			if (_pNetwork->MyCharacterInfo.iNickType == DEF_DUMMY_TITLE_INDEX)
				tmpColor2 = CustomTitleData::m_vecFrontColor[_pNetwork->MyCharacterInfo.stCustomTitle.nFrontColor];
			else
				tmpColor2 = TitleStaticData::getData(_pNetwork->MyCharacterInfo.iNickType)->GetColor();

			m_pUIDrawPort->PutTextEx(myNick, nTextSX, nTextSY, tmpColor2, fPopupZ );
		}
		// Text
		nTextSX = m_rcGuildName.Left + 7;
		nTextSY = m_rcGuildName.Top + 2;

		// Guild Name
		if( _pNetwork->MyCharacterInfo.lGuildIndex > 0)
		{		
			// WSS_GUILDMASTER 070517 --------------------------->>
			// ----------------------------------------------------<<

			//[071123: Su-won] DRATAN_SIEGE_DUNGEON
			COLOR colGuildName = 0xD6A4D6FF;

			if( _pNetwork->MyCharacterInfo.ubGuildNameColor == 1 )			//¸Þ¶óÅ© ¼ºÁÖ ±æµå 
				colGuildName = 0xFF4500FF;
			else if( _pNetwork->MyCharacterInfo.ubGuildNameColor == 2 )		//µå¶óÅº ¼ºÁÖ ±æµå
				colGuildName = 0xFFD700FF;
			else if (_pNetwork->MyCharacterInfo.ubGuildNameColor == 3)
				colGuildName = 0xFF7B00FF;
			else if (_pNetwork->MyCharacterInfo.ubGuildNameColor == 4)
				colGuildName = 0x3884FFFF;
			else if (_pNetwork->MyCharacterInfo.ubGuildNameColor == 5)
				colGuildName = 0x32FF3DFF;
			else if (_pNetwork->MyCharacterInfo.ubGuildNameColor == 6)
				colGuildName = 0xFF8C00FF;

			m_pUIDrawPort->PutTextEx( _pNetwork->MyCharacterInfo.strGuildName, nTextSX, nTextSY,
									colGuildName, fPopupZ );
		}

		if( nShopMsgLines > 0 )
		{
			nTextSX = m_rcShop.Left + 1;
			nTextSY = m_rcShop.Top + 1;
			for( int i = 0; i < nShopMsgLines; i++ )
			{
				m_pUIDrawPort->PutTextEx( _pNetwork->MyCharacterInfo.ShopMsg.GetString( i ), nTextSX, nTextSY,
											_pNetwork->MyCharacterInfo.ShopMsg.GetColor(), fPopupZ );
				nTextSY += nFontHeight;
			}
		}

		if( nChatMsgLines > 0 )
		{
			nTextSX = m_rcChat.Left + 1;
			nTextSY = m_rcChat.Top + 1;
			for( int i = 0; i < nChatMsgLines; i++ )
			{
				m_pUIDrawPort->PutTextEx( _pNetwork->MyCharacterInfo.ChatMsg.GetString( i ), nTextSX, nTextSY,
											_pNetwork->MyCharacterInfo.ChatMsg.GetColor(), fPopupZ );
				nTextSY += nFontHeight;
			}

			__int64	llCurTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();
			if( llCurTime - _pNetwork->MyCharacterInfo.ChatMsg.GetTime() > CHATMSG_TIME_DELAY )
				_pNetwork->MyCharacterInfo.ChatMsg.Reset();
		}

		// Flush all render text queue
		GetDrawPort()->EndTextEx( TRUE );
	}

#ifdef GM_INVISIBLE_MODE
	} 
#endif

	// Get target
	penObject = pInfo->GetTargetEntity(eTARGET_REAL);
	
	// If over target is not exist
	if( !pInfo->IsTargetActive(eTARGET_REAL) || penObject == NULL )
		return;

	if (penObject != NULL && penObject->IsFirstExtraFlagOn(ENF_EX1_CLICK_OBJECT))
	{
		return;
	}

	vObjectPos = penObject->GetLerpedPlacement().pl_PositionVector;

	// Test distance
	fX = vObjectPos(1) - _pNetwork->MyCharacterInfo.x;
	fZ = vObjectPos(3) - _pNetwork->MyCharacterInfo.z;
	fSqrDist = fX * fX + fZ * fZ;
	if( fSqrDist > fSqrDistance )
		return;
	
	vObjectPos = penObject->en_plPlacement.pl_PositionVector;

	// Get frame box
	pmi = penObject->GetModelInstance();
	ASSERT( pmi != NULL );
	if(pmi == NULL)
		return;
	ASSERT( pmi->GetName() != "" );
	if( pmi->GetName() == "" )
		return;

	pmi->GetAllFramesBBox( boxModel );
	boxModel.StretchByVector( pmi->mi_vStretch );

	if (penObject->IsCharacter() &&	penObject->en_pCharacterTarget->cha_state & PLAYER_STATE_FLYING)
	{
		FLOAT fHeight = boxModel.maxvect(2) - boxModel.minvect(2);
		vObjectPos(2) += (fHeight * 1.5f);
	}
	else
	{
		vObjectPos(2) += boxModel.maxvect(2) - boxModel.minvect(2);
	}

	// Object point to screen point
	pprProjection->PreClip( vObjectPos, vViewPos );
	pprProjection->PostClip( vViewPos, vPopupPos );
	fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
				 * pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

	COLOR colNas = pHelp->GetTargetNameColor( 2 );
	SBYTE sbTargetType = pInfo->GetTargetType(eTARGET_REAL);
	SQUAD llCount = pInfo->GetTargetCount();
	int nPkMode = pInfo->GetTargetPKMode(eTARGET_REAL);
	INDEX iNickIdx = pInfo->GetTargetNickIdx();
	LONG lGuildIdx = pInfo->GetTargetGuildIdx();
	// Get name
	if( sbTargetType == ITEM )
	{
		if( llCount > 1 )
		{
			strTemp.PrintF( "%I64d", llCount );
			InsertCommaToString( strTemp );
			strName.PrintF( "%s(%s)", pInfo->GetTargetName(eTARGET_REAL), strTemp );
			colNas = GetNasColor( llCount );

		}
		else
		{
			strName = pInfo->GetTargetName(eTARGET_REAL);
			// [091123 sora] ÇÑÂÊ¸¸ ÁÖ¼®Ã³¸®µÇ¾î ÀÌ¸§¿¡()°¡ µé¾î°£ ¾ÆÀÌÅÛ ÀÌ¸§ÀÌ ¿Ã¹Ù·Î Ç¥½ÃµÇÁö ¾ÊÀ½
			//strName.TrimRightChar( '(' );
		}
	}
	else
	{
		strName.PrintF( "%s", pInfo->GetTargetName(eTARGET_REAL) );

		// [2010/10/20 : Sora] ¸ó½ºÅÍ ¿ëº´ Ä«µå
		if( penObject->IsFirstExtraFlagOn(ENF_EX1_MONSTER_MERCENARY) )
			strName = _S( 5151, "[¿ëº´]") + strName;
	}

	// Get box region
	if( sbTargetType == CHARACTER )
	{
		//if(g_iCountry == THAILAND) 
	#if defined G_THAI
		{
			nBoxWidth = FindThaiLen(strName); //wooss 051017
			if(nPkMode == 0 ) 
				nBoxWidth+=13;
			else 
				nBoxWidth+=27;			
		}
		//else 
	#else
		if( nPkMode == 0 )
		{
			//if(g_iCountry == RUSSIA)
			#if defined G_RUSSIA
				nBoxWidth = m_pUIDrawPort->GetTextWidth(strName) + 13;
			//else
			#else
				nBoxWidth = strName.Length() * nFontWidth + 13;
			#endif
		}
		else
		{
			//if(g_iCountry == RUSSIA)
			#if defined G_RUSSIA
				nBoxWidth = m_pUIDrawPort->GetTextWidth(strName) + 27;
			//else
			#else
				nBoxWidth = strName.Length() * nFontWidth + 27;
			#endif
		}
	#endif
	}
	//else if(g_iCountry == THAILAND) 
	//	nBoxWidth = FindThaiLen(strName)+13; //wooss 051017
	else
	{
		//if(g_iCountry == RUSSIA)
		#if defined G_RUSSIA
			nBoxWidth = m_pUIDrawPort->GetTextWidth(strName) + 13;
		#elif defined(G_THAI)
			nBoxWidth = FindThaiLen(strName)+13; //wooss 051017
		//else
		#else
			nBoxWidth = strName.Length() * nFontWidth + 13;
		#endif
	}

	m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
	m_rcName.Right = m_rcName.Left + nBoxWidth;
	m_rcName.Bottom = vPopupPos(2) - 7;
	m_rcName.Top = m_rcName.Bottom - 15;
	nPopupY = m_rcName.Top;

#ifdef PREMIUM_CHAR
	if( sbTargetType == CHARACTER )
	{
		ObjectBase* pChar = ACTORMGR()->GetObject( eOBJ_CHARACTER, penObject->GetNetworkID() );

		if (pChar != NULL && pChar->GetPremiumType() == PREMIUM_CHAR_TYPE_FIRST)
		{
			nPopupY = m_rcName.Top - 5;
		}
	}
#endif	//	PREMIUM_CHAR

	if (iNickIdx > 0)	// È£ÄªÀÌ ÀÖÀ» ¶§
	{
		if( sbTargetType == CHARACTER )
		{	
			//  [3/25/2010 kiny8216] È£Äª ÀÌ¸§À» ¾ÆÀÌÅÛ lod¿¡¼­ ºÒ·¯¿Àµµ·Ï º¯°æ
			INDEX iTargetItemIndex  = TitleStaticData::getData(iNickIdx)->GetItemIndex();
			CTString tmpTargetNick	= GetNickName()->GetName(iTargetItemIndex);

#if defined G_RUSSIA
			nBoxWidth = m_pUIDrawPort->GetTextWidth(tmpTargetNick) + 13; 
#else
			nBoxWidth = tmpTargetNick.Length() * nFontWidth + 13;
#endif

			m_rcNickName.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcNickName.Right = m_rcNickName.Left + nBoxWidth;
			m_rcNickName.Bottom = nPopupY - 5;
			m_rcNickName.Top = (m_rcNickName.Bottom - 1 * nFontHeight) - 4;
			nPopupY = m_rcNickName.Top;
		}
	}
	// Guild Name
	if( lGuildIdx != -1 )
	{
		// Get box region
		if( sbTargetType == CHARACTER )
		{	
			//if(g_iCountry == THAILAND) 
			#if defined G_THAI
				nBoxWidth = FindThaiLen(pInfo->GetTargetGuildName())+13; //wooss 051017
			//else 
			#else
			{
				//if(g_iCountry == RUSSIA)
				#if defined G_RUSSIA
					nBoxWidth = m_pUIDrawPort->GetTextWidth(pInfo->GetTargetGuildName()) + 13;
				//else
				#else
					nBoxWidth = pInfo->GetTargetGuildName().Length() * nFontWidth + 13;
				#endif
			}
			#endif
		}
		
		m_rcGuildName.Left		= vPopupPos(1) - nBoxWidth / 2;
		m_rcGuildName.Right		= m_rcGuildName.Left + nBoxWidth;
		m_rcGuildName.Bottom	= nPopupY - 5;
		m_rcGuildName.Top		= (m_rcGuildName.Bottom - 1 * nFontHeight) - 4;
		nPopupY					= m_rcGuildName.Top;
	}

	// Set popup texture
	m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );
 
	// Add render regions
	if( sbTargetType == CHARACTER )
	{
		COLOR colPopup =0xFFFFFFFF;
		BOOL bTarget = FALSE;
		int iAddFrame =0;

		//ÇöÀç Å¸°ÙÀ¸·Î Àâ°í ÀÖ´Â Ä³¸¯ÅÍÀÏ ¶§...
		if( pInfo->GetTargetEntity(eTARGET) == penObject )
		{
			bTarget =TRUE;
			iAddFrame =3;

			if( IsEnemy(penObject, CHARACTER, TRUE) )	//ÀûÀÌ¸é Å×µÎ¸®¸¦ »¡°£»öÀ¸·Î...
				colPopup =0xFF0000FF;
			else							//ÀûÀÌ ¾Æ´Ï¸é ³ë¶õ»öÀ¸·Î...
				colPopup =0xFFFF00FF;
		}
		
		if( nPkMode == 3 )
		{
			if( bTarget )
			{
				m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 16, m_rcName.Bottom +iAddFrame,
											m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
											m_rtNameRDefPK2.U0, m_rtNameRDefPK2.V0, m_rtNameRDefPK2.U1, m_rtNameRDefPK2.V1, colPopup, fPopupZ );

			}
			m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 16, m_rcName.Bottom +iAddFrame,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
										m_rtNameRDefPK2.U0, m_rtNameRDefPK2.V0, m_rtNameRDefPK2.U1, m_rtNameRDefPK2.V1, colPopup, fPopupZ );
		}
		else if( nPkMode == 0 )
		{
			if( bTarget )
			{
				m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom+iAddFrame,
											m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 2, m_rcName.Bottom +iAddFrame,
											m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
											m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );

			}

			m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom+iAddFrame,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 2, m_rcName.Bottom +iAddFrame,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );
		}
		else
		{
			if( nPkMode == 2 )
				colPopup = colNameBlend;

			if( bTarget )
			{
				m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 16, m_rcName.Bottom +iAddFrame,
											m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
											m_rtNameRPK.U0, m_rtNameRPK.V0, m_rtNameRPK.U1, m_rtNameRPK.V1, colPopup, fPopupZ );
			}

			m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 16, m_rcName.Bottom +iAddFrame,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
										m_rtNameRPK.U0, m_rtNameRPK.V0, m_rtNameRPK.U1, m_rtNameRPK.V1, colPopup, fPopupZ );
		}

		if (iNickIdx > 0)	// È£ÄªÀÌ ÀÖÀ» ¶§
		{
			// ¸¶¿ì½º ¿À¹ö ½Ã Ã³¸®
		}
		// Guild Name
		if( lGuildIdx != -1 )
		{
			m_pUIDrawPort->AddTexture( m_rcGuildName.Left, m_rcGuildName.Top, m_rcGuildName.Left + 2, m_rcGuildName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcGuildName.Left + 2, m_rcGuildName.Top, m_rcGuildName.Right - 2, m_rcGuildName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcGuildName.Right - 2, m_rcGuildName.Top, m_rcGuildName.Right, m_rcGuildName.Bottom,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );

			// WSS_GUILDMASTER 070517 -------------------------->>
			DrawGuildRankBox(m_rcGuildName, pInfo->GetTargetGuildRank(), fPopupZ);	
			// -------------------------------------------------<<
		}
	}
	else
	{
		COLOR colPopup =0xFFFFFFFF;
		BOOL bTarget =FALSE;

		//ÇöÀç Å¸°ÙÀ¸·Î Àâ°í ÀÖ´Â ´ë»óÀÏ ¶§...
		if( pInfo->GetTargetEntity(eTARGET) == penObject )
		{
			bTarget =TRUE;
			switch( sbTargetType )
			{
			case MOB:				
				{
					// ºÎÈ°ÁøÁö ÀÌ¸§ÀÌ ¼ö½Ã·Î ¹Ù²î¹Ç·Î µå¶óÅº °ø¼º¿¡¼­´Â
					// ¸¶¿ì½º ¿À¹ö½Ã MOB,NPC ÀÌ¸§ Ç¥½Ã´Â ÇÏÁö ¾Ê´Â´Ù.
					if( _pNetwork->MyCharacterInfo.sbAttributePos & MATT_WAR )
						return;								

					ObjectBase* pObject = ACTORMGR()->GetObject(eOBJ_MOB, pInfo->GetTargetServerIdx(eTARGET));

					if (pObject != NULL)
					{
						CMobTarget* pTarget = static_cast< CMobTarget* >(pObject);

						if ( pTarget->IsMercenary() || pTarget->IsTotem() || pTarget->IsTrap() || pTarget->IsParasite() )
						{
							if ( IsEnemy( pTarget, MOB ) )
								colPopup = 0xFF0000FF;
							else
								colPopup = 0xFFFF00FF;
						}
						else
							colPopup = 0xFF0000FF;
						break;
					}
				}
				break;
			case NPC:
				// WSS_DRATAN_SEIGEWARFARE 2007/08/23 ----------------->>
// ºÎÈ°ÁøÁö ÀÌ¸§ÀÌ ¼ö½Ã·Î ¹Ù²î¹Ç·Î µå¶óÅº °ø¼º¿¡¼­´Â
// ¸¶¿ì½º ¿À¹ö½Ã MOB,NPC ÀÌ¸§ Ç¥½Ã´Â ÇÏÁö ¾Ê´Â´Ù.
				if( _pNetwork->MyCharacterInfo.sbAttributePos & MATT_WAR )
									return;				
// ----------------------------------------------------<<
				colPopup = 0xFFFF00FF;
				break;
			case P1PET:
				{
					if( IsEnemy(penObject, P1PET, TRUE) )
						colPopup =0xFF0000FF;
					else
						colPopup =0xFFFF00FF;
				}
				break;
			case SUMMON:
				{
					if( IsEnemy(penObject, SUMMON, TRUE) )
						colPopup =0xFF0000FF;
					else
						colPopup =0xFFFF00FF;
				}
				break;
			case WILDPET:
				{
					if(IsEnemy(penObject,WILDPET, TRUE))
						colPopup =0xFF0000FF;
					else
						colPopup =0xFFFF00FF;
				}
				break;
			default:
				break;
			}
		}

		if( bTarget )
		{
			int iAddFrame =3;

			m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 2, m_rcName.Bottom +iAddFrame,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );

			m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 2, m_rcName.Bottom +iAddFrame,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );
		}
		else
		{
			if (pInfo->GetTargetType(eTARGET_REAL) != ITEM)
			{
	 			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
	 											m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
	 			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
	 											m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
	 			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
	 											m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );
			}
		}
	}

	// Render all elements
	m_pUIDrawPort->FlushRenderingQueue();

	// Text
	nTextSX = m_rcName.Left + 7;
	nTextSY = m_rcName.Top + 1;
	switch( sbTargetType )
	{
	case MOB:
		{
			// [2010/10/20 : Sora] ¸ó½ºÅÍ ¿ëº´ Ä«µå
			if( penObject->IsFirstExtraFlagOn(ENF_EX1_MONSTER_MERCENARY) )
			{
				nColIndex = 12;
			}
			else if ( penObject->GetFirstExFlags() & ( ENF_EX1_TOTEM | ENF_EX1_TRAP | ENF_EX1_SUICIDE ) )
			{
				nColIndex = 13;
			}
			else
			{
				nLevelDiff = pInfo->GetTargetLevel(eTARGET_REAL) - _pNetwork->MyCharacterInfo.level;
				if( nLevelDiff > 5 ) nColIndex = 0;
				else if( nLevelDiff > 2 ) nColIndex = 1;
				else if( nLevelDiff > -3 ) nColIndex = 2;
				else if( nLevelDiff > -6 ) nColIndex = 3;
				else nColIndex = 4;
			}

			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
										pHelp->GetTargetNameColor( nColIndex ), fPopupZ );
		}
		break;
	case NPC:
	case P1PET:
	case WILDPET:
		{
			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
										pHelp->GetTargetNameColor( 5 ), fPopupZ );
		}
		break;

	case CHARACTER:
		{
#ifdef NEW_CHAO_SYS
			//¸¶¿ì½º ¿À¹ö			
			BOOL buseblindchao = TRUE;

			if (penObject != NULL)
			{
				ObjectBase* pObject = ACTORMGR()->GetObject(eOBJ_CHARACTER, penObject->GetNetworkID());

				if (pObject != NULL)
				{
					CCharacterTarget* pTarget = static_cast< CCharacterTarget* >(pObject);

					if (pTarget->IsBuffBySkill(1395))
						buseblindchao = FALSE;
				}
			}

			int nPKState = pInfo->GetTargetPKState(eTARGET_REAL);

			if (nPKState > 19000 && nPKState <= 32000 && buseblindchao)
				nColIndex = 14;
			else if(nPKState > 6000 && nPKState <= 19000 && buseblindchao)
				nColIndex = 15;
			else if(nPKState > 0 && nPKState <= 6000 && buseblindchao)
				nColIndex = 16;
			else if(nPKState >= -6000 && nPKState < 0 && buseblindchao)
				nColIndex = 17;
			else if(nPKState >= -19000 && nPKState < -6000 && buseblindchao)
				nColIndex = 18;
			else if(nPKState >= -32000 && nPKState < -19000 && buseblindchao)
				nColIndex = 19;
			else nColIndex = 9;
#else
			if( nPKState < -9 ) nColIndex = 11;
			else if( nPKState > 9 ) nColIndex = 7;
			else nColIndex = 9;
			// PK
			if( nPkMode != 0 )
				nColIndex--;
#endif	
			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
										pHelp->GetTargetNameColor( nColIndex ), fPopupZ );

			// NickName
			nTextSX = m_rcNickName.Left + 7;
			nTextSY = m_rcNickName.Top + 2;

			if( iNickIdx > 0 && iNickIdx != DEF_DUMMY_TITLE_INDEX) // new
			{
				COLOR tmpColor2 = TitleStaticData::getData(iNickIdx)->GetColor();
				INDEX	temIndex = TitleStaticData::getData(iNickIdx)->GetItemIndex();
				CTString temNick = GetNickName()->GetName(temIndex);
				m_pUIDrawPort->PutTextEx(temNick, nTextSX, nTextSY, tmpColor2, fPopupZ );
			}
			// Guild Name
			if( lGuildIdx != -1 )
			{
				// WSS_GUILDMASTER 070517 --------------------------->>
				//[071123: Su-won] DRATAN_SIEGE_DUNGEON
				//±æµå ÀÌ¸§ »ö ¼³Á¤
				COLOR colGuildName =0xD6A4D6FF;			//ÀÏ¹Ý ±æµå

				if( pInfo->GetTargetGuildColor() == 1)	//¸Þ¶óÅ© ¼ºÁÖ ±æµå
					colGuildName = 0xFF4500FF;
				else if (pInfo->GetTargetGuildColor() == 2)	//µå¶óÅº ¼ºÁÖ ±æµå
					colGuildName = 0xFFD700FF;
				else if (pInfo->GetTargetGuildColor() == 3)
					colGuildName = 0xFF7B00FF;
				else if (pInfo->GetTargetGuildColor() == 4)
					colGuildName = 0x3884FFFF;

				// --------------------------------------------------<<
				nTextSX = m_rcGuildName.Left + 7;
				nTextSY = m_rcGuildName.Top + 2;
				m_pUIDrawPort->PutTextEx( pInfo->GetTargetGuildName(), nTextSX, nTextSY,
										colGuildName, fPopupZ );
			}
		}
		break;

	case ITEM:
		{
			bool bRare = false;
			bool bOrigin = false;
			int nDBIdx = pInfo->GetTargetDBIdx(eTARGET_REAL);

			m_pUIDrawPort->InitTexture( NULL, FALSE, PBT_BLEND, TRUE);

			m_pUIDrawPort->AddQuadrangle(m_rcName.Left, m_rcName.Top, m_rcName.Right, m_rcName.Bottom, GetItemNameColor(eDROPITEM_OVER_BG), fPopupZ);
			m_pUIDrawPort->FlushRenderingQueue();

			if (nDBIdx > 0)
			{
				bRare = _pNetwork->GetItemData(nDBIdx)->IsFlag(ITEM_FLAG_RARE);

				if (bRare == false)
					bOrigin = _pNetwork->GetItemData(nDBIdx)->IsFlag(ITEM_FLAG_ORIGIN);
			}

			if (bRare)
			{
				m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY, GetItemNameColor(eDROPITEM_OVER_NAME_RARE), fPopupZ );				
			}
			else if (bOrigin == true)
			{
				m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY, GetItemNameColor(eDROPITEM_OVER_NAME_ORIGIN), fPopupZ );
			}
			else
			{
				m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY, GetItemNameColor(eDROPITEM_OVER_NAME), fPopupZ );
			}

		}
		break;

	default:
		{
			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
										pHelp->GetTargetNameColor( 2 ), fPopupZ );
		}
	}

	// Flush all render text queue
	GetDrawPort()->EndTextEx( TRUE );
}

// ----------------------------------------------------------------------------
// Name : RenderObjectIndexPopup()
// Desc : Character, npc and item must use ska...
// ----------------------------------------------------------------------------
void CUIManager::RenderObjectIndexPopup( CProjection3D* pprProjection )
{
	// If game state is not on game
	if( STAGEMGR()->GetCurStage() != eSTAGE_GAMEPLAY )
		return;

	// Blinking name popup for pk
	static bool		bHideName = TRUE;
	static __int64	llOldTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();
	static __int64	llElapsedTime = 0;
	__int64			llCurTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();
	llElapsedTime += llCurTime - llOldTime;
	llOldTime = llCurTime;
	if( llElapsedTime > 500 )
	{
		bHideName = !bHideName;
		do
		{
			llElapsedTime -= 500;
		}
		while( llElapsedTime > 500 );
	}
	COLOR	colNameBlend;
	if( bHideName ) colNameBlend = 0xFFFFFF00 | COLOR( 0x3C + 0xC3 * ( 1.0f - ( (FLOAT)llElapsedTime / 500.0f ) ) );
	else colNameBlend = 0xFFFFFF00 | COLOR( 0x3C + 0xC3 * ( (FLOAT)llElapsedTime / 500.0f ) );

	// Get font size
	int	nBoxWidth, nTextSX, nTextSY, nChatMsgLines, nShopMsgLines;
	int	nFontWidth = _pUIFontTexMgr->GetFontWidth() + _pUIFontTexMgr->GetFontSpacing();
	int	nFontHeight = _pUIFontTexMgr->GetLineHeight();

	extern INDEX	g_iShowName;
	extern INDEX	g_iShowNameItem;
	CTString		strName, strTemp;
	CEntity			*penObject;
	CModelInstance	*pmi;
	FLOAT3D			vObjectPos, vViewPos, vPopupPos, vObjCenter;
	FLOATaabbox3D	boxModel;
	int				nColIndex, nLevelDiff, nPopupY;
	FLOAT			fRadius, fHeight, fPopupZ;
	FLOAT			fSqrDistance = g_iShowName * OPTION_NAME_DISTANCE;
	FLOAT			fSqrDistanceItem = g_iShowNameItem * OPTION_NAME_DISTANCE;
	fSqrDistance *= fSqrDistance;
	fSqrDistanceItem *= fSqrDistanceItem;

	UtilHelp* pHelp = UtilHelp::getSingleton();
	ObjInfo* pInfo = ObjInfo::getSingleton();

	if (pHelp == NULL)
		return;

	////////////////////////////////////////////////////////////////////////
	// Show name of npc
	if( g_iShowName > 0 )
	{
		ACTORMGR()->DrawObjectName(m_pUIDrawPort, pprProjection, colNameBlend, bHideName);	
	}

	////////////////////////////////////////////////////////////////////////
	// My character
	nChatMsgLines = _pNetwork->MyCharacterInfo.ChatMsg.GetCount();
	if( g_iShowName > 0 || nChatMsgLines > 0 || _pNetwork->MyCharacterInfo.sbShopType != PST_NOSHOP ||
		_pNetwork->MyCharacterInfo.pk_mode != 0 )
	{
		penObject = CEntity::GetPlayerEntity( 0 );
		vObjectPos = penObject->GetLerpedPlacement().pl_PositionVector;

		// Get frame box
		pmi = penObject->GetModelInstance();
		ASSERT( pmi != NULL );
		pmi->GetAllFramesBBox( boxModel );
		boxModel.StretchByVector( pmi->mi_vStretch );
		fHeight = boxModel.maxvect(2) - boxModel.minvect(2);
		fRadius = fHeight * 0.5f;

		if (_pNetwork->MyCharacterInfo.ulPlayerState & PLAYER_STATE_FLYING)
		{
			vObjectPos(2) += (fHeight * 1.5f);
		}
		else
		{
			vObjectPos(2) += fHeight;
		}

		// Object point to screen point
		pprProjection->PreClip( vObjectPos, vViewPos );
		pprProjection->PostClip( vViewPos, vPopupPos );
		fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
					* pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

		// Get box region
		if( _pNetwork->MyCharacterInfo.pk_mode == 0 )
			nBoxWidth = _pNetwork->MyCharacterInfo.name.Length() * nFontWidth + 13;
		else
			nBoxWidth = _pNetwork->MyCharacterInfo.name.Length() * nFontWidth + 27;
		m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
		m_rcName.Right = m_rcName.Left + nBoxWidth;
		m_rcName.Bottom = vPopupPos(2) - 7;
		m_rcName.Top = m_rcName.Bottom - 15;
		nPopupY = m_rcName.Top;

		// Set popup texture
		m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

		// Add render regions
		/*if( _pNetwork->MyCharacterInfo.pk_mode == 3 )
		{
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 16, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameRDefPK1.U0, m_rtNameRDefPK1.V0, m_rtNameRDefPK1.U1, m_rtNameRDefPK1.V1, 0xFFFFFFFF, fPopupZ );
		}
		else */if( _pNetwork->MyCharacterInfo.pk_mode == 0 )
		{
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );
		}
		else
		{
			COLOR	colBlend = 0xFFFFFFFF;
			if( _pNetwork->MyCharacterInfo.pk_mode == 2 )
				colBlend = colNameBlend;

			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colBlend, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 16, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colBlend, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameRPK.U0, m_rtNameRPK.V0, m_rtNameRPK.U1, m_rtNameRPK.V1, colBlend, fPopupZ );
		}

		CTString strGuildname;

		// Guild Name
		if( _pNetwork->MyCharacterInfo.lGuildIndex > 0)
		{
			strGuildname.PrintF("%s (%d)", _pNetwork->MyCharacterInfo.strGuildName, _pNetwork->MyCharacterInfo.lGuildIndex);

			// Get box region
			//if(g_iCountry == THAILAND) 
			#if defined G_THAI
				nBoxWidth = FindThaiLen(strGuildname)+13; //wooss 051017
			//else
			#else
				nBoxWidth = strGuildname.Length() * nFontWidth + 13;
			#endif
			m_rcGuildName.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcGuildName.Right = m_rcGuildName.Left + nBoxWidth;
			m_rcGuildName.Bottom = nPopupY - 5;
			m_rcGuildName.Top = (m_rcGuildName.Bottom - 1 * nFontHeight) - 4;
			nPopupY = m_rcGuildName.Top;
			
			m_pUIDrawPort->AddTexture( m_rcGuildName.Left, m_rcGuildName.Top, m_rcGuildName.Left + 2, m_rcGuildName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcGuildName.Left + 2, m_rcGuildName.Top, m_rcGuildName.Right - 2, m_rcGuildName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcGuildName.Right - 2, m_rcGuildName.Top, m_rcGuildName.Right, m_rcGuildName.Bottom,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );
			// WSS_GUILDMASTER 070517 -------------------------->>
			DrawGuildRankBox(m_rcGuildName,_pNetwork->MyCharacterInfo.sbGuildRank,fPopupZ);
			// -------------------------------------------------<<

		}

		nShopMsgLines = 0;
		if( _pNetwork->MyCharacterInfo.sbShopType != PST_NOSHOP )
		{
			nShopMsgLines = _pNetwork->MyCharacterInfo.ShopMsg.GetCount();

			//if(g_iCountry == RUSSIA)
			#if defined G_RUSSIA
				nBoxWidth = m_pUIDrawPort->GetTextWidth(_pNetwork->MyCharacterInfo.ShopMsg.GetString(0));
			//else
			#else
				nBoxWidth = _pNetwork->MyCharacterInfo.ShopMsg.GetWidth();
			#endif
			m_rcShop.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcShop.Right = m_rcShop.Left + nBoxWidth;

			if( _pNetwork->MyCharacterInfo.sbShopType & PST_PREMIUM )
			{
				m_rcShop.Bottom = nPopupY - 18;
				m_rcShop.Top = m_rcShop.Bottom - nShopMsgLines * nFontHeight;

				m_pUIDrawPort->AddTexture( m_rcShop.Left - 13, m_rcShop.Top - 13, m_rcShop.Left, m_rcShop.Top,
											m_rtShopPremLU.U0, m_rtShopPremLU.V0, m_rtShopPremLU.U1, m_rtShopPremLU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top - 13, m_rcShop.Right, m_rcShop.Top,
											m_rtShopPremUp.U0, m_rtShopPremUp.V0, m_rtShopPremUp.U1, m_rtShopPremUp.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top - 13, m_rcShop.Right + 13, m_rcShop.Top,
											m_rtShopPremRU.U0, m_rtShopPremRU.V0, m_rtShopPremRU.U1, m_rtShopPremRU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 13, m_rcShop.Top, m_rcShop.Left, m_rcShop.Bottom,
											m_rtShopPremL.U0, m_rtShopPremL.V0, m_rtShopPremL.U1, m_rtShopPremL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top, m_rcShop.Right, m_rcShop.Bottom,
											m_rtShopPremC.U0, m_rtShopPremC.V0, m_rtShopPremC.U1, m_rtShopPremC.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top, m_rcShop.Right + 13, m_rcShop.Bottom,
											m_rtShopPremR.U0, m_rtShopPremR.V0, m_rtShopPremR.U1, m_rtShopPremR.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 13, m_rcShop.Bottom, m_rcShop.Left, m_rcShop.Bottom + 13,
											m_rtShopPremLL.U0, m_rtShopPremLL.V0, m_rtShopPremLL.U1, m_rtShopPremLL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Bottom, m_rcShop.Right, m_rcShop.Bottom + 13,
											m_rtShopPremLo.U0, m_rtShopPremLo.V0, m_rtShopPremLo.U1, m_rtShopPremLo.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Bottom, m_rcShop.Right + 13, m_rcShop.Bottom + 13,
											m_rtShopPremRL.U0, m_rtShopPremRL.V0, m_rtShopPremRL.U1, m_rtShopPremRL.V1, 0xFFFFFFFF, fPopupZ );

				nPopupY = m_rcShop.Top - 8;
			}
			else
			{
				m_rcShop.Bottom = nPopupY - 10;
				m_rcShop.Top = m_rcShop.Bottom - nShopMsgLines * nFontHeight;

				m_pUIDrawPort->AddTexture( m_rcShop.Left - 5, m_rcShop.Top - 5, m_rcShop.Left, m_rcShop.Top,
											m_rtShopLU.U0, m_rtShopLU.V0, m_rtShopLU.U1, m_rtShopLU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top - 5, m_rcShop.Right, m_rcShop.Top,
											m_rtShopUp.U0, m_rtShopUp.V0, m_rtShopUp.U1, m_rtShopUp.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top - 5, m_rcShop.Right + 5, m_rcShop.Top,
											m_rtShopRU.U0, m_rtShopRU.V0, m_rtShopRU.U1, m_rtShopRU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 5, m_rcShop.Top, m_rcShop.Left, m_rcShop.Bottom,
											m_rtShopL.U0, m_rtShopL.V0, m_rtShopL.U1, m_rtShopL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top, m_rcShop.Right, m_rcShop.Bottom,
											m_rtShopC.U0, m_rtShopC.V0, m_rtShopC.U1, m_rtShopC.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top, m_rcShop.Right + 5, m_rcShop.Bottom,
											m_rtShopR.U0, m_rtShopR.V0, m_rtShopR.U1, m_rtShopR.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 5, m_rcShop.Bottom, m_rcShop.Left, m_rcShop.Bottom + 5,
											m_rtShopLL.U0, m_rtShopLL.V0, m_rtShopLL.U1, m_rtShopLL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Bottom, m_rcShop.Right, m_rcShop.Bottom + 5,
											m_rtShopLo.U0, m_rtShopLo.V0, m_rtShopLo.U1, m_rtShopLo.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Bottom, m_rcShop.Right + 5, m_rcShop.Bottom + 5,
											m_rtShopRL.U0, m_rtShopRL.V0, m_rtShopRL.U1, m_rtShopRL.V1, 0xFFFFFFFF, fPopupZ );

				nPopupY = m_rcShop.Top;
			}
		}

		if( nChatMsgLines > 0 )
		{
#if defined (G_RUSSIA)
			int nCurWidth = 0;
			int nMaxWidth = 0;
			for( int i=0; i<_pNetwork->MyCharacterInfo.ChatMsg.GetCount(); ++i )
			{
				nCurWidth = m_pUIDrawPort->GetTextWidth(_pNetwork->MyCharacterInfo.ChatMsg.GetString(i));
				if( nMaxWidth < nCurWidth )
				{
					nMaxWidth = nCurWidth;
				}
			}
			nBoxWidth = nMaxWidth;			
#else
			nBoxWidth = _pNetwork->MyCharacterInfo.ChatMsg.GetWidth();
#endif
			m_rcChat.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcChat.Right = m_rcChat.Left + nBoxWidth;
			m_rcChat.Bottom = nPopupY - 10;
			m_rcChat.Top = m_rcChat.Bottom - nChatMsgLines * nFontHeight;
			nPopupY = m_rcChat.Top;

			m_pUIDrawPort->AddTexture( m_rcChat.Left - 5, m_rcChat.Top - 5, m_rcChat.Left, m_rcChat.Top,
										m_rtChatLU.U0, m_rtChatLU.V0, m_rtChatLU.U1, m_rtChatLU.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left, m_rcChat.Top - 5, m_rcChat.Right, m_rcChat.Top,
										m_rtChatUp.U0, m_rtChatUp.V0, m_rtChatUp.U1, m_rtChatUp.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Right, m_rcChat.Top - 5, m_rcChat.Right + 5, m_rcChat.Top,
										m_rtChatRU.U0, m_rtChatRU.V0, m_rtChatRU.U1, m_rtChatRU.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left - 5, m_rcChat.Top, m_rcChat.Left, m_rcChat.Bottom,
										m_rtChatL.U0, m_rtChatL.V0, m_rtChatL.U1, m_rtChatL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left, m_rcChat.Top, m_rcChat.Right, m_rcChat.Bottom,
										m_rtChatC.U0, m_rtChatC.V0, m_rtChatC.U1, m_rtChatC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Right, m_rcChat.Top, m_rcChat.Right + 5, m_rcChat.Bottom,
										m_rtChatR.U0, m_rtChatR.V0, m_rtChatR.U1, m_rtChatR.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left - 5, m_rcChat.Bottom, m_rcChat.Left, m_rcChat.Bottom + 5,
										m_rtChatLL.U0, m_rtChatLL.V0, m_rtChatLL.U1, m_rtChatLL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left, m_rcChat.Bottom, m_rcChat.Right, m_rcChat.Bottom + 5,
										m_rtChatLo.U0, m_rtChatLo.V0, m_rtChatLo.U1, m_rtChatLo.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Right, m_rcChat.Bottom, m_rcChat.Right + 5, m_rcChat.Bottom + 5,
										m_rtChatRL.U0, m_rtChatRL.V0, m_rtChatRL.U1, m_rtChatRL.V1, 0xFFFFFFFF, fPopupZ );
		}

		// Show Damage 
		ShowDamageList( vPopupPos, fPopupZ, CEntity::GetPlayerEntity( 0 )->en_ulID );

		// Render all elements
		m_pUIDrawPort->FlushRenderingQueue();

		nTextSX = m_rcName.Left + 7;
		nTextSY = m_rcName.Top + 1;
		// Title
#ifdef NEW_CHAO_SYS
		BOOL buseblindchao = TRUE;
		if(_pUIBuff->IsBuffBySkill(1395))
			buseblindchao = FALSE;
		if (_pNetwork->MyCharacterInfo.pkpenalty  > 19000 && _pNetwork->MyCharacterInfo.pkpenalty  <= 32000 && buseblindchao)
			nColIndex = 14;
		else if(_pNetwork->MyCharacterInfo.pkpenalty  > 6000 && _pNetwork->MyCharacterInfo.pkpenalty  <= 19000 && buseblindchao)
			nColIndex = 15;
		else if(_pNetwork->MyCharacterInfo.pkpenalty  > 0 && _pNetwork->MyCharacterInfo.pkpenalty  <= 6000 && buseblindchao)
			nColIndex = 16;
		else if(_pNetwork->MyCharacterInfo.pkpenalty  >= -6000 && _pNetwork->MyCharacterInfo.pkpenalty  < 0 && buseblindchao)
			nColIndex = 17;
		else if(_pNetwork->MyCharacterInfo.pkpenalty  >= -19000 && _pNetwork->MyCharacterInfo.pkpenalty  < -6000 && buseblindchao)
			nColIndex = 18;
		else if(_pNetwork->MyCharacterInfo.pkpenalty  >= -32000 && _pNetwork->MyCharacterInfo.pkpenalty  < -19000 && buseblindchao)
			nColIndex = 19;
		else nColIndex = 9;
#else
		if( _pNetwork->MyCharacterInfo.pkpenalty < -9 ) nColIndex = 11;
		else if( _pNetwork->MyCharacterInfo.pkpenalty > 9 ) nColIndex = 7;
		else nColIndex = 9;
		// PK
		if( _pNetwork->MyCharacterInfo.pk_mode != 0 )
			nColIndex--;
#endif
		if ( _pNetwork->MyCharacterInfo.lGuildIndex > 0 && _pNetwork->MyCharacterInfo.ubGuildNameColor == 6)
				 nColIndex = 22;
		m_pUIDrawPort->PutTextEx( _pNetwork->MyCharacterInfo.name, nTextSX, nTextSY,
			pHelp->GetTargetNameColor( nColIndex ), fPopupZ );

		// Text
		nTextSX = m_rcGuildName.Left + 7;
		nTextSY = m_rcGuildName.Top + 2;

		// Guild Name
		if( _pNetwork->MyCharacterInfo.lGuildIndex > 0)
		{
			COLOR colGuildName = 0xD6A4D6FF;

			if( _pNetwork->MyCharacterInfo.ubGuildNameColor == 1 )			//¸Þ¶óÅ© ¼ºÁÖ ±æµå 
				colGuildName = 0xFF4500FF;
			else if( _pNetwork->MyCharacterInfo.ubGuildNameColor == 2 )		//µå¶óÅº ¼ºÁÖ ±æµå
				colGuildName = 0xFFD700FF;
			else if (_pNetwork->MyCharacterInfo.ubGuildNameColor == 3)
				colGuildName = 0xFF7B00FF;
			else if (_pNetwork->MyCharacterInfo.ubGuildNameColor == 4)
				colGuildName = 0x3884FFFF;
			else if (_pNetwork->MyCharacterInfo.ubGuildNameColor == 5)
				colGuildName = 0x32FF3DFF;
			else if (_pNetwork->MyCharacterInfo.ubGuildNameColor == 6)
				colGuildName = 0xFF8C00FF;
				// --------------------------------------------------<<
			m_pUIDrawPort->PutTextEx( strGuildname, nTextSX, nTextSY,
				colGuildName, fPopupZ );
		}

		if( nShopMsgLines > 0 )
		{
			nTextSX = m_rcShop.Left + 1;
			nTextSY = m_rcShop.Top + 1;
			for( int i = 0; i < nShopMsgLines; i++ )
			{
				m_pUIDrawPort->PutTextEx( _pNetwork->MyCharacterInfo.ShopMsg.GetString( i ), nTextSX, nTextSY,
											_pNetwork->MyCharacterInfo.ShopMsg.GetColor(), fPopupZ );
				nTextSY += nFontHeight;
			}
		}

		if( nChatMsgLines > 0 )
		{
			nTextSX = m_rcChat.Left + 1;
			nTextSY = m_rcChat.Top + 1;
			for( int i = 0; i < nChatMsgLines; i++ )
			{
				m_pUIDrawPort->PutTextEx( _pNetwork->MyCharacterInfo.ChatMsg.GetString( i ), nTextSX, nTextSY,
											_pNetwork->MyCharacterInfo.ChatMsg.GetColor(), fPopupZ );
				nTextSY += nFontHeight;
			}

			__int64	llCurTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();
			if( llCurTime - _pNetwork->MyCharacterInfo.ChatMsg.GetTime() > CHATMSG_TIME_DELAY )
				_pNetwork->MyCharacterInfo.ChatMsg.Reset();
		}

		// Flush all render text queue
		GetDrawPort()->EndTextEx( TRUE );
	}

	// Get target
	penObject = pInfo->GetTargetEntity(eTARGET_REAL);

	// If over target is not exist
	if( !pInfo->IsTargetActive(eTARGET_REAL) || penObject == NULL )
		return;

	ASSERT( penObject != NULL );
	vObjectPos = penObject->en_plPlacement.pl_PositionVector;

	// Get frame box
	pmi = penObject->GetModelInstance();
	ASSERT( pmi != NULL );

	pmi->GetAllFramesBBox( boxModel );
	boxModel.StretchByVector( pmi->mi_vStretch );

	// Object point to screen point
	vObjectPos(2) += boxModel.maxvect(2) - boxModel.minvect(2);
	pprProjection->PreClip( vObjectPos, vViewPos );
	pprProjection->PostClip( vViewPos, vPopupPos );
	fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
				 * pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

	COLOR colNas = pHelp->GetTargetNameColor( 2 );

	SBYTE sbTargetType = pInfo->GetTargetType(eTARGET_REAL);
	SQUAD llCount = pInfo->GetTargetCount();
	int nPkMode = pInfo->GetTargetPKMode(eTARGET_REAL);
	// Get name
	if( sbTargetType == ITEM &&	llCount > 1 )
	{
		strTemp.PrintF( "%I64d", llCount );
		InsertCommaToString( strTemp );
		colNas = GetNasColor( llCount );
		strName.PrintF( "%s(%s)", pInfo->GetTargetName(eTARGET_REAL), strTemp );
	}
	else
		strName.PrintF( "%s", pInfo->GetTargetName(eTARGET_REAL) );

	// Get box region
	if( sbTargetType == CHARACTER )
	{
		if( nPkMode == 0 )
			nBoxWidth = strName.Length() * nFontWidth + 13;
		else
			nBoxWidth = strName.Length() * nFontWidth + 27;
	}
	else
		nBoxWidth = strName.Length() * nFontWidth + 13;

	m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
	m_rcName.Right = m_rcName.Left + nBoxWidth;
	m_rcName.Bottom = vPopupPos(2) - 7;
	m_rcName.Top = m_rcName.Bottom - 15;

	// Set popup texture
	m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

	// Add render regions
	if( sbTargetType == CHARACTER )
	{
		if( nPkMode == 3 )
		{
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 16, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameRDefPK2.U0, m_rtNameRDefPK2.V0, m_rtNameRDefPK2.U1, m_rtNameRDefPK2.V1, 0xFFFFFFFF, fPopupZ );
		}
		else if( nPkMode == 0 )
		{
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );
		}
		else
		{
			COLOR	colBlend = 0xFFFFFFFF;
			if( nPkMode == 2 )
				colBlend = colNameBlend;

			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colBlend, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 16, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colBlend, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameRPK.U0, m_rtNameRPK.V0, m_rtNameRPK.U1, m_rtNameRPK.V1, colBlend, fPopupZ );
		}
	}
	else
	{
		m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
									m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
		m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
									m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
		m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
									m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );
	}

	// Render all elements
	m_pUIDrawPort->FlushRenderingQueue();

	// Text
	nTextSX = m_rcName.Left + 7;
	nTextSY = m_rcName.Top + 1;
	switch( sbTargetType )
	{
	case MOB:
		{
			if( penObject->IsFirstExtraFlagOn(ENF_EX1_MONSTER_MERCENARY) )
			{
				nColIndex = 12;
			}
			else if ( penObject->GetFirstExFlags() & ( ENF_EX1_TOTEM | ENF_EX1_TRAP | ENF_EX1_SUICIDE ) )
			{
				nColIndex = 13;
			}
			nLevelDiff = pInfo->GetTargetLevel(eTARGET_REAL) - _pNetwork->MyCharacterInfo.level;
			if( nLevelDiff > 5 ) nColIndex = 0;
			else if( nLevelDiff > 2 ) nColIndex = 1;
			else if( nLevelDiff > -3 ) nColIndex = 2;
			else if( nLevelDiff > -6 ) nColIndex = 3;
			else nColIndex = 4;
			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
										pHelp->GetTargetNameColor( nColIndex ), fPopupZ );
		}
		break;
	case NPC:
	case P1PET:
		{
			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
				pHelp->GetTargetNameColor( 5 ), fPopupZ );
		}
		break;

	case CHARACTER:
		{
#ifdef NEW_CHAO_SYS

			BOOL buseblindchao = TRUE;

			if (penObject != NULL)
			{
				ObjectBase* pObject = ACTORMGR()->GetObject(eOBJ_CHARACTER, penObject->GetNetworkID());

				if (pObject != NULL)
				{
					CCharacterTarget* pTarget = static_cast< CCharacterTarget* >(pObject);

					if (pTarget->IsBuffBySkill(1395))
						buseblindchao = FALSE;
				}
			}

			int nPKState = pInfo->GetTargetPKState(eTARGET_REAL);

			if (nPKState > 19000 && nPKState <= 32000 && buseblindchao)
				nColIndex = 14;
			else if(nPKState > 6000 && nPKState <= 19000 && buseblindchao)
				nColIndex = 15;
			else if(nPKState > 0 && nPKState <= 6000 && buseblindchao)
				nColIndex = 16;
			else if(nPKState >= -6000 && nPKState < 0 && buseblindchao)
				nColIndex = 17;
			else if(nPKState >= -19000 && nPKState < -6000 && buseblindchao)
				nColIndex = 18;
			else if(nPKState >= -32000 && nPKState < -19000 && buseblindchao)
				nColIndex = 19;
			else nColIndex = 9;
#else
			if( nPKState < -9 ) nColIndex = 11;
			else if( nPKState > 9 ) nColIndex = 7;
			else nColIndex = 9;
			// PK
			if( nPkMode != 0 )
				nColIndex--;
#endif	
			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
										pHelp->GetTargetNameColor( nColIndex ), fPopupZ );
		}
		break;

	case ITEM:
		{
			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY, colNas, fPopupZ );
		}
		break;

	default:
		{
			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
										pHelp->GetTargetNameColor( 2 ), fPopupZ );
		}
	}

	// Flush all render text queue
	GetDrawPort()->EndTextEx( TRUE );
}

// ----------------------------------------------------------------------------
// Name : RearrangeOrder()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::RearrangeOrder( int nCurrentUI, BOOL bFrontOrder )
{
	// Already rearranged
	if( ( bFrontOrder && m_aUIOrder[0] == nCurrentUI ) ||
		( !bFrontOrder && !m_apUIs[nCurrentUI]->IsEnabled() ) )
		return;

	// Find order of current UI & reset focus state
	INDEX iSelOrder = 0;
	for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
	{
		if( m_aUIOrder[iUI] == nCurrentUI )
		{ 
			iSelOrder = iUI;
		}
		else
		{
			if (m_apUIs[m_aUIOrder[iUI]] != NULL)
				m_apUIs[m_aUIOrder[iUI]]->SetFocus( FALSE );
		}
	}

	// Rearrange
	if( bFrontOrder )
	{
		for( INDEX iUI = iSelOrder; iUI > 0; iUI-- )
			m_aUIOrder[iUI] = m_aUIOrder[iUI - 1];
		m_aUIOrder[0] = nCurrentUI;
		GetUI( nCurrentUI )->SetVisible( TRUE );
		GetUI( nCurrentUI )->SetEnable( TRUE );
	}
	else
	{
		// Find index of last UI
		INDEX iLastUI;
		for( iLastUI = 0; iLastUI < UI_TYPE_END; iLastUI++ )
		{
			if (m_apUIs[m_aUIOrder[iLastUI]] == NULL)
				continue;

			if( !m_apUIs[m_aUIOrder[iLastUI]]->IsEnabled() )
				break;
		}

		GetUI( nCurrentUI )->SetVisible( FALSE );
		GetUI( nCurrentUI )->SetEnable( FALSE );
		if( iLastUI == 0 ) return;

		for( INDEX iUI = iSelOrder + 1; iUI < iLastUI; iUI++ )
			m_aUIOrder[iUI - 1] = m_aUIOrder[iUI];
		m_aUIOrder[iLastUI - 1] = nCurrentUI;

// [KH_070426] 3Â÷ µµ¿ò¸» °ü·Ã Ãß°¡
		if(GetHelp3()->IsEnabled() && GetHelp3()->m_pMammyWnd == m_apUIs[nCurrentUI])
			RearrangeOrder(UI_HELP3, FALSE);
	}

	// Set focus of first window
	m_apUIs[m_aUIOrder[0]]->SetFocus( TRUE );
}


void CUIManager::ChangeOrder( int nCurrentUI, int nOrder )
{
	INDEX iSelOrder = 0;
	for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
	{
		if( m_aUIOrder[iUI] == nCurrentUI )
		{
			iSelOrder = iUI;
			break;
		}
	}

	int nDis = nOrder -iSelOrder;

	int nCur =iSelOrder;
	if( nDis<0)
	{
		for(int i=0; i>nDis; --i)	
		{
			int temp =m_aUIOrder[nCur];
			m_aUIOrder[nCur] =m_aUIOrder[nCur-1];
			m_aUIOrder[nCur-1] = temp;
			--nCur;
		}
	}
	else if( nDis >0)
	{
		for(int i=0; i<nDis; ++i)
		{
			int temp =m_aUIOrder[nCur];
			m_aUIOrder[nCur] =m_aUIOrder[nCur+1];
			m_aUIOrder[nCur+1] = temp;
			++nCur;
		}
	}
}


// ----------------------------------------------------------------------------
// Name : SetUIGameState()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::SetUIGameState(BOOL bGameOn)
{
	extern FLOAT		ter_fLODMul;
	int		iUI;

	if( _bWorldEditorApp )
		return;

	if( STAGEMGR()->GetCurStage() == eSTAGE_ZONELOADING )
	{
		Reset();
	}

	for( iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
	{
		m_aUIOrder[iUI] = iUI;

		if (m_apUIs[iUI] == NULL)
			continue;
		
		m_apUIs[iUI]->SetEnable( FALSE );
		m_apUIs[iUI]->SetVisible( FALSE );
	}

	if( STAGEMGR()->GetCurStage() == eSTAGE_LOGIN )
	{
		RECT	rectClient;
		GetClientRect( _hwndMain, &rectClient );
		POINT	pt;
		pt.x = 0;	pt.y = 0;
		ClientToScreen( _hwndMain, &pt );
		OffsetRect( &rectClient, pt.x, pt.y );
		GetCursorPos( &(_pInput->inp_ptOldMousePos) );
		_pInput->inp_slScreenCenterX = ( rectClient.left + rectClient.right ) / 2;
		_pInput->inp_slScreenCenterY = ( rectClient.top + rectClient.bottom ) / 2;
		// clear button's buffer
		memset( _abKeysPressed, 0, sizeof( _abKeysPressed ) );		
		// remember current status
		_pInput->inp_bInputEnabled = TRUE;
		_pInput->inp_bPollJoysticks = FALSE;
		// Set type of cursor
		GetMouseCursor()->SetCursorType( UMCT_NORMAL );
	}
	
	if( bGameOn == TRUE/*STAGEMGR()->GetCurStage() == eSTAGE_GAMEPLAY*/ )
	{
		RECT	rectClient;
		GetClientRect( _hwndMain, &rectClient );
		POINT	pt;
		pt.x = 0;	pt.y = 0;
		ClientToScreen( _hwndMain, &pt );
		OffsetRect( &rectClient, pt.x, pt.y );
		_pInput->inp_slScreenCenterX = ( rectClient.left + rectClient.right ) / 2;
		_pInput->inp_slScreenCenterY = ( rectClient.top + rectClient.bottom ) / 2;

		// clear button's buffer
		memset( _abKeysPressed, 0, sizeof( _abKeysPressed ) );

		for( iUI = UI_ALWAYS_SHOW_START; iUI < UI_ALWAYS_SHOW_END; iUI++ )
		{
			if (m_apUIs[iUI] == NULL)
				continue;

			m_apUIs[iUI]->SetEnable( TRUE );
			m_apUIs[iUI]->SetVisible( TRUE );
		}

		for( iUI = UI_SELECTIVE_SHOW_START; iUI < UI_SELECTIVE_SHOW_END; iUI++ )
		{
			if (m_apUIs[iUI] == NULL)
				continue;

			m_apUIs[iUI]->SetEnable( TRUE );
		}

		RearrangeOrder( UI_PLAYERINFO, TRUE );
		m_apUIs[UI_PLAYERINFO]->SetFocus( TRUE );

		_pGameState->GetGameMode() = CGameState::GM_NETWORK;	
	}

	CPrintF("Loading Session \n" );
}

// ----------------------------------------------------------------------------
// Name : SetKeyFromMsg()
// Desc :
// ----------------------------------------------------------------------------
static void SetKeyFromMsg( MSG *pMsg, BOOL bDown )
{
	INDEX iKID = -1;
	// if capturing scan codes
	if( inp_iKeyboardReadingMethod == 2 )
	{
		INDEX iScan = ( pMsg->lParam >> 16 ) & 0x1FF;
		iKID = _aiScanToKid[iScan];
	}
	// if capturing virtual key codes
	else if( inp_iKeyboardReadingMethod == 1 )
	{
		// get virtualkey
		INDEX iVirt = (pMsg->wParam)&0xFF;

		if( iVirt == VK_SHIFT )
			iVirt = VK_LSHIFT;
		else if( iVirt == VK_CONTROL )
			iVirt = VK_LCONTROL;
		else if (iVirt == VK_MENU)
			iVirt = VK_LMENU;

		iKID = _aiVirtToKid[iVirt];
	}
	// if not capturing
	else
	{
		// do nothing
		return;
	}

	if( iKID >= 0 && iKID < ARRAYCOUNT( _abKeysPressed ) )
	{
		_abKeysPressed[iKID] = bDown;
	}
}

// ----------------------------------------------------------------------------
// Name : MsgProc()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::MsgProc( MSG *pMsg, BOOL *pbIMEProc )
{
	if( _bWorldEditorApp )
		return;

	if (STAGEMGR()->GetCurStage() == eSTAGE_INTRO || STAGEMGR()->GetCurStage() == eSTAGE_ZONELOADING)
		return;

	if (g_web.IsWebHandle() == TRUE)
	{
		MsgProcWeb(pMsg);
		return;
	}

	if(_pGameState->GetGameMode() == CGameState::GM_RESTART ||
		_pNetwork->bMoveCharacterSelectUI == TRUE) 
	{
		memset( _abKeysPressed, 0, sizeof( _abKeysPressed ) );
		return;
	}

	int		iUI;

	static BOOL	bNeedCharMsg = TRUE;

//°­µ¿¹Î ¼öÁ¤ ½ÃÀÛ ½Ã½ºÅÛ ¸¶¿ì½º ÀÛ¾÷	09.09
// NOTE : UIMouseCursor.cpp¿Í Ç×»ó °°µµ·Ï À¯Áö.
//#define TEXTURE_CURSOR
#if		!defined(TEXTURE_CURSOR) && !defined(UI_TOOL)
	// Get current mouse position
	if( pMsg->message >= WM_MOUSEFIRST && pMsg->message <= WM_MOUSELAST )
	{
		_pInput->inp_ptMousePos.x = LOWORD(pMsg->lParam);
		_pInput->inp_ptMousePos.y = HIWORD(pMsg->lParam);	
		GetMouseCursor()->SetCursorType();

		m_bCursorInGame = true;
	}
	else
	{
		m_bCursorInGame = false;
	}
#endif
//°­µ¿¹Î ¼öÁ¤ ³¡ ½Ã½ºÅÛ ¸¶¿ì½º ÀÛ¾÷		09.09

	extern INDEX	g_iEnterChat;

// ÀÌ±âÈ¯ ¼öÁ¤ ½ÃÀÛ (11. 15) : IME ¸Þ¼¼Áö Ã³¸®
	*pbIMEProc = false;

	if ( pMsg->message == WM_IME_COMPOSITION		// IME message
		|| pMsg->message == WM_IME_STARTCOMPOSITION 
		|| pMsg->message == WM_IME_ENDCOMPOSITION
		|| pMsg->message == WM_IME_NOTIFY
		|| pMsg->message == WM_INPUTLANGCHANGE
		|| pMsg->message == WM_INPUTLANGCHANGEREQUEST
		|| pMsg->message == WM_SYSKEYDOWN )
	{
		WMSG_RESULT wmsgResult;

		if ( (wmsgResult = MSGBOXMGR()->IMEProc(pMsg))!= WMSG_FAIL)
		{
			if ( wmsgResult == WMSG_SUCCESS )
			{
				(*pbIMEProc) = true;
			}
			return;
		}

		if( m_apUIs[m_aUIOrder[0]] && m_apUIs[m_aUIOrder[0]]->IsEnabled() )
		{
			if ( ( wmsgResult = m_apUIs[m_aUIOrder[0]]->IMEMessage( pMsg ) ) != WMSG_FAIL ) 
			{
				if ( wmsgResult == WMSG_SUCCESS )
				{
					(*pbIMEProc) = true;
				}
				return;
			}
		}

		// [2011/12/29 : Sora] ITS 6315¼öÁ¤ Àü·ÎÄÃ IME¸Þ½ÃÁö Ã³¸®ÇÏÁö ¾Ê´Â ·ÎÄÃÀº ¹®Á¦°¡ µÉ°ÍÀ¸·Î ¿¹»ó ¿ì¼± ÅÂ±¹¸¸ Àû¿ë
#if defined G_THAI
		if( g_iEnterChat == 0 && GetChattingUI()->IsFocused() )
#else
		if( g_iEnterChat == 0 && GetChattingUI()->IsEnabled() )
#endif
		{
			//if (g_iCountry != JAPAN || pMsg->wParam != VK_F10 )
			#if !defined G_JAPAN
			{
				RearrangeOrder( UI_CHATTING_NEW, TRUE );
				GetChattingUI()->GetInputBox()->SetFocus( TRUE );
			}
			#else
			if ( pMsg->wParam != VK_F10 )
			{
				RearrangeOrder( UI_CHATTING_NEW, TRUE );
				GetChattingUI()->GetInputBox()->SetFocus( TRUE );
			}
			#endif

			
			if( ( wmsgResult = GetChattingUI()->IMEMessage( pMsg ) ) != WMSG_FAIL )
			{
				if ( wmsgResult == WMSG_SUCCESS )
				{
					(*pbIMEProc) = true;
				}
				return;
			}
		}
	}

	// MSG Mouse Message
	if (MSGBOXMGR()->MsgProc(pMsg) != WMSG_FAIL)
		return;

	switch( pMsg->message )
	{
	case WM_MOUSEMOVE:
		{
			m_bMouseInsideUIs = FALSE;

			m_mPosX = LOWORD( pMsg->lParam );
			m_mPosY = HIWORD( pMsg->lParam );

			// Move holding button
			if (m_pIconDrag != NULL)
			{
				int	nOffsetX = m_pIconDrag->GetWidth() / 2; 
				int nOffsetY = m_pIconDrag->GetHeight() / 2;
				m_nDragX = _pInput->inp_ptMousePos.x - nOffsetX;
				m_nDragY = _pInput->inp_ptMousePos.y - nOffsetY;
			}
			else if (m_pBaseDrag != NULL)
			{
				int	nOffsetX = m_pBaseDrag->GetWidth() / 2; 
				int nOffsetY = m_pBaseDrag->GetHeight() / 2;
				m_nDragX = _pInput->inp_ptMousePos.x - nOffsetX;
				m_nDragY = _pInput->inp_ptMousePos.y - nOffsetY;
			}
			
			CUIWindow* apUIsCurrent = NULL;

			for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
			{
				INDEX	iCurUI = m_aUIOrder[iUI];

				if (m_apUIs[iCurUI] == NULL)
					continue;				
				if( !m_apUIs[iCurUI]->IsEnabled() )
					break;
				if( !m_apUIs[iCurUI]->IsVisible() )
					continue;
				if( m_apUIs[iCurUI]->IsInside(m_mPosX, m_mPosY) )
				{
					apUIsCurrent = m_apUIs[iCurUI];
					break;
				}
				
			}

			if (apUIsCurrent != m_apUIsOld)
			{
				if (m_apUIsOld)
				{
					m_apUIsOld->FocusLeave();
				}					
				m_apUIsOld = apUIsCurrent;
			}
			

			for( INDEX jUI = UI_TYPE_START; jUI < UI_TYPE_END; jUI++ )
			{
				INDEX	iCurUI = m_aUIOrder[jUI];
				if (m_apUIs[iCurUI] == NULL)
					continue;
				if( !m_apUIs[iCurUI]->IsEnabled() )
					break;
				if( m_apUIs[iCurUI]->IsVisible() &&	m_apUIs[iCurUI]->MouseMessage( pMsg ) != WMSG_FAIL )
					return;
			}

			if (IsInside(m_mPosX, m_mPosY) == FALSE)
				m_bMouseInsideUIs = FALSE;
		}
		break;

	case WM_LBUTTONDOWN:
		{
			if (m_pIconDrag != NULL || m_pBaseDrag != NULL)
			{
				ResetHoldBtn();
				return;
			}

			// Kill focus of edit box
			for( iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
			{
				if (m_apUIs[iUI] != NULL)
					m_apUIs[iUI]->KillFocusEditBox();
			}

			if( IsInputLock() )
				return;

			for( iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
			{
				INDEX	iCurUI = m_aUIOrder[iUI];
				if (m_apUIs[iCurUI] == NULL)
					continue;
				if( !m_apUIs[iCurUI]->IsEnabled() )
					break;
				if( m_apUIs[iCurUI]->IsVisible() && m_apUIs[iCurUI]->MouseMessage( pMsg ) != WMSG_FAIL )
					return;
			}

#if		!defined(UI_TOOL)
			// ´Ù¸¥ pc³ª npc ¶Ç´Â ´Ù¸¥ Áö¿ªÀ» ¸¶¿ì½º·Î Å¬¸¯½Ã ¾Ê¾Æ ÀÖ´Ù¸é ¼­±â.
			if( ((CPlayerEntity*)CEntity::GetPlayerEntity(0) )->IsSitting() && 
				!((CPlayerEntity*)CEntity::GetPlayerEntity(0) )->IsActionSitting() )
			{
				GetCharacterInfo()->UseAction( 3 );
				return;
			}
#endif	// !UI_TOOL

			if (STAGEMGR()->GetCurStage() != eSTAGE_LOGIN && STAGEMGR()->GetCurStage() != eSTAGE_SELSERVER)
			{
				_abKeysPressed[KID_MOUSE1] = TRUE;
			}
		}
		break;

	case WM_LBUTTONDBLCLK:
		{
			if( IsInputLock() )
				return;

			for( iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
			{
				INDEX	iCurUI = m_aUIOrder[iUI];
				if (m_apUIs[iCurUI] == NULL)
					continue;
				if( !m_apUIs[iCurUI]->IsEnabled() )
					break;
				if( m_apUIs[iCurUI]->IsVisible() &&	m_apUIs[iCurUI]->MouseMessage( pMsg ) != WMSG_FAIL )
					return;
			}

#if		!defined(UI_TOOL)
			// ´Ù¸¥ pc³ª npc ¶Ç´Â ´Ù¸¥ Áö¿ªÀ» ¸¶¿ì½º·Î Å¬¸¯½Ã ¾Ê¾Æ ÀÖ´Ù¸é ¼­±â.
			if( ((CPlayerEntity*)CEntity::GetPlayerEntity(0) )->IsSitting() && 
				!((CPlayerEntity*)CEntity::GetPlayerEntity(0) )->IsActionSitting() )
			{
				GetCharacterInfo()->UseAction( 3 );
				return;
			}
#endif	// UI_TOOL
		}
		break;

	case WM_LBUTTONUP:
		{
			if( IsInputLock() )
			{
				ResetHoldBtn();
				return;
			}

			for( iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
			{
				INDEX	iCurUI = m_aUIOrder[iUI];

				if (m_apUIs[iCurUI] == NULL)
					continue;
				if( !m_apUIs[iCurUI]->IsEnabled() )
					break;
				if( m_apUIs[iCurUI]->IsVisible() &&	m_apUIs[iCurUI]->MouseMessage( pMsg ) != WMSG_FAIL )
					return;
			}

			GetSimplePlayerMenuUI()->ClearAll();

// 			if (!m_btnHoldBtn.IsEmpty())
// 			{
// 				if (m_btnHoldBtn.IsWearTab() == true)
// 				{
// 					GetChattingUI()->AddSysMessage( _S(3048, "¹ö¸± ¼ö ¾ø´Â ¾ÆÀÌÅÛÀÔ´Ï´Ù" ), SYSMSG_ERROR );
// 					ResetHoldBtn();
// 					return;
// 				}
// 
// 				// Drop item
// 				if( m_btnHoldBtn.GetWhichUI() == UI_INVENTORY && !IsCSFlagOn(CSF_WAREHOUSE) )
// 					DropItem( m_btnHoldBtn.GetItemTab(), m_btnHoldBtn.GetInvenIndex() );
// 
// 				// Remove button in quick slot
// 				if( m_btnHoldBtn.GetWhichUI() == UI_QUICKSLOT )
// 					GetQuickSlot()->RemoveBtn( m_btnHoldBtn.GetBtnID() );
// 				
// 				if (m_btnHoldBtn.GetWhichUI() == UI_WILDPET_INFO)
// 				{
// 					GetWildPetInfo()->RemoveSlot(m_btnHoldBtn);
// 				}
// 
// 				ResetHoldBtn();
// 				return;
// 			}

			if (m_pIconDrag != NULL)
			{
				if (m_pIconDrag->IsWearTab() == true)
				{
					GetChattingUI()->AddSysMessage( _S(3048, "¹ö¸± ¼ö ¾ø´Â ¾ÆÀÌÅÛÀÔ´Ï´Ù" ), SYSMSG_ERROR );
					ResetHoldBtn();
					return;
				}

				CItems* pItems = m_pIconDrag->getItems();

				if (pItems != NULL)
				{
					// Drop item
					if (m_pIconDrag->GetWhichUI() == UI_INVENTORY && !IsCSFlagOn(CSF_WAREHOUSE))
						DropItem(pItems->Item_Tab, pItems->InvenIndex);					

 					if (m_pIconDrag->GetWhichUI() == UI_WILDPET_INFO)
 						GetWildPetInfoUI()->RemoveSlot(m_pIconDrag);
				}

				// Remove button in quick slot
				if (m_pIconDrag->GetWhichUI() == UI_QUICKSLOT)
					GetQuickSlot()->RemoveBtn(m_pIconDrag);

				ResetHoldBtn();

				return;
			}

			if (m_pBaseDrag != NULL)
			{
				ResetHoldBtn();
				return;
			}

			if (STAGEMGR()->GetCurStage() != eSTAGE_LOGIN && STAGEMGR()->GetCurStage() != eSTAGE_SELSERVER)
			{
				_abKeysPressed[KID_MOUSE1] = FALSE;
			}
		}
		break;

	case WM_MOUSEWHEEL:
		{
			POINT	pt;
			pt.x = LOWORD( pMsg->lParam );
			pt.y = HIWORD( pMsg->lParam );
			ScreenToClient( _hwndMain, &pt );
			pMsg->lParam = MAKEWPARAM( pt.x, pt.y );

			for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
			{
				INDEX	iCurUI = m_aUIOrder[iUI];
				if (m_apUIs[iCurUI] == NULL)
					continue;
				if( !m_apUIs[iCurUI]->IsEnabled() )
					break;
				if( m_apUIs[iCurUI]->IsVisible() &&	m_apUIs[iCurUI]->MouseMessage( pMsg ) != WMSG_FAIL )
					return;
			}

			INDEX iWheelValue = SWORD( HIWORD( pMsg->wParam ) );
			_iMouseZ += iWheelValue;
			_pInput->m_WheelPos = iWheelValue;
		}
		break;
	case WM_IME_KEYDOWN	:	// ÀÌ±âÈ¯ Ãß°¡ (11.15)
	case WM_CHAR:				// Fot edit box
		{
			if (pMsg->message == WM_IME_KEYDOWN) // À©µµ¿ì7¿¡¼­´Â IMEÁ¶ÇÕÁß WM_CHAR ¸Þ½ÃÁö°¡ ¿ÀÁö ¾Ê´Â´Ù.
			{
// 				if (pMsg->wParam == VK_RETURN)
// 				{
// 					if (MSGBOXMGR()->KeyProc(pMsg) != WMSG_FAIL)
// 					{
// 						bNeedCharMsg = FALSE;
// 						return;
// 					}
// 
// 					for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
// 					{
// 						INDEX	iCurUI = m_aUIOrder[iUI];
// 						if (m_apUIs[iCurUI] == NULL)
// 							continue;
// 						if( !m_apUIs[iCurUI]->IsEnabled() )
// 							break;
// 						if( m_apUIs[iCurUI]->KeyMessage( pMsg ) != WMSG_FAIL )
// 						{
// 							bNeedCharMsg = FALSE;
// 							return;
// 						}
// 					}
//				}

				if (MSGBOXMGR()->KeyProc(pMsg) != WMSG_FAIL)
				{
					bNeedCharMsg = FALSE;
					return;
				}

				for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
				{
					INDEX	iCurUI = m_aUIOrder[iUI];
					if (m_apUIs[iCurUI] == NULL)
						continue;
					if( !m_apUIs[iCurUI]->IsEnabled() )
						break;
					if( m_apUIs[iCurUI]->KeyMessage( pMsg ) != WMSG_FAIL )
					{
						bNeedCharMsg = FALSE;
						return;
					}
				}

				_pInput->SendIMEKeyInput(pMsg);
			}
			
			if( bNeedCharMsg )
			{
				if (MSGBOXMGR()->CharProc(pMsg) != WMSG_FAIL)
					return;

				if( g_iEnterChat )
				{
					for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
					{
						INDEX	iCurUI = m_aUIOrder[iUI];
						if (m_apUIs[iCurUI] == NULL)
							continue;
						if( !m_apUIs[iCurUI]->IsEnabled() )
							break;
						if( m_apUIs[iCurUI]->CharMessage( pMsg ) != WMSG_FAIL )
							return;
					}
				}
				else
				{
					if( m_apUIs[m_aUIOrder[0]]->IsEnabled() )
					{
						if ( m_apUIs[m_aUIOrder[0]]->CharMessage( pMsg ) != WMSG_FAIL )
							return;
					}

					if( GetChattingUI()->IsEnabled() )
					{
						RearrangeOrder( UI_CHATTING_NEW, TRUE );
						GetChattingUI()->GetInputBox()->SetFocus( TRUE );

						if( GetChattingUI()->CharMessage( pMsg ) != WMSG_FAIL )
							return;
					}

				}

			}
		}
		break;

	case WM_KEYDOWN:		// For short cut and edit box
		{
			if (MSGBOXMGR()->KeyProc(pMsg) != WMSG_FAIL)
			{
				bNeedCharMsg = FALSE;
				return;
			}

			for( iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
			{
				INDEX	iCurUI = m_aUIOrder[iUI];
				if (m_apUIs[iCurUI] == NULL)
					continue;
				if( !m_apUIs[iCurUI]->IsEnabled() )
					break;
				if( m_apUIs[iCurUI]->KeyMessage( pMsg ) != WMSG_FAIL )
				{
					bNeedCharMsg = FALSE;
					return;
				}
			}

			if( STAGEMGR()->GetCurStage() == eSTAGE_GAMEPLAY )
			{
				// Short cut
				if( GetPlayerInfo()->ProcessShortCut( pMsg ) )
				{
					// Kill focus of edit box
					for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
					{
						if (m_apUIs[iUI] == NULL)
							continue;

						m_apUIs[iUI]->KillFocusEditBox();
					}

					bNeedCharMsg = FALSE;
					return;
				}
				// Cancel ( skill, target etc... )
				else if( pMsg->wParam == VK_ESCAPE )
				{
					// 1.2.3 : ÀÌ±âÈ¯ ¼öÁ¤ (04.12.29) : ESC±â´É Ãß°¡

					// 1. ¿£ÅÍ Ã¼ÆÃ ÀÏ °æ¿ì Ã¼ÆÃ Æ÷Ä¿½º Ãë¼Ò 
					if ( g_iEnterChat )
					{
						if ( GetChattingUI()->GetInputBox()->IsFocused() )
						{
							GetChattingUI()->GetInputBox()->SetFocus( FALSE );
							return;
						}
					}

					CEntity* penPlEntity;
					CPlayerEntity* penPlayerEntity;
					penPlEntity = CEntity::GetPlayerEntity(0); //Ä³¸¯ÅÍ ÀÚ±â ÀÚ½Å
					penPlayerEntity = (CPlayerEntity*) penPlEntity;
					
					// FIXME : RearrangeOrder¿¡ º¸¸é Á¦ÀÏ À§¿¡ ¶° ÀÖ´Â À©µµ¿ì¸¦ ¾Ë ¼ö ÀÖÁö¸¸,
					// FIXME : UIWindow¿¡ CloseÇÔ¼öµµ ¾ø±¸, ³ª¸ÓÁö UIµé¿¡ CLoseÇÔ¼ö°¡ ´Ù Á¦°¢°¢ÀÌ¶ó¼­ Ã³¸®ÇÏ±â ¾Ö¸ÅÇÔ.
					// FiXME : ÀÏ´ÜÀº ÀÎº¥Åä¸®¿Í Ä³¸¯ÅÍ ÀÎÆ÷¸¸ ´Ýµµ·Ï ÀÓ½ÃÀûÀ¸·Î Ã³¸®ÇÔ.
					CUICashShopEX* pCashShop = GetCashShopEX();
					if (pCashShop != NULL && pCashShop->IsVisible())
					{
						if (pCashShop->IsPopupOpened())
						{
							pCashShop->SetPopupVisible(FALSE);
						}
						pCashShop->CloseCashShopEX();
						return;
					}

					if( m_apUIs[GetUIIndexByOrder(0)]->IsVisible() )
					{
						if( m_apUIs[GetUIIndexByOrder(0)]->CloseWindowByEsc() )
						{
							bNeedCharMsg = FALSE;
							return;
						}
					}
					if( GetInventory()->IsVisible() || GetCharacterInfo()->IsVisible() )
					{
						if( GetInventory()->IsVisible() )						
							GetInventory()->ToggleVisible();

						if( GetCharacterInfo()->IsVisible() )
							GetCharacterInfo()->ToggleVisible();

						bNeedCharMsg = FALSE;
						return;
					}

					//2. ESC·Î µ¿ÀÛ Á¤Áö µÇ´Â Player µ¿ÀÛÀÌ È°¼ºÈ­ µÇ¾î ÀÖÀ» °æ¿ì Ãë¼Ò 
					if ( penPlayerEntity->CheckEscKey() )
					{
						if( IsCSFlagOn( CSF_TELEPORT ) )
						{
							_pNetwork->SendWarpCancel();
						}
						else
						{							
							CancelSkill(TRUE);
						}
					}
					else  // 3. Á¾·áÃ¢ ¶ç¿ò
					{
						GetSystemMenu()->ToggleVisible ();
					}

					bNeedCharMsg = FALSE;
					return;
				}
			}

			bNeedCharMsg = TRUE;
			if( g_iEnterChat || _abKeysPressed[KID_LALT] || _abKeysPressed[KID_LCONTROL] ||
				pMsg->wParam == VK_CONTROL || pMsg->wParam == VK_SHIFT ||
				( pMsg->wParam >= VK_PRIOR && pMsg->wParam <= VK_DOWN ) )
			{
				SetKeyFromMsg( pMsg, TRUE );
			}
		}
		break;

	case WM_KEYUP:
		{
			// For Capture Screen
			if( pMsg->wParam == VK_SNAPSHOT )
			{
				if(m_pGame)
				{
					m_pGame->CaptureScreen();
				}			
			}
			// Å°´­¸° »óÅÂ¸¦ È®ÀÎÇÏ±â À§ÇØ¼­ µÎ°³ÀÇ UI¸¸ ¿¹¿ÜÃ³¸®			
			if( m_apUIs[UI_MAP] != NULL && m_apUIs[UI_MAP]->IsEnabled() )
			{
				if( m_apUIs[UI_MAP]->KeyMessage( pMsg ) != WMSG_FAIL )
				{
					bNeedCharMsg = FALSE;
					return;
				}
			}

			if( m_apUIs[UI_RADAR] != NULL && m_apUIs[UI_RADAR]->IsEnabled() )
			{
				if( m_apUIs[UI_RADAR]->KeyMessage( pMsg ) != WMSG_FAIL )
				{
					bNeedCharMsg = FALSE;
					return;
				}
			}
			

			bNeedCharMsg = TRUE;
			SetKeyFromMsg( pMsg, FALSE );
		}
		break;

	case WM_RBUTTONDOWN:
		{
			if( STAGEMGR()->GetCurStage() == eSTAGE_GAMEPLAY )
			{
				for( iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
				{
					INDEX	iCurUI = m_aUIOrder[iUI];
					if (m_apUIs[iCurUI] == NULL)
						continue;
					if( !m_apUIs[iCurUI]->IsEnabled() )
						break;
					if( m_apUIs[iCurUI]->IsVisible() &&	m_apUIs[iCurUI]->MouseMessage( pMsg ) != WMSG_FAIL )
						return;
				}

				GetSimplePlayerMenuUI()->ClearAll();

				_abKeysPressed[KID_MOUSE2] = TRUE;
				m_bRButtonDown = TRUE;
			}
			else if(STAGEMGR()->GetCurStage() == eSTAGE_CREATECHAR)
			{
				_abKeysPressed[KID_MOUSE2] = TRUE;
				m_bRButtonDown = TRUE;
			}
		}
		break;

	case WM_RBUTTONDBLCLK:
		{
			if( STAGEMGR()->GetCurStage() == eSTAGE_GAMEPLAY )
			{
				_abKeysPressed[KID_MOUSE2] = TRUE;
				m_bRButtonDown = TRUE;
			}
		}
		break;

	case WM_RBUTTONUP:
		{
			if (STAGEMGR()->GetCurStage() != eSTAGE_LOGIN && STAGEMGR()->GetCurStage() != eSTAGE_SELSERVER)
				_abKeysPressed[KID_MOUSE2] = FALSE;
			m_bRButtonDown = FALSE;
		}
		break;

	case WM_MBUTTONDOWN:
	case WM_MBUTTONDBLCLK:
		{
			if (STAGEMGR()->GetCurStage() != eSTAGE_LOGIN && STAGEMGR()->GetCurStage() != eSTAGE_SELSERVER)
				_abKeysPressed[KID_MOUSE3] = TRUE;
		}
		break;

	case WM_MBUTTONUP:
		{
			if (STAGEMGR()->GetCurStage() != eSTAGE_LOGIN && STAGEMGR()->GetCurStage() != eSTAGE_SELSERVER)
				_abKeysPressed[KID_MOUSE3] = FALSE;
		}
		break;

	case WM_SYSKEYDOWN:
		{
			// F10
			if( STAGEMGR()->GetCurStage() == eSTAGE_GAMEPLAY && pMsg->wParam == VK_F10 )
			{
				if ( g_iEnterChat && !IsFocusAllEditBox())
					GetQuickSlot()->UseQuickSlot( 21 );
				
				return;
			}
			// Short cut
			else if( _abKeysPressed[KID_LALT] )
			{
				if( STAGEMGR()->GetCurStage() == eSTAGE_GAMEPLAY && GetPlayerInfo()->ProcessShortCut( pMsg ) )
				{
					// Kill focus of edit box
					for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
					{
						if (m_apUIs[iUI] == NULL)
							continue;

						m_apUIs[iUI]->KillFocusEditBox();
					}
				}

				return;
			}

			SetKeyFromMsg( pMsg, TRUE );
		}
		break;

	case WM_SYSKEYUP:
		{
			bNeedCharMsg = TRUE;
			SetKeyFromMsg( pMsg, FALSE );
		}
		break;

	case WM_SETCURSOR:			//°­µ¿¹Î ¼öÁ¤ ½ÃÀÛ ½Ã½ºÅÛ ¸¶¿ì½º ÀÛ¾÷	09.09
		{
			if (g_web.GetWebHandle())
			{
				GetMouseCursor()->SetCursorNULL();
			}
			else
			{
				GetMouseCursor()->SetCursorType();
			}
		}
		break;					//°­µ¿¹Î ¼öÁ¤ ³¡ ½Ã½ºÅÛ ¸¶¿ì½º ÀÛ¾÷		09.09
		
		// key press bug fix. [11/25/2009 rumist]
	case WM_ACTIVATEAPP:
		{
			// À©µµ¿ì Æ÷Ä¿½º¸¦ ÀÒ¾úÀ»¶§ Å°º¸µå³ª ¸¶¿ì½º·Î ºÎÅÍ ¹Þ¾Ò´ø ¸ðµç ¸Þ½ÃÁö ¹öÆÛ¸¦
			// ³¯·Á¹ö¸°´Ù. ÀÌÀ¯´Â À©µµ¿ì Æ¯¼º»ó ¸Þ½ÃÁö°¡ È£Ãâ(!)µÇ¾ú´ø ½ÃÁ¡¿¡¼­¸¸
			// ½ºÄµÄÚµå¸¦ ¾²±â ¶§¹®.
			// Áï, ½ºÄµ ÄÚµå¿¡ ÀÔ·ÂµÈ ÈÄ Æ÷Ä¿½º¸¦ ÀÒ¾î¹ö¸®¸é ¸Þ½ÃÁö¹öÆÛ´Â ÀÌÀü ³»¿ëÀ»
			// °¡ÁøÃ¤·Î Ã³¸®ÇÏ°Ô µÈ´Ù. ÀÌ¶§¹®¿¡ °è¼Ó ´Þ¸®±â³ª, Áö¼ÓÀûÀÎ Å¬¸¯ÀÌ ¹ß»ýÇÑ´Ù.	
			if( pMsg->wParam == FALSE )
			{
				memset( _abKeysPressed, 0, sizeof( _abKeysPressed ) );
			}
		}
		break;
	}
}


void CUIManager::MsgSimpleProc( MSG *pMsg )
{
	switch( pMsg->message )
	{
	case WM_IME_COMPOSITION :
	case WM_IME_STARTCOMPOSITION :
	case WM_IME_ENDCOMPOSITION :
	case WM_IME_NOTIFY :
	case WM_INPUTLANGCHANGE :
	case WM_INPUTLANGCHANGEREQUEST :
	case WM_SYSKEYDOWN :
		{
			IMEMessageProc(pMsg);
		}
		break;
	case WM_KEYDOWN:
		{
			KeyMessageProc(pMsg);
		}
		break;
	case WM_LBUTTONDOWN:
	case WM_LBUTTONUP:
	case WM_LBUTTONDBLCLK:
	case WM_RBUTTONDOWN:
	case WM_RBUTTONUP:
	case WM_RBUTTONDBLCLK:
	case WM_MOUSEMOVE:
		{
			MouseMessage(pMsg);
		}		
		break;
	case WM_MOUSEWHEEL:
		{
			POINT	pt;
			pt.x = LOWORD( pMsg->lParam );
			pt.y = HIWORD( pMsg->lParam );

			ScreenToClient( _hwndMain, &pt );
			pMsg->lParam = MAKEWPARAM( pt.x, pt.y );

			MouseMessage(pMsg);
		}		
		break;
	case WM_CHAR:
		{
			CharMessageProc(pMsg);
		}
		break;
	}
}


// ----------------------------------------------------------------------------
// Name : IsInsideUpperUIs()
// Desc :
// ----------------------------------------------------------------------------
BOOL CUIManager::IsInsideUpperUIs( INDEX iCurUIIndex, int nX, int nY )
{
	INDEX iCurUIOrder;
	for( iCurUIOrder = UI_TYPE_START; iCurUIOrder < UI_TYPE_END; iCurUIOrder++ )
	{
		if( iCurUIIndex == m_aUIOrder[iCurUIOrder] )
			break;
	}

	for( INDEX iUIOrder = UI_TYPE_START; iUIOrder < iCurUIOrder; iUIOrder++ )
	{
		INDEX	iCurUI = m_aUIOrder[iUIOrder];

		if (m_apUIs[iCurUI] == NULL)
			continue;

		if( m_apUIs[iCurUI]->IsVisible() &&	m_apUIs[iCurUI]->IsInside( nX, nY ) )
			return TRUE;
	}

	return FALSE;
}

// wooss 070324 --------------------------------------------------->>
// kw : WSS_HELP_SYSTEM_1
void CUIManager::LoadHelp1Data( const CTFileName &fnString )
{
	if( m_aHelp1Data.Count() > 0 )
		return;

	CTFileStream	fsString;
	fsString.Open_t( fnString );

	char	szTemp[8196];
	INDEX	iIndex, iLength;
	INDEX	iLastIndex = 0;
	INDEX	iTotalCount = 0;

	fsString >> iTotalCount;
	fsString >> iLastIndex;
	m_aHelp1Data.New( iLastIndex + 1 );

	for( INDEX i = 0; i < iTotalCount; i++ )
	{
		// index
		fsString >> iIndex;
		m_aHelp1Data[iIndex].m_index = iIndex;

		// name
		fsString >> iLength;
		if( iLength > 0 )
		{
			fsString.Read_t( szTemp, iLength );
			szTemp[iLength] = NULL;
			m_aHelp1Data[iIndex].m_strName = szTemp;
		}
		else
		{
			SetNoTranslateFlag( TRANS_NAME, &m_aHelp1Data[iIndex].transFlag );
		}

		// desc
		fsString >> iLength;
		if( iLength > 0 )
		{
			fsString.Read_t( szTemp, iLength );
			szTemp[iLength] = NULL;
			m_aHelp1Data[iIndex].m_strDesc = szTemp;
		}
		else
		{
			SetNoTranslateFlag( TRANS_DESC, &m_aHelp1Data[iIndex].transFlag );
		}

		if( m_aHelp1Data[iIndex].transFlag > 0 )
		{
			SetNoTranslationString( HELP1_STRING, iIndex );
		}

		// subNum
		fsString >> m_aHelp1Data[iIndex].m_subNum;
		// subLevel
		fsString >> m_aHelp1Data[iIndex].m_subLevel;
		// subEnable -> set false
		m_aHelp1Data[iIndex].m_subEnable = 0;
		// pic file name
		fsString >> iLength;

		if( iLength > 0 )
		{
			fsString.Read_t( szTemp, iLength );
			szTemp[iLength] = NULL;
			m_aHelp1Data[iIndex].m_strFile = szTemp;
		}
		// pic uv, width/height
		fsString >> m_aHelp1Data[iIndex].m_uv_x;
		fsString >> m_aHelp1Data[iIndex].m_uv_y;
		fsString >> m_aHelp1Data[iIndex].m_width;
		fsString >> m_aHelp1Data[iIndex].m_height;
		
	}

}

void CUIManager::LoadHelp1String()
{
	StringLoader* pLoader = StringLoader::getSingleton();

	if (pLoader == NULL)
		return;

	pLoader->LoadString(eSTRING_HELP1, g_iCountry);

	int		i, nIdx;
	int		nMax = m_aHelp1Data.Count();
	const char* pRet = NULL;
	const char* strtmp;

	for (i = 0; i < nMax; ++i)
	{
		nIdx = m_aHelp1Data[i].m_index;

		if (nIdx >= 0)
		{
			strtmp = pLoader->getData(eSTRING_HELP1, nIdx, 0);
			if (strtmp != NULL)
				m_aHelp1Data[i].m_strName = strtmp;
			else
				SetNoTranslateFlag(TRANS_NAME, &m_aHelp1Data[i].transFlag);

			strtmp = pLoader->getData(eSTRING_HELP1, nIdx, 1);
			
			if (strtmp != NULL)
				m_aHelp1Data[i].m_strDesc = strtmp;
			else
				SetNoTranslateFlag( TRANS_DESC, &m_aHelp1Data[i].transFlag );

			if( m_aHelp1Data[i].transFlag > 0 )
			{
				SetNoTranslationString( HELP1_STRING, i );
			}
		}
	}

	pLoader->release(eSTRING_HELP1);
}

// ----------------------------------------------------------------------------
// Name : Reset()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::LoadStringData( const CTFileName &fnString )
{
	if( m_aStringData.Count() > 0 )
		return;

	CJobInfo* pInfo = CJobInfo::getSingleton();

	if (pInfo == NULL)
		return;

	CTFileStream	fsString;
	fsString.Open_t( fnString );

	char	szTemp[1024];
	INDEX	iIndex, iLength;
	INDEX	iLastIndex = 0;
	INDEX	iTotalCount = 0;

	fsString >> iTotalCount;
	fsString >> iLastIndex;
	m_aStringData.New( iLastIndex + 1 );

	for( INDEX i = 0; i < iTotalCount; i++ )
	{
		fsString >> iIndex;
		fsString >> iLength;

		if( iLength > 0 )
		{
			fsString.Read_t( szTemp, iLength );
			szTemp[iLength] = NULL;
			m_aStringData[iIndex] = szTemp;
		}
		else
		{
			SetNoTranslationString( CLIENT_STRING, iIndex );			
		}
	}

	_pGameState->m_astrErrorMsg[MSG_FAIL_MANY_CONNECT] = GetString( 1 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_WRONG_VERSION] = GetString( 2 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_WRONG_CHAR] = GetString( 3 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_WRONG_PASSWORD] = GetString( 4 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_ALREADY_CONNECT] = GetString( 6 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_CONNECT_SERVER] = GetString( 7 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BLOCK_CHAR] = GetString( 8 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_CHECK_CHAR] = GetString( 9 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_SYSTEM_ERROR] = GetString( 10 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_NOT_EXIST_CHAR] = GetString( 11 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_DB_ALREADY_NAME] = GetString( 12 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_DB_NEW_CHAR] = GetString( 13 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_DB_FULL_CHAR] = GetString( 14 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_DB_NOT_EXIST_CHAR] = GetString( 15 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_DB_UNKNOWN] = GetString( 16 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_NOT_PAY] = GetString( 17 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_NOT_RIGHT] = GetString( 18 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_TIME_OUT] = GetString( 19 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_ALREADY_CONNECT] = GetString( 20 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_OVER_IP] = GetString( 21 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_TIME_NOT_ENOUGH] = GetString( 22 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_TIME_OUT_DISCONNECT] = GetString( 23 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_OTHER] = GetString( 24 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_WRONGPW] = GetString( 25 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_BLOCKED] = GetString( 26 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_MSGR_TIMEOUT_WHISPER] = GetString( 27 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_MSGR_NOT_FOUND_CHAR] = GetString( 28 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGIN_SERVER] = GetString( 29 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_MANY_CONNECT] = GetString( 30 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_WRONG_VERSION] = GetString( 31 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_WRONG_CHAR] = GetString( 32 );
	// FIXME : ¾ÏÈ£¿¡ Àß¸øµÈ ¹®ÀÚ Æ÷ÇÔ ¸Þ¼¼Áö º¯°æ.
	//_pGameState->m_astrErrorMsg[31] = GetString( 33 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_WRONG_PASSWORD] = GetString( 4 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_ALREADY_CONNECT] = GetString( 34 );			// MSG_FAIL_LOGINSERV_ALREADY_CONNECT
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_BLOCK_CHAR] = GetString( 35 );			// MSG_FAIL_LOGINSERV_BLOCK_CHAR
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_CHECK_CHAR] = GetString( 36 );			// MSG_FAIL_LOGINSERV_CHECK_CHAR
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_SYSTEM_ERROR] = GetString( 37 );			// MSG_FAIL_LOGINSERV_SYSTEM_ERROR
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_NOT_EXIST_CHAR] = GetString( 38 );			// MSG_FAIL_LOGINSERV_NOT_EXIST_CHAR
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_NO_SERVICE] = _S( 528, "¼­ºñ½º ±â°£ÀÌ ¾Æ´Õ´Ï´Ù." );	// MSG_FAIL_LOGINSERV_NO_SERVICE	
	_pGameState->m_astrErrorMsg[MSG_FAIL_WRONG_IDENTIFICATION] = GetString( 39 );			// MSG_FAIL_TEST_WRONG
	_pGameState->m_astrErrorMsg[MSG_NOT_IN_ZONE] = GetString( 40 );			// MSG_NOT_IN_ZONE
	_pGameState->m_astrErrorMsg[MSG_FAIL_ENABLE_AREA] = CTString("Enable area msg error");		// MSG_FAIL_ENABLE_AREA
	_pGameState->m_astrErrorMsg[MSG_FAIL_CANNT_ENABLE_AREA] = CTString("area can't enable msg error");	// MSG_FAIL_CANNT_ENABLE_AREA
																								// wooss 050824
	_pGameState->m_astrErrorMsg[MSG_FAIL_NOTLEVEL_FORDELETE] = CTString("Something wrong, This charater can't delete");	// MSG_FAIL_DELETE_CHARATER (cause level is high(5))
	_pGameState->m_astrErrorMsg[MSG_FAIL_DB_DELETE_DELAY_CHAR] = _s("¸¸ 18¼¼ ÀÌ»ó¸¸ Á¢¼ÓÇÒ ¼ö ÀÖ½À´Ï´Ù.");
	_pGameState->m_astrErrorMsg[MSG_FAIL_SCARD_NOT_MATCHING] = _s("º¸¾È Ä«µå ÀÎÁõ ½ÇÆÐ");
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_BLOCK_USER] = _s("ÆÐ½º¿öµå ÀÔ·Â 3¹ø ¿À·ù·Î ºí·°µÇ¾ú½À´Ï´Ù.");
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_BLOCK_ACCOUNT] = _s("°èÁ¤ ºí·°»óÅÂ");
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_USE_SECURE_SYSTEM] = _s("ÀüÈ­ º¸¾È ½Ã½ºÅÛ »ç¿ë À¯Àú");
	_pGameState->m_astrErrorMsg[MSG_FAIL_CANNOT_CREATE_NS] = _S( 4700, "90·¹º§ÀÌ»ó Ä³¸¯ÅÍ°¡ ¾ø°Å³ª, ÀÌ¹Ì ³ªÀÌÆ®½¦µµ¿ì Ä³¸¯ÅÍ°¡ Á¸ÀçÇÕ´Ï´Ù.");
	_pGameState->m_astrErrorMsg[MSG_FAIL_DOESNOT_LASTCHAOSID] = _S(4759, "¾ÆÀÌµð°¡ Á¸ÀçÇÏÁö ¾Ê½À´Ï´Ù.");
	_pGameState->m_astrErrorMsg[MSG_FAIL_CANNOT_CONNECT_UNDER_FIFTEEN] = _s("¸¸ 15¼¼ ¹Ì¸¸ÀÇ °èÁ¤Àº °ÔÀÓÀ» ÀÌ¿ëÇÏ½Ç ¼ö ¾ø½À´Ï´Ù.");
	_pGameState->m_astrErrorMsg[MSG_TIME_OUT] = GetString( 41 );			// TIME_OUT
	_pGameState->m_astrErrorMsg[MSG_FAIL_REPORT] = _S(8163, "");
	_pGameState->m_astrErrorMsg[MSG_FAIL_REPORT_NOT_CHAR] = _S(8164, "");
	_pGameState->m_astrErrorMsg[MSG_FAIL_JEWEL_CLEAN] = _S(8249, ""); // new rrbkmz
//	if(g_iCountry == HONGKONG)
#if defined G_HONGKONG
	{
		_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_BLOCK_ACCOUNT] = GetString( 4169 );
	}
	//else
#else
	{
		_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_BLOCK_ACCOUNT] = GetString( 41 );
	}
#endif
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_USE_SECURE_SYSTEM] = GetString(4168);

	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_BLOCK_USER] = GetString(4116);	//ttos_080410 : ºê¶óÁú ºñ¹Ð¹øÈ£ 3È¸ Á¦ÇÑ

	pInfo->SetName( TITAN, GetString( 43 ) );
	pInfo->SetName( KNIGHT, GetString( 44 ) );
	pInfo->SetName( HEALER, GetString( 45 ) );
	pInfo->SetName( MAGE, GetString( 46 ) );
	pInfo->SetName( ROGUE, GetString( 47 ) );
	pInfo->SetName( SORCERER, GetString( 48 ) );
	pInfo->SetName( NIGHTSHADOW, _S(4410, "³ªÀÌÆ®½¦µµ¿ì") );
#ifdef CHAR_EX_ROGUE
	pInfo->SetName( EX_ROGUE, _S( 5732, "EX·Î±×" ) );	// [2012/08/27 : Sora] EX·Î±× Ãß°¡
#endif
#ifdef CHAR_EX_MAGE
	pInfo->SetName( EX_MAGE, _S( 5820, "¾ÆÅ©¸ÞÀÌÁö" ) );	// 2013/01/08 jeil EX¸ÞÀÌÁö Ãß°¡ ½ºÆ®¸µ ³ª¿À¸é Ãß°¡ ¼öÁ¤ ÇÊ¿ä 
#endif
	
	pInfo->SetExtensionName( KNIGHT, 0, _S( 1188, "·Î¿­ ³ªÀÌÆ®" ) );	
	pInfo->SetExtensionName( KNIGHT, 1, _S( 1189, "ÅÛÇÃ ³ªÀÌÆ®" ) );	
	pInfo->SetExtensionName( TITAN, 0, _S( 1190, "ÇÏÀÌ·£´õ" ) );		
	pInfo->SetExtensionName( TITAN, 1, _S( 1191, "¿ö ¸¶½ºÅÍ" ) );	
	pInfo->SetExtensionName( HEALER, 0, _S( 1192, "¾ÆÃ³" ) );		
	pInfo->SetExtensionName( HEALER, 1, _S( 1193, "Å¬·¹¸¯" ) );		
	pInfo->SetExtensionName( MAGE, 0, _S( 1194, "À§ÀÚµå" ) );		
	pInfo->SetExtensionName( MAGE, 1, _S( 1195, "À§Ä¡" ) );			
	pInfo->SetExtensionName( ROGUE, 0, _S( 1196, "¾î½Ø½Å" ) );		
	pInfo->SetExtensionName( ROGUE, 1, _S( 1197, "·¹ÀÎÀú" ) );		
	pInfo->SetExtensionName( SORCERER, 0, _S(2324, "¿¤¸®¸àÅ» ¸®½ºÆ®" ) );
	pInfo->SetExtensionName( SORCERER, 1, _S(2325, "½ºÆä¼È ¸®½ºÆ®" ) );
	pInfo->SetExtensionName( NIGHTSHADOW, 0, _S(4410, "³ªÀÌÆ®½¦µµ¿ì") );
	pInfo->SetExtensionName( NIGHTSHADOW, 1, _S(4410, "³ªÀÌÆ®½¦µµ¿ì") );
#ifdef CHAR_EX_ROGUE
	pInfo->SetExtensionName( EX_ROGUE, 0, _S( 5734, "EX¾î½Ø½Å" ) );		// [2012/08/27 : Sora] EX·Î±× Ãß°¡
	pInfo->SetExtensionName( EX_ROGUE, 1, _S( 5735, "EX·¹ÀÎÀú" ) );		// [2012/08/27 : Sora] EX·Î±× Ãß°¡
#endif
#ifdef CHAR_EX_MAGE	// 2013/01/08 jeil EX¸ÞÀÌÁö Ãß°¡ ½ºÆ®¸µ ³ª¿À¸é Ãß°¡ ¼öÁ¤ ÇÊ¿ä 
	pInfo->SetExtensionName( EX_MAGE, 0, _S( 5822, "¾ÆÅ©À§ÀÚµå" ) );	
	pInfo->SetExtensionName( EX_MAGE, 1, _S( 5823, "¾ÆÅ©À§Ä¡" ) );		
#endif

	// [2010/08/27 : Sora] ADD_SUBJOB
	m_strSubJobName[0] = _S(5048, "»óÀÎ");
}

// ----------------------------------------------------------------------------
// Name : CompareFinalConsonant()
// Desc :
// ----------------------------------------------------------------------------
static BOOL	CompareFinalConsonant( INDEX iComp )
{
	for( INDEX i = 0; i < COMP_DIGIT_COUNT; i++ )
	{
		if( aiCompDigit[i] == iComp )
			return TRUE;
	}

	return FALSE;
}

// ----------------------------------------------------------------------------
// Name : CompareFinalConsonant()
// Desc :
// ----------------------------------------------------------------------------
static BOOL	CompareFinalConsonant( char szComp[2] )
{
	for( INDEX i = 0; i < COMP_STRING_COUNT; i++ )
	{
		if( aszCompString[i][0] == szComp[0] && aszCompString[i][1] == szComp[1] )
			return TRUE;
	}

	return FALSE;
}

// ----------------------------------------------------------------------------
// Name : GetString()
// Desc :
// ----------------------------------------------------------------------------
CTString & CUIManager::GetString( INDEX iIndex, INDEX iSrc )
{
	ASSERT( iIndex < m_aStringData.Count() );

	//extern INDEX	g_iCountry;
	//if( g_iCountry != KOREA )
	#if !defined G_KOR
		//return m_aStringData[iIndex];
		return GetString( iIndex );
	#endif

	static const CTString	strReplace[4] = { "<¸¦>", "<°¡>", "<°ú>", "<´Â>" };
	static const CTString	strReplace1[4] = { "¸¦", "°¡", "¿Í", "´Â" };
	static const CTString	strReplace2[4] = { "À»", "ÀÌ", "°ú", "Àº" };
	static CTString			strOrig;

	//strOrig = m_aStringData[iIndex];
	strOrig = GetString(iIndex);

	if( CompareFinalConsonant( iSrc ) )
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace1[i] ) )
				return strOrig;
		}
	}
	else
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace2[i] ) )
				return strOrig;
		}
	}

	return strOrig;
}

// ----------------------------------------------------------------------------
// Name : GetString()
// Desc :
// ----------------------------------------------------------------------------
CTString & CUIManager::GetString( INDEX iIndex, const char *szSrc )
{
	ASSERT( iIndex < m_aStringData.Count() );

	
	//if( g_iCountry != KOREA )
	#if !defined G_KOR
		return GetString(iIndex);
	#endif

	static const CTString	strReplace[4] = { "<¸¦>", "<°¡>", "<°ú>", "<´Â>" };
	static const CTString	strReplace1[4] = { "¸¦", "°¡", "¿Í", "´Â" };
	static const CTString	strReplace2[4] = { "À»", "ÀÌ", "°ú", "Àº" };
	static CTString			strOrig;
	char					szCompSrc[2];
	INDEX					iLength;

	//strOrig = m_aStringData[iIndex];
	strOrig = GetString(iIndex);

	iLength = strlen( szSrc );
	szCompSrc[0] = szSrc[iLength - 2];
	szCompSrc[1] = szSrc[iLength - 1];
	if( CompareFinalConsonant( szCompSrc ) )
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace1[i] ) )
				return strOrig;
		}
	}
	else
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace2[i] ) )
				return strOrig;
		}
	}

	return strOrig;
}

// ----------------------------------------------------------------------------
// Name : GetString()
// Desc :
// ----------------------------------------------------------------------------
CTString & CUIManager::GetString( INDEX iIndex, const CTString &strSrc )
{
	ASSERT( iIndex < m_aStringData.Count() );

	
//	if( g_iCountry != KOREA )
	#if !defined G_KOR
		//return m_aStringData[iIndex];
		return GetString(iIndex);
	#endif

	static const CTString	strReplace[4] = { "<¸¦>", "<°¡>", "<°ú>", "<´Â>" };
	static const CTString	strReplace1[4] = { "¸¦", "°¡", "¿Í", "´Â" };
	static const CTString	strReplace2[4] = { "À»", "ÀÌ", "°ú", "Àº" };
	static CTString			strOrig;
	char					szCompSrc[2];
	INDEX					iLength;

	//strOrig = m_aStringData[iIndex];
	strOrig = GetString(iIndex);

	iLength = strSrc.Length();
	szCompSrc[0] = strSrc[iLength - 2];
	szCompSrc[1] = strSrc[iLength - 1];
	if( CompareFinalConsonant( szCompSrc ) )
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace1[i] ) )
				return strOrig;
		}
	}
	else
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace2[i] ) )
				return strOrig;
		}
	}

	return strOrig;
}

// ----------------------------------------------------------------------------
// Name : GetString()
// Desc :
// ----------------------------------------------------------------------------
CTString & CUIManager::GetString( INDEX iIndex, const char *szSrc1, const char *szSrc2 )
{
	ASSERT( iIndex < m_aStringData.Count() );

	
	//if( g_iCountry != KOREA )
	#if !defined G_KOR
		//return m_aStringData[iIndex];
		return GetString(iIndex);
	#endif

	static const CTString	strReplace[4] = { "<¸¦>", "<°¡>", "<°ú>", "<´Â>" };
	static const CTString	strReplace1[4] = { "¸¦", "°¡", "¿Í", "´Â" };
	static const CTString	strReplace2[4] = { "À»", "ÀÌ", "°ú", "Àº" };
	static CTString			strOrig;
	char					szCompSrc[2];
	INDEX					iLength;

	//strOrig = m_aStringData[iIndex];
	strOrig = GetString(iIndex);

	iLength = strlen( szSrc1 );
	szCompSrc[0] = szSrc1[iLength - 2];
	szCompSrc[1] = szSrc1[iLength - 1];
	if( CompareFinalConsonant( szCompSrc ) )
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace1[i] ) )
				break;
		}
	}
	else
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace2[i] ) )
				break;
		}
	}

	iLength = strlen( szSrc2 );
	szCompSrc[0] = szSrc2[iLength - 2];
	szCompSrc[1] = szSrc2[iLength - 1];
	if( CompareFinalConsonant( szCompSrc ) )
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace1[i] ) )
				return strOrig;
		}
	}
	else
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace2[i] ) )
				return strOrig;
		}
	}

	return strOrig;
}

// ----------------------------------------------------------------------------
// Name : GetString()
// Desc :
// ----------------------------------------------------------------------------
CTString & CUIManager::GetString( INDEX iIndex, const CTString &strSrc1, const CTString &strSrc2 )
{
	ASSERT( iIndex < m_aStringData.Count() );

	
	//if( g_iCountry != KOREA )
	#if !defined G_KOR
		//return m_aStringData[iIndex];
		return GetString(iIndex);
	#endif

	static const CTString	strReplace[4] = { "<¸¦>", "<°¡>", "<°ú>", "<´Â>" };
	static const CTString	strReplace1[4] = { "¸¦", "°¡", "¿Í", "´Â" };
	static const CTString	strReplace2[4] = { "À»", "ÀÌ", "°ú", "Àº" };
	static CTString			strOrig;
	char					szCompSrc[2];
	INDEX					iLength;

	//strOrig = m_aStringData[iIndex];
	strOrig = GetString(iIndex);

	iLength = strSrc1.Length();
	szCompSrc[0] = strSrc1[iLength - 2];
	szCompSrc[1] = strSrc1[iLength - 1];
	if( CompareFinalConsonant( szCompSrc ) )
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace1[i] ) )
				break;
		}
	}
	else
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace2[i] ) )
				break;
		}
	}

	iLength = strSrc2.Length();
	szCompSrc[0] = strSrc2[iLength - 2];
	szCompSrc[1] = strSrc2[iLength - 1];
	if( CompareFinalConsonant( szCompSrc ) )
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace1[i] ) )
				return strOrig;
		}
	}
	else
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace2[i] ) )
				return strOrig;
		}
	}

	return strOrig;
}

//°­µ¿¹Î ¼öÁ¤ ½ÃÀÛ ´ÙÁß °ø°Ý ÀÛ¾÷	09.06
// ----------------------------------------------------------------------------
// Name : Reset()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::Reset()
{
	int		iUI;
	m_nShowMessageBox = -1;

	// Portal
	GetPortal()->Close();

	// Shop
	GetShop()->ResetShop();

	// Personal Shop
	GetPersonalShop()->ResetShop();

	// Exchange
	GetExchange()->ResetExchange();

	// Refine
	GetRefine()->CloseRefine();

	// Unlock inventory
	GetInventory()->Lock( FALSE, FALSE, LOCK_NONE );
	GetInventory()->SetLockSelect(false);

#ifdef ENABLE_GUILD_STASH
	GetGuildStash_N()->CloseStash();
#endif


#ifdef	IMPROV1107_NOTICESYSTEM
	// ÀÚµ¿ °øÁö ½Ã½ºÅÛ [11/18/11 trylord]
	GetChattingUI()->LoadScheduleSystemMessage();
#endif

	// Unlock using stat point
	GetCharacterInfo()->UnlockStatPoint();

	GetMessenger()->Reset();

	if (isCreateVisible(UI_MYSTERYOUSBEAD) == true)
		GetMysteryousBead()->CloseUI();

	// Find message box and close it
	for( iUI = UI_MESSAGEBOX_START; iUI < UI_MESSAGEBOX_END; iUI++ )
	{
		if( m_apUIs[iUI]->IsEnabled())
		{
			((CUIMessageBox *)m_apUIs[iUI])->InitMessageBox();
		}
	}
	for( iUI = UI_MESSAGEBOXL_START; iUI < UI_MESSAGEBOXL_END; iUI++ )
	{
		if( m_apUIs[iUI]->IsEnabled())
		{
			((CUIMessageBoxL *)m_apUIs[iUI])->InitMessageBox();
		}
	}

	m_nCoolTimeReductionRate =0;
	m_nNeedMPReductionRate =0;

	// Ä£È­µµ ½Ã½ºÅÛ.
	GetAffinity()->CloseAllUI();
}
//°­µ¿¹Î ¼öÁ¤ ³¡ ´ÙÁß °ø°Ý ÀÛ¾÷		09.06


// ========================================================================= //
//                             Command functions                             //
// ========================================================================= //
static int	nTempTab, nTempInvenIdx;

// ----------------------------------------------------------------------------
// Name : DropItem()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::DropItem( int nTab, int inven_idx )
{
	nTempTab = nTab;
	nTempInvenIdx = inven_idx;

	CUIManager* pUIMgr = CUIManager::getSingleton();
	if (pUIMgr->GetInventory()->IsLockedArrange() == TRUE)
	{
		pUIMgr->GetInventory()->ShowLockErrorMessage();
		return;
	}

	CItems*		pItems = &_pNetwork->MySlotItem[nTab][inven_idx];
	CItemData*	pItemData = pItems->ItemData;

	if (pItemData == NULL)
		return;

#ifdef ADD_SUBJOB
	if( pItemData->IsFlag( ITEM_FLAG_SELLER ) ? 
		!CheckSellerItem(UI_INVENTORY, pItemData->GetFlag()) : 
		!( pItemData->GetFlag() & ITEM_FLAG_DROP) || pItems->IsFlag(FLAG_ITEM_LENT) || pItems->IsFlag(FLAG_ITEM_COMPOSITION) ||
		   pItems->IsFlag(FLAG_ITEM_PLATINUMBOOSTER_ADDED) || pItems->IsFlag(FLAG_ITEM_BELONG) )
#else
	if( !( pItemData->GetFlag() & ITEM_FLAG_DROP) 
		|| pItems->IsFlag(FLAG_ITEM_LENT) 
		|| pItems->IsFlag(FLAG_ITEM_COMPOSITION) 
		|| pItems->IsFlag(FLAG_ITEM_PLATINUMBOOSTER_ADDED)
		|| pItems->IsFlag(FLAG_ITEM_BELONG))
#endif
	{
		GetChattingUI()->AddSysMessage( _S(3048, "¹ö¸± ¼ö ¾ø´Â ¾ÆÀÌÅÛÀÔ´Ï´Ù" ), SYSMSG_ERROR );		
		return;
	}

	// Quest Ãß°¡
	if ( (pItemData->GetType() == CItemData::ITEM_ETC && pItemData->GetSubType() == CItemData::ITEM_ETC_QUEST) ||
		(pItemData->GetFlag() & ITEM_FLAG_QUEST) )
	{
		GetChattingUI()->AddSysMessage( _S(3048, "¹ö¸± ¼ö ¾ø´Â ¾ÆÀÌÅÛÀÔ´Ï´Ù" ), SYSMSG_ERROR );		
		return;
	}

	// Wearing now
	if( pItems->Item_Wearing >= 0 )
		return;

	if(_pNetwork->m_bSingleMode)
	{
		GetChattingUI()->AddSysMessage( _S( 529, "¾ÆÀÌÅÛÀ» ¹ö¸± ¼ö ¾ø´Â Áö¿ªÀÔ´Ï´Ù." ), SYSMSG_ERROR );		
		return;
	}

	const char* szItemName = _pNetwork->GetItemName( pItemData->GetItemIndex() );
	CTString	strMessage;

	CUIMsgBoxNumericOnly* pMsgBoxNumOnly = GetMsgBoxNumOnly();

	if (DoesMessageBoxExist( MSGCMD_DROPITEM ))
		CloseMessageBox( MSGCMD_DROPITEM );
	
	if (pMsgBoxNumOnly->IsOpen() == true)
		pMsgBoxNumOnly->CloseBox();

	// Ask quantity
	if( ( pItemData->GetFlag() & ITEM_FLAG_COUNT ) && pItems->Item_Sum > 1 )
	{
		strMessage.PrintF( _S2( 188, szItemName, "¸î °³ÀÇ %s<¸¦> ¹ö¸®½Ã°Ú½À´Ï±î?" ), szItemName );
		CTString strTmp;
		strTmp.PrintF("%d", pItems->Item_Sum);

		CmdDropItem* pCmd = new CmdDropItem;
		pMsgBoxNumOnly->SetInfo(pCmd, _S(187, "ÀÎº¥Åä¸®"), strMessage, 1, pItems->Item_Sum);
	}
	else
	{
		CUIMsgBox_Info	MsgBoxInfo;
		MsgBoxInfo.SetMsgBoxInfo( _S( 187, "ÀÎº¥Åä¸®" ), UMBS_OKCANCEL,
									UI_NONE, MSGCMD_DROPITEM );
		
		strMessage.PrintF( _S2( 189, szItemName, "%s<¸¦> ¹ö¸³´Ï´Ù. °è¼Ó ÇÏ½Ã°Ú½À´Ï±î?" ), szItemName );
		MsgBoxInfo.AddString( strMessage );

		CreateMessageBox( MsgBoxInfo );
	}
}
// ----------------------------------------------------------------------------
// Name : MsgBoxCommand(,int,) wooss 050805
// Desc : Ãß°¡µÈ select button Ã³¸®¸¦ À§ÇØ ¹öÆ° ¹øÈ£¸¦ ÀÎÀÚ·Î »ç¿ëÇÑ´Ù.
// ----------------------------------------------------------------------------
void CUIManager::MsgBoxBtnCommand( int nCommandCode, int btnNum, CTString &strInput )
{
	switch( nCommandCode )
	{
		case MSGCMD_USE_RECOVER_ITEM_HEXP:
		
			CloseMessageBox(MSGCMD_USE_RECOVER_ITEM_HEXP);

			switch(btnNum)
			{
			case 0:
				//°¡±î¿î ½ÃÀÛÁ¡¿¡¼­ ºÎÈ°
				_pNetwork->SendRebirthMessageEx(RECOVER_HEXP_ITEM,TRUE,FALSE);
				break;
			
			case 1:
				//»ç¸Á Àå¼Ò¿¡¼­ ºÎÈ°	
				_pNetwork->SendRebirthMessageEx(RECOVER_HEXP_ITEM,TRUE,TRUE);
				break;
			}

			break;	
		case MSGCMD_USE_RECOVER_ITEM_AEXP:
			CloseMessageBox(MSGCMD_USE_RECOVER_ITEM_AEXP);
			switch(btnNum)
			{
			case 0:
				//°¡±î¿î ½ÃÀÛÁ¡¿¡¼­ ºÎÈ°
				_pNetwork->SendRebirthMessageEx(RECOVER_AEXP_ITEM,TRUE,FALSE);
				break;
			
			case 1:
				//»ç¸Á Àå¼Ò¿¡¼­ ºÎÈ°	
				_pNetwork->SendRebirthMessageEx(RECOVER_AEXP_ITEM,TRUE,TRUE);
				break;
			}
			
			break;
		case MSGCMD_USE_RECOVER_ITEM_HEXP_LUCKY:
			CloseMessageBox(MSGCMD_USE_RECOVER_ITEM_HEXP_LUCKY);
			switch(btnNum)
			{
			case 0:
				//°¡±î¿î ½ÃÀÛÁ¡¿¡¼­ ºÎÈ°
				_pNetwork->SendRebirthMessageEx(RECOVER_HEXP_ITEM_LUCKY,TRUE,FALSE);
				break;
			
			case 1:
				//»ç¸Á Àå¼Ò¿¡¼­ ºÎÈ°	
				_pNetwork->SendRebirthMessageEx(RECOVER_HEXP_ITEM_LUCKY,TRUE,TRUE);
				break;
			}

			break;	
		case MSGCMD_USE_RECOVER_ITEM_AEXP_LUCKY:
			CloseMessageBox(MSGCMD_USE_RECOVER_ITEM_AEXP_LUCKY);
			switch(btnNum)
			{
			case 0:
				//°¡±î¿î ½ÃÀÛÁ¡¿¡¼­ ºÎÈ°
				_pNetwork->SendRebirthMessageEx(RECOVER_AEXP_ITEM_LUCKY,TRUE,FALSE);
				break;
			
			case 1:
				//»ç¸Á Àå¼Ò¿¡¼­ ºÎÈ°	
				_pNetwork->SendRebirthMessageEx(RECOVER_AEXP_ITEM_LUCKY,TRUE,TRUE);
				break;
			}
			
			break;
		case MSGCMD_USE_REBIRTH_ITEM:
			{
				CloseMessageBox(MSGCMD_USE_REBIRTH_ITEM);
				
				LONG lUsedIndex =-1;

				if(_pUIBuff->IsBuff(REBIRTH_ITEM_PHOENIX) )
				{
					lUsedIndex =REBIRTH_ITEM_PHOENIX;
				}

				if(_pUIBuff->IsBuff(REBIRTH_ITEM) )
					lUsedIndex =REBIRTH_ITEM;
				else if( _pUIBuff->IsBuff(REBIRTH_ITEM_NEWBIE) )
					lUsedIndex =REBIRTH_ITEM_NEWBIE;
				else if (_pUIBuff->IsBuff(REBIRTH_ITEM_EVENT)) // ÀÌº¥Æ®¿ë ºÎÈ° ÁÖ¹®¼­
					lUsedIndex = REBIRTH_ITEM_EVENT;

				switch(btnNum)
				{
				case 0:
					//°¡±î¿î ½ÃÀÛÁ¡¿¡¼­ ºÎÈ°
					_pNetwork->SendRebirthMessageEx(lUsedIndex,TRUE,FALSE);
					break;
				
				case 1:
					//»ç¸Á Àå¼Ò¿¡¼­ ºÎÈ°	
					_pNetwork->SendRebirthMessageEx(lUsedIndex,TRUE,TRUE);
					break;
				}
			}
			break;

		case MSGCMD_USE_REBIRTH_ITEM_SCROLL2:
			{
				CloseMessageBox(MSGCMD_USE_REBIRTH_ITEM_SCROLL2);
				
				LONG lUsedIndex =-1;

				lUsedIndex = GetResurrectionMsgBox()->GetResurrectionItemID();
				switch(btnNum)
				{
				case 0:
					//°¡±î¿î ½ÃÀÛÁ¡¿¡¼­ ºÎÈ°
					_pNetwork->SendRebirthMessageEx(lUsedIndex,TRUE,FALSE);
					break;
				
				case 1:
					//»ç¸Á Àå¼Ò¿¡¼­ ºÎÈ°	
					_pNetwork->SendRebirthMessageEx(lUsedIndex,TRUE,TRUE);
					break;
				}
			}
			break;

		case MSGCMD_USE_SLOT_ITEM :

			switch(btnNum)
			{
			case 0:
				//È®Àå½½·Ô 1
				_pNetwork->SendExSlotMessage(1);
				break;
			
			case 1:
				//È®Àå½½·Ô 2
				_pNetwork->SendExSlotMessage(2);
				break;
			}
			break;

		// WSS_MINIGAME 070420 ----------------------------------->>
		case MSGCMD_MINIGAME_SELECT_ITEM:
			{
				switch(btnNum)
				{
				case 0:
					//¿±±â ¹«±â ¼±ÅÃ 1
					_pNetwork->SendMinigameSelectGift(((CUIMinigame*)GetUI(UI_MINIGAME))->m_extra1);										
					break;
				
				case 1:
					//¿±±â ¹«±â ¼±ÅÃ 2
					_pNetwork->SendMinigameSelectGift(((CUIMinigame*)GetUI(UI_MINIGAME))->m_extra2);
					break;
				}
				CloseMessageBox(MSGCMD_MINIGAME_SELECT_ITEM);
			break;


			}
		// -------------------------------------------------------<<
		// WSS_DRATAN_SEIGEWARFARE 2007/08/22 -------------------->>
		case MSGCMD_SIEGEWARFARE_REBIRTH :
			{
				switch(btnNum)
				{
				case 0:	//ºÎÈ° ÁøÁö·Î...				
				case 1:	//°¡±î¿î ¸¶À»·Î...
					GetSiegeWarfareNew()->SendSiegewarfareRebirth(btnNum);
					break;
				}
				CloseMessageBox(MSGCMD_SIEGEWARFARE_REBIRTH);
				
			}
			break;
		// -------------------------------------------------------<<
		case MSGCMD_USE_PET_ACCUMULATE:
			{
				// 3¿ù Âø¿ëÇÑ ÆêÀÇ ÃàÃ´·®ÀÌ 0ÀÎÁö ¾Æ´ÑÁö ±¸ºÐ ÇÏ±â [2/27/2013 Ranma]
				sPetItem_Info temPetitem;
				GetWildPetInfoUI()->GetWildPetInfo(MY_APET_INFO()->m_nIdxServer, temPetitem);
				CloseMessageBox(MSGCMD_USE_PET_ACCUMULATE);

				if (temPetitem.pet_accexp > 0)
				{					
					switch(btnNum)
					{
					case 0:
						{
							_pNetwork->SendPetAccumulateUse(MSG_CHAR_PC, _pNetwork->MyCharacterInfo.index);
							GetInventory()->Lock(FALSE, FALSE, LOCK_EXP_PET);
						}
						break;
					case 1:
						{
							CUIMsgBox_Info	MsgBoxInfo;
							CTString strMsg;
							
							MsgBoxInfo.SetMsgBoxInfo(_S(5640, "Æê¿¡ »ç¿ë"),UMBS_YESNO | UMBS_BUTTONEX,UI_NONE,MSGCMD_USE_PET_ACCUMULATE2);
							MsgBoxInfo.SetBtnType(UBET_ITEM, CItemData::ITEM_ACCESSORY, CItemData::ACCESSORY_WILDPET);
							strMsg.PrintF(_S(5641, "ÃàÀûµÈ °æÇèÄ¡¸¦ Àû¿ë ½ÃÅ³ ÆêÀ» ÀÎº¥Åä¸®¿¡¼­ ¼±ÅÃ ÇÏ½Ã±æ ¹Ù¶ø´Ï´Ù."));
							MsgBoxInfo.AddString(strMsg);
							strMsg.PrintF(_S(5642, "(´Ü, ÀåÂøÁßÀÎ ÆêÀº Àû¿ë ½ÃÅ³ ¼ö ¾ø½À´Ï´Ù.)"));
							MsgBoxInfo.AddString(strMsg);
							CreateMessageBox(MsgBoxInfo);
						}
						break;
					default:
						{
							GetInventory()->Lock(FALSE, FALSE, LOCK_EXP_PET);
						}
						break;
					}
				}
			}

	}			
}

// ----------------------------------------------------------------------------
// Name : MsgBoxCommand()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::MsgBoxCommand( int nCommandCode, BOOL bOK, CTString &strInput )
{
	//wooss 050802
	CTString		strTitle;
	CTString		strMsg ;
	CUIMsgBox_Info	MsgBoxInfo;
	BuffInfo*		tv_buffInfo = _pUIBuff->GetBuffArray();
	int				tv_tab, tv_idx;	// ÀÓ½Ã ¾ÆÀÌÅÛ ½½·Ô À§Ä¡ Á¤º¸ 

	if( !bOK ) // NO, CANCEL °æ¿ì 
	{
		// wooss 050802
		switch( nCommandCode )
		{		
		case MSGCMD_USE_CONFIRM_HEXP:
			_pNetwork->SendRebirthMessageEx(RECOVER_HEXP_ITEM,FALSE,FALSE);
			break;
		case MSGCMD_USE_CONFIRM_AEXP:
			_pNetwork->SendRebirthMessageEx(RECOVER_AEXP_ITEM,FALSE,FALSE);
			break;
		case MSGCMD_USE_CONFIRM_HEXP_LUCKY:
			_pNetwork->SendRebirthMessageEx(RECOVER_HEXP_ITEM_LUCKY,FALSE,FALSE);
			break;
		case MSGCMD_USE_CONFIRM_AEXP_LUCKY:
			_pNetwork->SendRebirthMessageEx(RECOVER_AEXP_ITEM_LUCKY,FALSE,FALSE);
			break;
		case MSGCMD_USE_CONFIRM_REBIRTH:
			_pNetwork->SendRebirthMessageEx(REBIRTH_ITEM,FALSE,FALSE);
			break;
		case MSGCMD_WARP_TO_CANCEL:
			strMsg	= GetMessageBox(MSGCMD_WARP_TO_CANCEL)->GetInputBox().GetString();
			_pNetwork->SendWarpItemMessage(MSG_WARP_TO_REQING,strMsg);
			CloseMessageBox(MSGCMD_WARP_TO_CANCEL);
			break;
		
		case MSGCMD_WARP_TAKE_CANCEL:
			strMsg	= GetMessageBox(MSGCMD_WARP_TAKE_CANCEL)->GetInputBox().GetString();
			_pNetwork->SendWarpItemMessage(MSG_WARP_TAKE_REQING,strMsg);
			CloseMessageBox(MSGCMD_WARP_TAKE_CANCEL);
			break;

		case MSGCMD_WARP_TO_REQ_CALL:
			{
				CTString strSendName = CTString( GetMessageBox(MSGCMD_WARP_TO_REQ_CALL)->GetInputBox().GetString() );

				CloseMessageBox(MSGCMD_WARP_TO_REQ_CALL);
				_pNetwork->SendWarpItemMessage(MSG_WARP_TO,
					strSendName,
					FALSE);
			}
			break;

		case MSGCMD_WARP_TAKE_REQ_CALL:
			{
				CTString strSendName = CTString( GetMessageBox(MSGCMD_WARP_TAKE_REQ_CALL)->GetInputBox().GetString() );

				CloseMessageBox(MSGCMD_WARP_TAKE_REQ_CALL);
				_pNetwork->SendWarpItemMessage(MSG_WARP_TAKE,
					strSendName,
					FALSE);
			}
			break;

			
		case MSGCMD_EX_PARTY_RECALL_PROMPT :	
			_pNetwork->SendPartyRecallConfirm(_pNetwork->m_tmp_str,_pNetwork->m_tmp_idx,FALSE);
			break;

		case MSGLCMD_EVENT_XMAS_2006_CHANGE:
			{
				//±³È¯ÇÒ ÄÉÀÌÅ© °³¼ö ÀÔ·ÂÃ¢ÀÌ ¶ç¿öÁ® ÀÖÁö ¾ÊÀ¸¸é Ã¢À» ´ÝÀ½.
				if( !GetMessageBox(MSGLCMD_EVENT_XMAS_2006_COUNT) )
					CloseMessageBox(MSGLCMD_EVENT_XMAS_2006_CHANGE);
				break;
			}
		case MSGCMD_EX_MONSTERCOMBO_GOTO_COMBO_PROMPT:
			{
				GetCombo()->SendComboMessage(MSG_EX_MONSTERCOMBO_GOTO_COMBO_CONFIRM,FALSE);
				CloseMessageBox(MSGCMD_EX_MONSTERCOMBO_GOTO_COMBO_PROMPT);
			}
			break;
		case MSGCMD_ITEM_BELONG:
			{
				CloseMessageBox(MSGCMD_ITEM_BELONG);
			}break;
		case MSGCMD_CHANGE_START_POINT:
			{
				CNetworkMessage nmMessage(MSG_EXTEND);

				nmMessage << (ULONG)MSG_EX_MSGBOX;
				nmMessage << (UBYTE)MSG_EX_MSGBOX_CHANGE_START_POINT;
				nmMessage << (SBYTE)FALSE;
				
				_pNetwork->SendToServerNew(nmMessage);

			}break;
		case MSGCMD_USE_PET_ACCUMULATE:
			{
				GetInventory()->Lock(FALSE, FALSE, LOCK_EXP_PET);
				CloseMessageBox(nCommandCode);
			}
			break;
		case MSGCMD_USE_PET_ACCUMULATE2:
			{
				GetInventory()->Lock(FALSE, FALSE, LOCK_EXP_PET);
				CloseMessageBox(nCommandCode);
			}
			break;
		default : 
			CloseMessageBox(nCommandCode);
			break;
		}

		return;
	}

	// YES, OK °æ¿ì

	CItems*		pItems = &_pNetwork->MySlotItem[nTempTab][nTempInvenIdx];
	CItemData*	pItemData = pItems->ItemData;

	switch( nCommandCode )
	{
		// wooss 050802
	case MSGCMD_USE_CONFIRM_HEXP:

		CloseMessageBox(MSGCMD_USE_CONFIRM_HEXP);
			
		strMsg  = _S( 1888, "°æÇèÄ¡ º¹±¸ ÁÖ¹®¼­" );	 
		MsgBoxInfo.SetMsgBoxInfo(strMsg ,UMBS_SELECTBOX,UI_NONE,MSGCMD_USE_RECOVER_ITEM_HEXP);
		CreateMessageBox(MsgBoxInfo);
		break;
								
	case MSGCMD_USE_CONFIRM_AEXP:	  
	
		CloseMessageBox(MSGCMD_USE_CONFIRM_AEXP);
		strMsg = _S( 1895, "¼÷·Ãµµ º¹±¸ ÁÖ¹®¼­" );	
		MsgBoxInfo.SetMsgBoxInfo(strMsg ,UMBS_SELECTBOX,UI_NONE,MSGCMD_USE_RECOVER_ITEM_AEXP);
		CreateMessageBox(MsgBoxInfo);

		break;

	case MSGCMD_USE_CONFIRM_HEXP_LUCKY:

		CloseMessageBox(MSGCMD_USE_CONFIRM_HEXP_LUCKY);
			
		strMsg  = _pNetwork->GetItemName(RECOVER_HEXP_ITEM_LUCKY);
		MsgBoxInfo.SetMsgBoxInfo(strMsg ,UMBS_SELECTBOX,UI_NONE,MSGCMD_USE_RECOVER_ITEM_HEXP_LUCKY);
		CreateMessageBox(MsgBoxInfo);
		break;
								
	case MSGCMD_USE_CONFIRM_AEXP_LUCKY:	  
	
		CloseMessageBox(MSGCMD_USE_CONFIRM_AEXP_LUCKY);
		strMsg = _pNetwork->GetItemName(RECOVER_AEXP_ITEM_LUCKY);
		MsgBoxInfo.SetMsgBoxInfo(strMsg ,UMBS_SELECTBOX,UI_NONE,MSGCMD_USE_RECOVER_ITEM_AEXP_LUCKY);
		CreateMessageBox(MsgBoxInfo);

		break;
	case MSGCMD_REPORT_ERROR:
		CloseMessageBox(MSGCMD_REPORT_ERROR);
		strMsg = _S(8160, "");
		MsgBoxInfo.SetMsgBoxInfo(strMsg, UMBS_OK, UI_NONE, MSGCMD_REPORT_ERROR);
		CreateMessageBox(MsgBoxInfo);
		break;
		
	case MSGCMD_USE_CONFIRM_REBIRTH:	 
		
		CloseMessageBox(MSGCMD_USE_CONFIRM_REBIRTH);
		
		if(_pUIBuff->IsBuff(REBIRTH_ITEM_PHOENIX))
		{
			strMsg =_S( 4263,  "ÇÇ´Ð½ºÀÇ ºÎÈ°" ); 
		}

		if(_pUIBuff->IsBuff(REBIRTH_ITEM) || _pUIBuff->IsBuff(REBIRTH_ITEM_NEWBIE))
		{
			strMsg =_S( 1896,  "ºÎÈ° ÁÖ¹®¼­" ); 
		}
		MsgBoxInfo.SetMsgBoxInfo(strMsg,UMBS_SELECTBOX,UI_NONE,MSGCMD_USE_REBIRTH_ITEM);
		CreateMessageBox(MsgBoxInfo);

		break;

	case MSGCMD_CHECK_ITEM_HEXP:
		{
			int nUniIndex;
			GetMessageBox(MSGCMD_CHECK_ITEM_HEXP)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );
			CloseMessageBox(MSGCMD_CHECK_ITEM_HEXP);
			_pNetwork->UseSlotItem(tv_tab, tv_idx);
		}
		break;

	case MSGCMD_CHECK_ITEM_AEXP:
		{
			int nUniIndex;
			GetMessageBox(MSGCMD_CHECK_ITEM_AEXP)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );
			CloseMessageBox(MSGCMD_CHECK_ITEM_AEXP);			
			_pNetwork->UseSlotItem(tv_tab,tv_idx);
		}
		break;
		
	case MSGCMD_USE_WARP_ITEM:
		{
			CTString strName = GetMessageBox(MSGCMD_USE_WARP_ITEM)->GetInputBox().GetString();

			if (checkName(strName, 0) == FALSE)
				return;

			strTitle	=	_S( 191, "È®ÀÎ" );
			strMsg		=_S( 1912, 	"¼ø°£ÀÌµ¿ ÇÒ À§Ä¡¿¡ ÀÖ´Â À¯Àú¿¡°Ô ¼ø°£ÀÌµ¿ ¿©ºÎ¸¦ ¹¯°í ÀÖ½À´Ï´Ù. ¹öÆ°À» ´©¸£¸é Ãë¼Ò µË´Ï´Ù." ); 
			MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_CANCEL,UI_NONE,MSGCMD_WARP_TO_CANCEL);
			MsgBoxInfo.AddString(strMsg);
			if (CreateMessageBox(MsgBoxInfo))
			{
				GetMessageBox(MSGCMD_WARP_TO_CANCEL)->GetInputBox().SetString(strName.str_String);
				
				_pNetwork->SendWarpItemMessage(	MSG_WARP_TO_REQ,strName );
				
				CloseMessageBox(MSGCMD_USE_WARP_ITEM);
			}
		}
		break;


	case MSGCMD_WARP_TO_REQ_CALL:
		// Date : 2006-05-30(¿ÀÀü 11:39:42), By eons
		if( !((CPlayerEntity*)CEntity::GetPlayerEntity(0))->IsIdle() )
		{
			GetChattingUI()->AddSysMessage( _S( 2741, "´Ù¸¥ Çàµ¿ Áß¿¡´Â ¼ø°£ ÀÌµ¿ ¿äÃ»À» ½ÂÀÎ ÇÒ ¼ö ¾ø½À´Ï´Ù." ) );
			CloseMessageBox(MSGCMD_WARP_TO_REQ_CALL);
			_pNetwork->SendWarpItemMessage(MSG_WARP_TO,strInput,FALSE);
			return;
		}

		CloseMessageBox(MSGCMD_WARP_TO_REQ_CALL);
		_pNetwork->SendWarpItemMessage(MSG_WARP_TO,strInput,TRUE);
		break;

	case MSGCMD_WARP_TAKE_REQ_CALL:
		// Date : 2006-05-30(¿ÀÀü 11:39:42), By eons
		if( !((CPlayerEntity*)CEntity::GetPlayerEntity(0))->IsIdle() )
		{
			GetChattingUI()->AddSysMessage( _S( 2742, "´Ù¸¥ Çàµ¿ Áß¿¡´Â ¼ÒÈ¯ ¿äÃ»À» ½ÂÀÎ ÇÒ ¼ö ¾ø½À´Ï´Ù." ) );
			CloseMessageBox(MSGCMD_WARP_TAKE_REQ_CALL);
			_pNetwork->SendWarpItemMessage(MSG_WARP_TAKE,strInput,FALSE);
			return;
		}

		CloseMessageBox(MSGCMD_WARP_TAKE_REQ_CALL);
		_pNetwork->SendWarpItemMessage(MSG_WARP_TAKE,strInput,TRUE);

		UIMGR()->SetCSFlagOn(CSF_TELEPORT);
		break;

	// wooss 050817 
	case MSGCMD_USE_PC_SUMMON_ITEM :
		{
			CTString strName = GetMessageBox(MSGCMD_USE_PC_SUMMON_ITEM)->GetInputBox().GetString();

			if (checkName(strName, 0) == FALSE)
				return;

			strTitle	=	_S( 191, "È®ÀÎ" );
			strMsg		=	_S( 1916, "¼ÒÈ¯ÇÒ À¯Àú¿¡°Ô ¼ÒÈ¯ ¿©ºÎ¸¦ ¹¯°í ÀÖ½À´Ï´Ù. ¹öÆ°À» ´©¸£¸é Ãë¼Ò µË´Ï´Ù" ); 
			MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_CANCEL,UI_NONE,MSGCMD_WARP_TAKE_CANCEL);
			MsgBoxInfo.AddString(strMsg);
			if (CreateMessageBox(MsgBoxInfo))
			{
				GetMessageBox(MSGCMD_WARP_TAKE_CANCEL)->GetInputBox().SetString(strName.str_String);
	
				_pNetwork->SendWarpItemMessage(	MSG_WARP_TAKE_REQ,strName );
	
				CloseMessageBox(MSGCMD_USE_PC_SUMMON_ITEM);
			}
		}
		break;
 
	// wooss 050818
	case MSGCMD_USE_BOSS_SUMMON_ITEM:		
		{
			int nUniIndex;
			GetMessageBox(MSGCMD_USE_BOSS_SUMMON_ITEM)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );
			CloseMessageBox(MSGCMD_USE_BOSS_SUMMON_ITEM);
			_pNetwork->UseSlotItem(tv_tab, tv_idx);
		}
		break;
	//<--
	
	case MSGCMD_DROPITEM:
		{
			if (GetInventory()->IsLocked() == TRUE || GetInventory()->IsLockedArrange() == TRUE)
			{
				GetInventory()->ShowLockErrorMessage();
				return;
			}

			SendDropItem( nTempTab, nTempInvenIdx, 1 );
		}
		break;

	case MSGCMD_PC_DEATH:
		_pNetwork->SendRebirthMessage();
		
		break;

	case MSGCMD_DISCONNECT://kwon Á¢¼Ó ²÷°Ü¼­ °ÔÀÓ Á¾·á.
		_pGameState->Running() = FALSE;
		_pGameState->QuitScreen() = FALSE;	
		//_pGameState->m_BackGroundWorld.Clear();
		break;
		
	case MSGCMD_LOGIN_ERROR:
		{
			// ·Î±×ÀÎ °úÁ¤¿¡¼­ ¿¡·¯ ¹ß»ý½Ã.
			CUIManager* pUIManager = CUIManager::getSingleton();
			StageMgr* pStage = StageMgr::getSingleton();

			if (pStage->GetCurStage() == eSTAGE_LOGIN)
			{
				//pUIManager->GetSelServer()->ResetServerList();
				if (GameDataManager* pGameData = GameDataManager::getSingleton())
				{
					if (CServerSelect* pServerSelect = pGameData->GetServerData())
						pServerSelect->ResetData();
				}
				pUIManager->GetLogin()->Lock(FALSE);
			}
			else if (pStage->GetCurStage() == eSTAGE_SELSERVER)
			{
				pUIManager->GetServerSelect()->Lock(FALSE);
			}
			else if (pStage->GetCurStage() == eSTAGE_SELCHAR)
			{
				pUIManager->GetCharacterSelect()->Lock(FALSE);
			}
			else if (pStage->GetCurStage() == eSTAGE_CREATECHAR)
			{
				pUIManager->GetCreateChar()->Lock(FALSE);
			}
		}
		break;

	// wooss 050812
	case MSGCMD_CONFIRM_CHANGE_MY_NAME:
	{
		CloseMessageBox(MSGCMD_CONFIRM_CHANGE_MY_NAME);
		strTitle = _S( 1919, "°³¸íÄ«µå" ); 
		strMsg = _S( 2140, "»õ·Î¿î Ä³¸¯ÅÍÀÇ ÀÌ¸§À» ÀÔ·ÂÇÏ¼¼¿ä" ); 
		MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_INPUTBOX|UMBS_OKCANCEL,UI_NONE,MSGCMD_USE_CHANGE_MY_NAME_ITEM);
		MsgBoxInfo.AddString(strMsg);
		CreateMessageBox(MsgBoxInfo);

		// [2011/11/02 : Sora] Ä¿¼­ ÀÌµ¿ ºÒ°¡ÇÃ·¡±×
		CUIManager::getSingleton()->GetMessageBox(MSGCMD_USE_CHANGE_MY_NAME_ITEM)->GetInputBox().SetCursorMove( FALSE );
	}
		break;

	case MSGCMD_CONFIRM_CHANGE_GUILD_NAME:
	{
		CloseMessageBox(MSGCMD_CONFIRM_CHANGE_GUILD_NAME);
		strTitle = _S( 2141, "±æµå°³¸íÄ«µå" ); 
		strMsg = _S( 2142, "»õ·Î¿î ±æµåÀÇ ÀÌ¸§À» ÀÔ·ÂÇÏ¼¼¿ä" ); 
		MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_INPUTBOX|UMBS_OKCANCEL,UI_NONE,MSGCMD_USE_CHANGE_GUILD_NAME_ITEM);
		MsgBoxInfo.AddString(strMsg);
		CreateMessageBox(MsgBoxInfo);

		// [2011/11/02 : Sora] Ä¿¼­ ÀÌµ¿ ºÒ°¡ÇÃ·¡±×
		CUIManager::getSingleton()->GetMessageBox(MSGCMD_USE_CHANGE_GUILD_NAME_ITEM)->GetInputBox().SetCursorMove( FALSE );
	}
		break;

	case MSGCMD_CONFIRM_CHANGE_MY_NAME_NEW:
	{
		CloseMessageBox(MSGCMD_CONFIRM_CHANGE_MY_NAME_NEW);
		strTitle = _S(1919, "°³¸íÄ«µå");
		strMsg = _S(2140, "»õ·Î¿î Ä³¸¯ÅÍÀÇ ÀÌ¸§À» ÀÔ·ÂÇÏ¼¼¿ä");
		MsgBoxInfo.SetMsgBoxInfo(strTitle, UMBS_INPUTBOX | UMBS_OKCANCEL, UI_NONE, MSGCMD_USE_CHANGE_MY_NAME_ITEM_NEW);
		MsgBoxInfo.AddString(strMsg);
		CreateMessageBox(MsgBoxInfo);

		// [2011/11/02 : Sora] Ä¿¼­ ÀÌµ¿ ºÒ°¡ÇÃ·¡±×
		CUIManager::getSingleton()->GetMessageBox(MSGCMD_USE_CHANGE_MY_NAME_ITEM_NEW)->GetInputBox().SetCursorMove(FALSE);
	}
	break;
	
	case MSGCMD_CONFIRM_BANNED_ACCOUNT:
	{
		CloseMessageBox(MSGCMD_CONFIRM_BANNED_ACCOUNT);
		_pGameState->Running() = FALSE;
		_pGameState->QuitScreen() = FALSE;
	}
	break;
	
	case MSGCMD_CONFIRMATION:
	{
		GameDataManager* pGame = GameDataManager::getSingleton();
		LoginNew* pLoginData = pGame->GetLoginData();
		CUIManager::getSingleton()->GetLogin()->Lock(FALSE);
		_pNetwork->m_bSendMessage = FALSE;
		CGame* _pGame = CUIManager::getSingleton()->GetGame();
	
		if(_pGame->PreNewGame())
		{
			pLoginData->SetPassword(CTString(GetMessageBox(MSGCMD_CONFIRMATION)->GetInputBox().GetString()));
			pLoginData->ConnectToLoginServer(1);
		}
		CloseMessageBox(MSGCMD_CONFIRMATION);
	}
	break;
	
	case MSGCMD_CONFIRM_BANNED_CHARACTER:
	{
		CloseMessageBox(MSGCMD_CONFIRM_BANNED_CHARACTER);
	}
	break;

	case MSGCMD_CONFIRM_CHANGE_GUILD_NAME_NEW:
	{
		CloseMessageBox(MSGCMD_CONFIRM_CHANGE_GUILD_NAME_NEW);
		strTitle = _S(2141, "±æµå°³¸íÄ«µå");
		strMsg = _S(2142, "»õ·Î¿î ±æµåÀÇ ÀÌ¸§À» ÀÔ·ÂÇÏ¼¼¿ä");
		MsgBoxInfo.SetMsgBoxInfo(strTitle, UMBS_INPUTBOX | UMBS_OKCANCEL, UI_NONE, MSGCMD_USE_CHANGE_GUILD_NAME_ITEM_NEW);
		MsgBoxInfo.AddString(strMsg);
		CreateMessageBox(MsgBoxInfo);

		// [2011/11/02 : Sora] Ä¿¼­ ÀÌµ¿ ºÒ°¡ÇÃ·¡±×
		CUIManager::getSingleton()->GetMessageBox(MSGCMD_USE_CHANGE_GUILD_NAME_ITEM_NEW)->GetInputBox().SetCursorMove(FALSE);
	}
	break;

	case MSGCMD_USE_CHANGE_MY_NAME_ITEM: 
		{	
			strMsg	= GetMessageBox(MSGCMD_USE_CHANGE_MY_NAME_ITEM)->GetInputBox().GetString();
			//GetMessageBox(MSGCMD_USE_CHANGE_MY_NAME_ITEM)->GetAbsPos(tv_col,tv_row);
			//tv_row+=GetMessageBox(MSGCMD_USE_CHANGE_MY_NAME_ITEM)->GetHeight();

			if (!checkName(strMsg, 0)) return;

			_pNetwork->SendChangMyName(strMsg);
			CloseMessageBox(MSGCMD_USE_CHANGE_MY_NAME_ITEM);
		}
		break;
	
	case MSGCMD_USE_CHANGE_GUILD_NAME_ITEM: 
		{
			strMsg	= GetMessageBox(MSGCMD_USE_CHANGE_GUILD_NAME_ITEM)->GetInputBox().GetString();
			//GetMessageBox(MSGCMD_USE_CHANGE_GUILD_NAME_ITEM)->GetAbsPos(tv_col,tv_row);
			
			if (!checkName(strMsg, 1)) return;
			
			_pNetwork->SendChangGuildName(strMsg);			
			CloseMessageBox(MSGCMD_USE_CHANGE_GUILD_NAME_ITEM);
		}
		break;
		
	case MSGCMD_USE_CHANGE_MY_NAME_ITEM_NEW:
	{
		strMsg = GetMessageBox(MSGCMD_USE_CHANGE_MY_NAME_ITEM_NEW)->GetInputBox().GetString();
		//GetMessageBox(MSGCMD_USE_CHANGE_MY_NAME_ITEM)->GetAbsPos(tv_col,tv_row);
		//tv_row+=GetMessageBox(MSGCMD_USE_CHANGE_MY_NAME_ITEM)->GetHeight();

		if (!checkName(strMsg, 3)) return;

		_pNetwork->SendChangMyName(strMsg, true);
		CloseMessageBox(MSGCMD_USE_CHANGE_MY_NAME_ITEM_NEW);
	}
	break;

	case MSGCMD_USE_CHANGE_GUILD_NAME_ITEM_NEW:
	{
		strMsg = GetMessageBox(MSGCMD_USE_CHANGE_GUILD_NAME_ITEM_NEW)->GetInputBox().GetString();
		//GetMessageBox(MSGCMD_USE_CHANGE_GUILD_NAME_ITEM)->GetAbsPos(tv_col,tv_row);

		if (!checkName(strMsg, 4)) return;

		_pNetwork->SendChangGuildName(strMsg, true);
		CloseMessageBox(MSGCMD_USE_CHANGE_GUILD_NAME_ITEM_NEW);
	}
	break;


	case MSGCMD_CONFIRM_MEMSCROLL_EX:
		{
			int nUniIndex;
			GetMessageBox(MSGCMD_CONFIRM_MEMSCROLL_EX)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );
			CloseMessageBox(MSGCMD_CONFIRM_MEMSCROLL_EX);
			_pNetwork->UseSlotItem(tv_tab,tv_idx);
		}		
		break;

	case MSGCMD_CONFIRM_WAREHOUSE_EX:
		{
			int nUniIndex;
			GetMessageBox(MSGCMD_CONFIRM_WAREHOUSE_EX)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );
			CloseMessageBox(MSGCMD_CONFIRM_WAREHOUSE_EX);
			_pNetwork->UseSlotItem(tv_tab,tv_idx);
		}
		break;
		
	case MSGCMD_PROLONG_MEMSCROLL_EX :
		{
			CloseMessageBox(MSGCMD_PROLONG_MEMSCROLL_EX);
			GetInventory()->GetUseItemSlotInfo( tv_tab, tv_idx );
			_pNetwork->SendProlongMessage(tv_tab,tv_idx);
		}
		break;
	case MSGCMD_PROLONG_WAREHOUSE_EX :
		{
			CloseMessageBox(MSGCMD_PROLONG_WAREHOUSE_EX);
			GetInventory()->GetUseItemSlotInfo( tv_tab, tv_idx );
			_pNetwork->SendProlongMessage(tv_tab,tv_idx);
		}
		break;

	//wooss 050820
	case MSGCMD_CONFIRM_SLOT_ITEM :
		strTitle = _S(2407,"Ä³¸¯ÅÍ ½½·Ô È®Àå Ä«µå");
		MsgBoxInfo.SetMsgBoxInfo(strTitle ,UMBS_SELECTBOX,UI_NONE,MSGCMD_USE_SLOT_ITEM);
		CreateMessageBox(MsgBoxInfo);
		break;

	// wooss 060306
	case MSGCMD_CONFIRM_PARTY_RECALL_ITEM :
		{
			int nUniIndex;
			GetMessageBox(MSGCMD_CONFIRM_PARTY_RECALL_ITEM)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );
			CloseMessageBox(MSGCMD_CONFIRM_PARTY_RECALL_ITEM);
			_pNetwork->UseSlotItem(tv_tab,tv_idx);
		}
		break;

	case MSGCMD_NULL:
		CloseMessageBox(MSGCMD_NULL);
		break;

	case MSGCMD_USE_ITEM:
		{
			int nUniIndex;
			GetMessageBox(MSGCMD_USE_ITEM)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );
			CloseMessageBox(MSGCMD_USE_ITEM);
			_pNetwork->UseSlotItem(tv_tab,tv_idx);
		}
		break;

	
	case MSGCMD_SIEGE_WARFARE_MOVEING_CONFIRM:
		{
			// °ø¼ºÁö¿ªÀ¸·Î ÀÌµ¿ 
			_pNetwork->SendMovingGuildWarArea();
		}
		break;
	case MSGCMD_BOOST_RANDON_PRODUCT_ERROR:
		CloseMessageBox(MSGCMD_BOOST_RANDON_PRODUCT_ERROR); 
		break;
	case MSGCMD_GUILD_LORD_NOTICE: // ¼ºÁÖ °øÁö
		GetChattingUI()->SendChatMessage( strInput.str_String, TRUE );
		GetCharacterInfo()->UseAction( 34 );
		break;
	case MSGCMD_EVENT_PRIZE:
		{
			switch( _pNetwork->m_iLastError )
			{
			case MSG_EVENT_ERROR_CHUSEOK_UPGRADE_OK:
			case MSG_EVENT_ERROR_CHUSEOK_UPGRADE_FAIL:
			case MSG_EVENT_ERROR_CHUSEOK_ALREADY_UPGRADE:
			case MSG_EVENT_ERROR_CHUSEOK_NO_CROP:
				GetQuest()->MsgBoxLCommand( MSGLCMD_EVENT, QUEST_HARVEST_MOON_DAY_EVENT );

				break;
			}

		}
		break;
	case MSGCMD_BILL_ITEM_REP:
		//_pNetwork->BillInfoUserInfoReq();
		break;
		
	case MSGCMD_EX_PARTY_RECALL_PROMPT :
		_pNetwork->SendPartyRecallConfirm(_pNetwork->m_tmp_str,_pNetwork->m_tmp_idx,TRUE);		
		break;

	// wooss 060516 platiunm item
	case MSGCMD_CONFIRM_UPGRADESTONE_ITEM :
		{
			int nUniIndex;
			GetMessageBox(MSGCMD_CONFIRM_UPGRADESTONE_ITEM)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );
			CloseMessageBox(MSGCMD_NULL);
			CloseMessageBox(MSGCMD_CONFIRM_UPGRADESTONE_ITEM);
			_pNetwork->UseSlotItem(tv_tab,tv_idx);				
		}
		break;

	case MSGCMD_CONFIRM_MIXNEWREQ_ITEM :
		{
			int nUniIndex;
			GetMessageBox(MSGCMD_CONFIRM_MIXNEWREQ_ITEM)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );
			CloseMessageBox(MSGCMD_CONFIRM_MIXNEWREQ_ITEM);

			_pNetwork->UseSlotItem(tv_tab,tv_idx);				
		}
		break;

	case MSGCMD_CONFIRM_MIXNEW_ITEM :
		{
			CloseMessageBox(MSGCMD_CONFIRM_MIXNEW_ITEM);
			GetMixNew()->OpenMixNew(TRUE);				
		}
		break;
	case MSGCMD_COMFIRM_USE_ITEM:
		{
			int nUniIndex;
			GetMessageBox(MSGCMD_COMFIRM_USE_ITEM)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );
			CloseMessageBox(MSGCMD_COMFIRM_USE_ITEM);
		
			CItems& Items = _pNetwork->MySlotItem[tv_tab][tv_idx];
			// ´Ù½Ã ¾ÆÀÌÅÛ »ç¿ë ¸Þ¼¼Áö Àü¼Û( etc = 1 )
			_pNetwork->SendItemUse(Items.Item_Tab, Items.InvenIndex, Items.Item_UniIndex, 1 );
		}
		break;
	case MSGCMD_PET_MOUNT_CANCEL_CARD:
		{
			CUIMsgBox_Info MsgBoxInfo;
			CTString strMessage;
			
			strMessage.PrintF( _S( 191, "È®ÀÎ" ) );
			MsgBoxInfo.SetMsgBoxInfo(strMessage,UMBS_YESNO,UI_NONE,MSGCMD_USE_PET_MOUNT_CANCEL_CARD);
			strMessage.PrintF( _S( 2895, "[À¯·á¾ÆÀÌÅÛ] ¼±ÅÃÇÑ ¾Ö¿Ïµ¿¹°ÀÇ Å» °Í(¸¶¿îÆ®) »óÅÂ¸¦ Ãë¼ÒÇÏ°í ¾Ö¿Ï µ¿¹° »óÅÂ·Î º¯È¯ ÇÏ½Ã°Ú½À´Ï±î?" ) );
			MsgBoxInfo.AddString(strMessage);
			CreateMessageBox(MsgBoxInfo);
		}
		break;
	case MSGCMD_USE_PET_MOUNT_CANCEL_CARD:
		{
			int tt, ti, nUniIndex;
			GetMessageBox(MSGCMD_PET_MOUNT_CANCEL_CARD)->GetBtnUseItemInfo( tt, ti, nUniIndex );

			GetInventory()->GetUseItemSlotInfo(tv_tab, tv_idx);

			CItems& ItemsBtn = _pNetwork->MySlotItem[tv_tab][tv_idx];

			_pNetwork->SendItemUse(ItemsBtn.Item_Tab, ItemsBtn.InvenIndex, ItemsBtn.Item_UniIndex, nUniIndex );
			CloseMessageBox( MSGCMD_USE_PET_MOUNT_CANCEL_CARD );
		}
		break;
	case MSGCMD_CONFIRM_UNMIX_ITEM : 
		{
			GetMixNew()->OpenMixNew(FALSE);
		}
		break;
	case MSGCMD_RARE_IDENTIFY :
		{
			int nUniIndex;

			GetMessageBox(MSGCMD_RARE_IDENTIFY)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );
			CItems& ItemsBtn = _pNetwork->MySlotItem[tv_tab][tv_idx];

			_pNetwork->SendItemUse(ItemsBtn.Item_Tab, ItemsBtn.InvenIndex, ItemsBtn.Item_UniIndex, nUniIndex );
			CloseMessageBox( MSGCMD_RARE_IDENTIFY );
		}
		break;
	case MSGLCMD_EVENT_XMAS_2006_COUNT :	// 2006 X-Mas Event [12/12/2006 Theodoric]
		{
			CUIEditBox& nInputBox = GetMessageBox(MSGLCMD_EVENT_XMAS_2006_COUNT)->GetInputBox();
			int nCakeCount = atoi(nInputBox.GetString());
			int nCakeMaxCount  = GetInventory()->GetItemCount(1975);			

			if(  nCakeMaxCount < 3 || !( nCakeCount > 2 && nCakeCount <= nCakeMaxCount ) )
			{
				CUIIcon* pIcon = GetMessageBox(MSGLCMD_EVENT_XMAS_2006_CHANGE)->GetBtnEx();

				if (pIcon != NULL)
				{
					pIcon->clearIconData();
				}
			}
			else
			{
				GetMessageBox(MSGLCMD_EVENT_XMAS_2006_CHANGE)->GetInputBox().SetString( nInputBox.GetString());
				GetMessageBox(MSGLCMD_EVENT_XMAS_2006_CHANGE)->GetBtnOK().SetEnable(TRUE);	
			}

			GetMessageBox(MSGLCMD_EVENT_XMAS_2006_COUNT)->InitMessageBox();
		}
		break;

	case MSGLCMD_EVENT_XMAS_2006_CHANGE :
		{
			CUIEditBox& nInputBox = GetMessageBox(MSGLCMD_EVENT_XMAS_2006_CHANGE)->GetInputBox();
			int nCakeCount = atoi(nInputBox.GetString());
			
			if( nCakeCount > 0 ) // [2009/6/8 Theodoric] MSGLCMD_EVENT_XMAS_2006_CHANGE
			{	_pNetwork->Send2006XMasEvent( (SLONG)nCakeCount );	}
			CloseMessageBox( MSGLCMD_EVENT_XMAS_2006_CHANGE );			
		}
		break;
	case MSGCMD_USE_PACKING_PAPER: // ÃÊÄÚ·¿ Æ÷ÀåÁö
	case MSGCMD_USE_SMALL_CORD: // º¹ÁÖ¸Ó´Ï ³ë²ö 
		{
			int nUniIndex;

			GetMessageBox(nCommandCode)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );
			CItems& ItemsBtn = _pNetwork->MySlotItem[tv_tab][tv_idx];

			_pNetwork->SendItemUse(ItemsBtn.Item_Tab, ItemsBtn.InvenIndex, ItemsBtn.Item_UniIndex, nUniIndex );
			CloseMessageBox( nCommandCode );
		}
		break;
	case MSGCMD_GOTO_EGEHA:
		{
			GetPortal()->GotoCurSelZone();
		}
		break;
// [KH_070326] ´Þ°¿ ÀÌº¥Æ® °ü·Ã
	case MSGCMD_CONFIRM_EASTER_EGGS:
		{
			int nUniIndex;
			GetMessageBox(MSGCMD_CONFIRM_EASTER_EGGS)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );
			CloseMessageBox(MSGCMD_CONFIRM_EASTER_EGGS);
			_pNetwork->UseSlotItem(tv_tab,tv_idx);
		}
		break;
	case MSGCMD_SONGKRAN_REWARD:
		{
			int nUniIndex;
			GetMessageBox(MSGCMD_SONGKRAN_REWARD)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );
			CloseMessageBox(MSGCMD_SONGKRAN_REWARD);
			_pNetwork->UseSlotItem(tv_tab,tv_idx);
		}
		break;
	case MSGCMD_PET_NAMECARD_USE:
		{
			if( !GetPetTraining()->IsNotPetWear())
			{
				if(DoesMessageBoxExist(MSGCMD_PET_NAMECARD_INPUT)) 
					return;
				MsgBoxInfo.SetMsgBoxInfo( CTString(_pNetwork->GetItemName(PET_NAMECARD_ITEM)), UMBS_OKCANCEL|UMBS_INPUTBOX, UI_NONE, MSGCMD_PET_NAMECARD_INPUT);
				MsgBoxInfo.AddString( _S(3528, "¾Ö¿Ïµ¿¹°ÀÇ ÀÌ¸§À» ÀÔ·ÂÇÏ¼¼¿ä.") );
				MsgBoxInfo.AddString( _S(3529, "(ÃÖ´ë ÇÑ±Û 8ÀÚ)") );
				MsgBoxInfo.AddString( _s("") );
				MsgBoxInfo.m_nInputMaxChar =16;//.SetInputBox(3, 3, 16);
				CreateMessageBox(MsgBoxInfo);
			}
		}
		break;
	case MSGCMD_PET_NAMECARD_INPUT:
		{
			if( !GetPetTraining()->IsNotPetWear())
			{
				if( _UIFilteringCharacter.Filtering ( strInput.str_String ) == TRUE ) // find ...
				{
					CloseMessageBox(MSGCMD_CREATE_ERROR);
					CUIMsgBox_Info	MsgBoxInfo;
					MsgBoxInfo.SetMsgBoxInfo( CTString(""), UMBS_OK,
												UI_NONE, MSGCMD_CREATE_ERROR );
					
					MsgBoxInfo.AddString( _S(3530, "ÀÔ·ÂÇÑ ÀÌ¸§¿¡ ±ÝÁö´Ü¾î°¡ Æ÷ÇÔµÇ¾î ÀÖ½À´Ï´Ù. ´Ù½Ã ÀÔ·ÂÇØ ÁÖ½Ê½Ã¿À.") );
					CreateMessageBox( MsgBoxInfo );

					return;
				}

				// ÆêÀÌ¸§ º¯°æ½Ã ·¯½Ã¾Æ ¿äÃ»¿¡ µû¶ó Æ¯¼ö ¹®ÀÚ°¡ ÀÔ·ÂµÇÁö ¾Ê°Ô Ã³¸®added by sam 11/01/03
				/*
				if ( (g_iCountry == RUSSIA || g_iCountry == GERMANY) && !checkName( strInput, 2) )
				{
					return;					
				}

				else
				{
					_pNetwork->SendPetNameChageReq( INFO()->_PetTargetInfo.lIndex, strInput);
				}
				/**/									
				if ( !checkName( strInput, 2 ))
					return;

				_pNetwork->SendPetNameChageReq( MY_PET_INFO()->lIndex, strInput);
			}
		}
		break;

	// [070824: Su-won] PET_COLOR_CHANGE
	case MSGCMD_PET_COLORCHANGE_USE:
		{
			int nUniIndex;
			GetMessageBox(MSGCMD_PET_COLORCHANGE_USE)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );
			CloseMessageBox(MSGCMD_PET_COLORCHANGE_USE);
			_pNetwork->UseSlotItem(tv_tab,tv_idx);
		}
		break;

	// [090713: selo] PET_TATOO_CHANGE
	case MSGCMD_PET_TATOOCHANGE_USE:
		{
			CloseMessageBox(MSGCMD_PET_TATOOCHANGE_USE);
			GetTatoo()->SendItemUse();
			GetTatoo()->Close();
		}
		break;

	// [071211: Su-won] EVENT_NEWYEAR_2008
	case MSGCMD_EVENT_NEWYEAR_2008:
		{
			CNetworkMessage	nmMsg( MSG_EVENT );
			nmMsg<< (SBYTE)MSG_EVENT_NEWYEAR_2008;
			_pNetwork->SendToServerNew( nmMsg );
		}
		break;
	case MSGCMD_EX_MONSTERCOMBO_GOTO_COMBO_PROMPT:
		{
			GetCombo()->SendComboMessage(MSG_EX_MONSTERCOMBO_GOTO_COMBO_CONFIRM,TRUE);
		}break;

	case MSGCMD_EVENT_PHOENIX:		//ÇÇ´Ð½º ÀÌº¥Æ®
		{
			_pNetwork->SendCreatePhoenixCharacter();
		}break;
	case MSGCMD_CONFIRM_OBJECTCLICK:
		{
			CEntity* ep_Send = ((CPlayerEntity*)(CEntity::GetPlayerEntity(0)))->GetClickObject();

			if (ep_Send != NULL)
			{
				_pNetwork->SendRaidObjectEvent(ep_Send->en_ulID);
			}
		}
		break;
	case MSGCMD_ITEM_BELONG:		// ±Í¼Ó ¾ÆÀÌÅÛ Âø¿ë½Ã
		{
			int nUniIndex;
			GetMessageBox(MSGCMD_ITEM_BELONG)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );

			CItems*		pItems = &_pNetwork->MySlotItem[tv_tab][tv_idx];

			CNetworkMessage nmMessage;
			RequestClient::doItemWear* packet = reinterpret_cast<RequestClient::doItemWear*>(nmMessage.nm_pubMessage);
			packet->type = MSG_ITEM;
			packet->subType = MSG_ITEM_WEAR;
			packet->wearPos = pItems->ItemData->GetWearingPosition();
			packet->tab = tv_tab;
			packet->invenIndex = tv_idx;
			//packet->extra = pItems->Item_UniIndex;
			nmMessage.setSize( sizeof(*packet) );

			_pNetwork->SendToServerNew(nmMessage);

		}break;
	case MSGCMD_PET_EVOLUTION:
		{
			int nUniIndex;
			GetMessageBox(MSGCMD_PET_EVOLUTION)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );

			CItems& Items = _pNetwork->MySlotItem[tv_tab][tv_idx];

			if (nUniIndex != Items.Item_UniIndex)
				break;

			CNetworkMessage nmMessage;
			RequestClient::doExApetEvolution* packet = reinterpret_cast<RequestClient::doExApetEvolution*>(nmMessage.nm_pubMessage);
			packet->type = MSG_EXTEND;
			packet->subType = htonl(MSG_EX_ATTACK_PET);
			packet->thirdType = MSG_SUB_EVOLUTION;
			packet->tab = tv_tab;
			packet->invenIndex = tv_idx;
			nmMessage.setSize( sizeof(*packet) );

			_pNetwork->SendToServerNew(nmMessage);
			
		}break;
	case MSGCMD_SOCKETSYSTEM_CHANCECARD:
		{
			int nUniIndex;

			GetMessageBox(MSGCMD_SOCKETSYSTEM_CHANCECARD)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );
			CItems& ItemsBtn = _pNetwork->MySlotItem[tv_tab][tv_idx];

			_pNetwork->SendItemUse(ItemsBtn.Item_Tab, ItemsBtn.InvenIndex, ItemsBtn.Item_UniIndex, nUniIndex );
			CloseMessageBox( MSGCMD_SOCKETSYSTEM_CHANCECARD );
		}
		break;
	case MSGLCMD_SOCKET_SYSTEM_EMPTY_BOX:
		{
			CUIManager* pUIManager = CUIManager::getSingleton();
			int	nTab;
			int nUniIndex;
			int nInvenIdx;

			CUIIcon* pIcon = pUIManager->GetMessageBox(MSGLCMD_SOCKET_SYSTEM_EMPTY_BOX)->GetBtnEx();

			if (pIcon != NULL)
			{
				CItems* pItems = pIcon->getItems();

				if (pItems != NULL)
				{
					nTab	  = pItems->Item_Tab;
					nInvenIdx = pItems->InvenIndex;
					nUniIndex = pItems->Item_UniIndex;

				//	pUIManager->GetSocketSystem()->SendCleanOneJewelReq(nTab, nInvenIdx, nUniIndex);
				}
			}

			CloseMessageBox( MSGLCMD_SOCKET_SYSTEM_EMPTY_BOX );
		}
		break;
	case MSGCMD_LOGINSERV_BLOCK_USER:
		{
			ShellExecute( 0, "open", ST_UNLOCK_URL, 0, 0, SW_SHOWNORMAL);
			CloseMessageBox( MSGCMD_LOGINSERV_BLOCK_USER );
		}
		break;
	case MSGCMD_PET_STAT_INIT_CARD_USE:
		{
			int nUniIndex;
			GetMessageBox(MSGCMD_PET_STAT_INIT_CARD_USE)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );
			CloseMessageBox(MSGCMD_PET_STAT_INIT_CARD_USE);
			_pNetwork->UseSlotItem(tv_tab,tv_idx);
		}
		break;
	case MSGCMD_CHANGE_START_POINT:
		{
			CNetworkMessage nmMessage(MSG_EXTEND);

			nmMessage << (ULONG)MSG_EX_MSGBOX;
			nmMessage << (UBYTE)MSG_EX_MSGBOX_CHANGE_START_POINT;
			nmMessage << (SBYTE)TRUE;
			
			_pNetwork->SendToServerNew(nmMessage);
		}break;
	case MSGCMD_SHUTDOWN_TIME:
		{
			_pGameState->Running() = FALSE;
			_pGameState->QuitScreen() = FALSE;	
		}
		break;
	case MSGCMD_USE_PET_ACCUMULATE2:
		{
			CUIIcon* pIcon = GetMessageBox(MSGCMD_USE_PET_ACCUMULATE2)->GetBtnEx();

			if (pIcon != NULL)
			{
				CItems* pItems = pIcon->getItems();

				if (pItems != NULL)
				{
					LONG nPetIndex = pItems->Item_Plus;
					_pNetwork->SendPetAccumulateUse(MSG_CHAR_WILDPET, nPetIndex);
				}
			}

			GetInventory()->Lock(FALSE, FALSE, LOCK_EXP_PET);
			
		}break;
	case MSGCMD_JUMPIMGPOTION:
		{
			int nUniIndex;
			GetMessageBox(MSGCMD_JUMPIMGPOTION)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );
			CloseMessageBox(MSGCMD_JUMPIMGPOTION);
			_pNetwork->UseSlotItem(tv_tab,tv_idx);
		}break;

	case MSGCMD_ITEM_DUPLICATION_CHECK:
		{
			int nUniIndex;
			int tv_tab, tv_idx;

			GetMessageBox(MSGCMD_ITEM_DUPLICATION_CHECK)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );

			CItems& ItemsBtn = _pNetwork->MySlotItem[tv_tab][tv_idx];

			_pNetwork->SendItemUse(ItemsBtn.Item_Tab, ItemsBtn.InvenIndex, ItemsBtn.Item_UniIndex, 0 );
		}
		break;
	case MSGCMD_USE_SEALED_SOUL:
		{
			int nUniIndex;
			int tv_tab, tv_idx;

			GetMessageBox(MSGCMD_USE_SEALED_SOUL)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );

			CItems& ItemsBtn = _pNetwork->MySlotItem[tv_tab][tv_idx];
			_pNetwork->SendItemUse(ItemsBtn.Item_Tab, ItemsBtn.InvenIndex, ItemsBtn.Item_UniIndex, 0 );
		}
		break;
	case MSGCMD_EXP_PET_COOLTIME_REMOVE:
		{
			int nUniIndex;
			int tv_tab, tv_idx;

			GetMessageBox(MSGCMD_EXP_PET_COOLTIME_REMOVE)->GetBtnUseItemInfo( tv_tab, tv_idx, nUniIndex );

			CItems& ItemsBtn = _pNetwork->MySlotItem[tv_tab][tv_idx];
			_pNetwork->SendItemUse(ItemsBtn.Item_Tab, ItemsBtn.InvenIndex, ItemsBtn.Item_UniIndex, 0 );
		}
		break;

	case MSGCMD_ATTENDANCE_ASSURE_OK_UPD:
		{
			_pNetwork->SendAttendanceReq(2);
		}
		break;
	}
}

// ----------------------------------------------------------------------------
// Name : MsgBoxCommand()
// Desc : µÎ°³ÀÇ ¹®ÀÚ¿­À» »ç¿ë 
// Date : 2006-06-01(¿ÀÈÄ 4:57:43), By eons
// ----------------------------------------------------------------------------
void CUIManager::MsgBoxCommand( int nCommandCode, BOOL bOK, CTString &strInput ,CTString &strConfirm)
{
	// Date : 2006-06-01(¿ÀÈÄ 4:57:40), By eons
	CTString		strTitle;
	CTString		strMsg ;
	CUIMsgBox_Info	MsgBoxInfo;

	if( !bOK )		// Ãë¼Ò
	{
		switch( nCommandCode )
		{
		case MSGCMD_GOLDENBALL_EVENT:		// °ñµçº¼
			break;
		}
	}
	else		// ½ÂÀÎ
	{
		switch( nCommandCode )
		{
		case MSGCMD_GOLDENBALL_EVENT:		// °ñµçº¼
			{
				if( !( strInput.IsInteger() && strConfirm.IsInteger() ) )
				{
					_pNetwork->ClientSystemMessage( _S( 2770, "Á¡¼ö´Â 0~99»çÀÌÀÇ ¼ýÀÚ¸¦ ÀÔ·ÂÇÏ¼Å¾ß ÇÕ´Ï´Ù." ), SYSMSG_ERROR );
					return;
				}
				
				const char *TempChar1 = strInput;
				const char *TempChar2 = strConfirm;

				int TeamA = atoi( TempChar1 );
				int TeamB = atoi( TempChar2 );

				if( TeamA >= 0 && TeamA <= 99 && TeamB >= 0 && TeamB <= 99 )
				{
					_pNetwork->SendWorldCupGoldenBallEvent( MSG_EVENT_GOLDENBALL_VOTE, TeamA, TeamB );
				}
				else
				{
					_pNetwork->ClientSystemMessage( _S( 2770, "Á¡¼ö´Â 0~99»çÀÌÀÇ ¼ýÀÚ¸¦ ÀÔ·Â ÇÏ¼Å¾ß ÇÕ´Ï´Ù." ), SYSMSG_ERROR );
					return;
				}
			}
			break;
		case MSGCMD_CONFIRM_BAN_CHARACTER:
			{
				CTString bantime = GetMessageBox(MSGCMD_CONFIRM_BAN_CHARACTER)->GetInputBox().GetString();
				CTString reason = GetMessageBox(MSGCMD_CONFIRM_BAN_CHARACTER)->GetSEInputBox().GetString();

				char szCommand[512];
				sprintf(szCommand, "charban %s %s %s", (const char*)bantime, (const char*)str_nick, (const char*)reason);
				_pNetwork->SendGMCommand((const char*)szCommand);
				
				CloseMessageBox(MSGCMD_CONFIRM_BAN_CHARACTER);
			}
			break;
		case MSGCMD_CONFIRM_BAN_ACCOUNT:
			{
				CTString bantime = GetMessageBox(MSGCMD_CONFIRM_BAN_ACCOUNT)->GetInputBox().GetString();
				CTString reason = GetMessageBox(MSGCMD_CONFIRM_BAN_ACCOUNT)->GetSEInputBox().GetString();

				char szCommand[512];
				sprintf(szCommand, "accban %s %s %s", (const char*)bantime, (const char*)str_nick, (const char*)reason);
				_pNetwork->SendGMCommand((const char*)szCommand);
				
				CloseMessageBox(MSGCMD_CONFIRM_BAN_ACCOUNT);
			}
			break;
		}
	}
}

void CUIManager::MsgCommonCommand( int nCommandCode )
{

}

// ========================================================================= //
//                           Send message functions                          //
// ========================================================================= //

// ----------------------------------------------------------------------------
// Name : SendDropItem()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::SendDropItem( int nTab, int inven_idx, SQUAD llCount )
{
	_pNetwork->DropItem( nTab, inven_idx, llCount );
}

// ----------------------------------------------------------------------------
// Name : CancelSkill()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::CancelSkill( BOOL bLostTarget, BOOL bSkillError )
{	
	((CPlayerEntity*)CEntity::GetPlayerEntity(0))->CancelSkill(bLostTarget, g_iAutoAttack, bSkillError);
}

//------------------------------------------------------------------------------
// CUIManager::LostTarget
// Explain:  ÇöÀç ÄÉ¸¯ÅÍÀÇ TargertÀ» Ãë¼ÒÇÑ´Ù.
// Date : 2005-08-24,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::LostTarget()
{
	((CPlayerEntity*)CEntity::GetPlayerEntity(0))->LostTarget();
}

//#define KEY_SHOW_STRING_INDEX_DEVtest

inline ENGINE_API CTString _SFunc( int x )
{
	CUIManager* pUIManager = CUIManager::getSingleton();

	if (pUIManager->m_showindex && _pNetwork->m_ubGMLevel > 1)
	{
		CTString strString;
		CTString strOrg = pUIManager->GetString( x );

		strOrg.IsEmpty() ? strString.PrintF( "[%d]Client", x ) : strString.PrintF( "[%d]%s", x, strOrg );
		return strString;
	}
	else
		return pUIManager->GetString(x);
}

//------------------------------------------------------------------------------
// CUIManager::SetTitleName
// Explain: ±¹°¡º°·Î Å¸ÀÌÆ²¹ÙÀÇ ÀÌ¸§À» ´Ù¸£°Ô ¼³Á¤
// Date : 2005-09-22,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::SetTitleName( INDEX bFullScreen, int iScreenSizeI, int iScreenSizeJ )
{
	// ±¹°¡º° Å¸ÀÌÆ² ¹Ù º¯°æ 
	// Date : 2005-09-22(¿ÀÈÄ 7:17:24), By Lee Ki-hwan
	// ¿øµµ¿ì Å¸ÀÌÆ² ¹Ù Á¶Á¤ 
	CTString strTitleName;
	strTitleName.PrintF( "%s (%s %dx%d)", _S( 147, "Title Name"), (bFullScreen?"FullScreen":"Window"), iScreenSizeI, iScreenSizeJ );

#ifdef	VER_TEST
	if (m_strIP.size() > 0)
	{
		strTitleName += " - ";
		strTitleName += m_strIP.c_str();
	}

	if (_pNetwork->MyCharacterInfo.index > 0)
	{
		CTString str;
		str.PrintF(" C(%d) U(%d)", _pNetwork->MyCharacterInfo.index, _pNetwork->MyCharacterInfo.userIndex);

		strTitleName += str;
	}
#endif	// VER_TEST
	
	SetWindowText( _hwndMain, strTitleName.str_String );
}

//--------------------------------------------------------------------------------------------------------
// Date : 2005-11-17(¿ÀÈÄ 3:56:49), By Lee Ki-hwan
// °ø°Ý ¼öÄ¡ Ç¥½Ã ÀÛ¾÷ 
#define SHOW_DAMAGE_TIME		1500.0f		// µ¥¹ÌÁö Ç¥½Ã ½Ã°£ 
#define ATTACKED_COLOR			0xaa000000


//------------------------------------------------------------------------------
// CUIManager::SetDamageState
// Explain:  ÀÏÁ¤½Ã°£ÀÌ Áö³ª¸é Damage µ¥ÀÌÅÍ¸¦ ÃÊ±âÈ­
// Date : 2005-11-16,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::SetDamageState()
{
	llOldTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();
}


//------------------------------------------------------------------------------
// CUIManager::AddDamageData
// Explain: µ¥¹ÌÁö¸¦ ÁÖ°Å³ª¹ÞÀ¸¸é ÀúÀåÇÏ´Â ±â´ÉÀ» ÇÑ´Ù.
// * Å¸°ÝÀÌÆåÆ®°¡ ÅÍÁú ¶§ È­¸é¿¡ »Ñ·Á ÁÖ´Â µ¥ÀÌÅÍ ÀúÀå 
// * ±âÁ¸ÀÇ µ¿ÀÏÇÑ ¸÷¿¡°Ô¼­ ¹ÞÀº µ¥ÀÌÅÍ´Â ÀúÀå
// Date : 2005-11-16,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::AddDamageData( ULONG ulDamage, SBYTE sbTargetFlag, ULONG ulClientIndex, BOOL bDamaged  )
{
	DAMAGE Damage;
	Damage.sbTargetFlag = sbTargetFlag;
	Damage.ulDamage		= ulDamage;
	Damage.ulIndex		= ulClientIndex;
	Damage.fAlpha		= 0.0f;	
	Damage.bDamaged		= bDamaged;
	Damage.dStartTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();
	
	m_qDamage.push_back( Damage );	
}


//------------------------------------------------------------------------------
// CUIManager::ShowDamage
// Explain:  Å¸°Ý ÀÌÆåÆ®°¡ ÅÍÁú ¶§ ÇØ´ç µ¥¹ÌÁö Á¤º¸¸¦ »Ñ¸°´Ù.
// Date : 2005-11-16,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::ShowDamage( ULONG ulClientIndex )
{	
	CTString strSysMessage;	
	if( m_qDamage.empty() )
		return;
	
	DAMAGE_deque::iterator iterBegin = m_qDamage.begin();
	DAMAGE_deque::iterator iterEnd = m_qDamage.end();
	DAMAGE_deque::iterator iter; 
	
	for( iter = iterBegin; iter != iterEnd; iter++ )
	{
//		if( (*iter).bVisible )	// È­¸é¿¡ º¸¿©Áö°í ÀÖÀ¸¸é ÆÐ½º 
//			continue;
		
		if( (*iter).ulIndex != ulClientIndex )	// ³ª¸¦ °ø°ÝÇÑ ¸ó½ºÅÍ°¡ ¾Æ´Ï¸é ÆÐ½º 
			continue;
		
		if (!(*iter).bVisible)
		{
			(*iter).bVisible = TRUE;
			(*iter).dStartTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();
		}
	}		
}


//------------------------------------------------------------------------------
// CUIManager::ClearDamageData
// Explain:  
// Date : 2005-11-16,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::ClearDamageData( )
{
	if( !m_qDamage.empty() )
		m_qDamage.clear();
}

//------------------------------------------------------------------------------
// CUIManager::ShowDamageList
// Explain:  ³»°¡ °ø°ÝÇÏ´Â ¸ó½ºÅÍ À§¿¡ µ¥¹ÌÁö Ç¥½Ã 
// * ÀÌ¸§ Ç¥½Ã ÇÏ´Â °÷¿¡¼­ °°ÀÌ Ã³¸®Èù´Ù.
// Date : 2005-11-16,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::ShowDamageList( FLOAT3D vPopupPos, FLOAT fPopupZ, ULONG ulClientIndex )
{
	if( m_qDamage.empty() )
		return;

	DAMAGE_deque::iterator iterDamage;

	int qDamageSize = m_qDamage.size();
	int nCount;
	int nIdx = 0, nOldIndex = -1;
	DOUBLE dbOldStart = 0.0;

	for (nCount=0, iterDamage = m_qDamage.begin(); nCount < qDamageSize; ++nCount)
	{
		DAMAGE tmpDamage = (*iterDamage);

		if (ulClientIndex == tmpDamage.ulIndex)
		{
			DOUBLE dDelayTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds() - tmpDamage.dStartTime;

			if (tmpDamage.bVisible)
			{
				if (dDelayTime > SHOW_DAMAGE_TIME)
				{
					iterDamage = m_qDamage.erase(iterDamage);
					continue;
				}
				else
				{
					if (nOldIndex == tmpDamage.ulIndex && (tmpDamage.dStartTime - dbOldStart) < 300)
					{
						++nIdx;
					}
					else
					{
						nOldIndex = tmpDamage.ulIndex;
						dbOldStart = tmpDamage.dStartTime;
						nIdx = 0;
					}

					RenderDamage(nIdx, iterDamage, dDelayTime, vPopupPos(1), vPopupPos(2));
				}
			}
		}
	
		++iterDamage;
	}
}

//------------------------------------------------------------------------------
// CUIManager::RenderDamage
// Explain:  µ¥¹ÌÁö Ç¥½Ã ·çÆ¾ ( ÁÖ·Î ½Ã°£¿¡ µû¸¥ 2D °ú¸¦ Á¦¤Ã¾î ÇÑ´Ù.
// Date : 2005-11-16,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::RenderDamage( int nIndex, DAMAGE_deque::iterator iter, DOUBLE dDealyTime, int nX, int nY )
{
	const float fMoveSpeed		= 1.0f;		// After ÀÌµ¿ ½ºÇÇµå
	const float fReSize			= 0.2f;		// After Ãà¼Ò ºñÀ² 
	const float fMiddleTime		= 200.0f;	// After±îÁöÀÇ ½Ã°£
	const float fShowHeight		= 70.0f;	// After±îÁöÀÇ ³ôÀÌ 
	const float fDefaultSize	= 1.5f;		// ±âº» Å©±â 
	const float fOffsetY		= 10;		// ½ÃÀÛ Y À§Ä¡ 

	float fTimeRatio = dDealyTime / fMiddleTime;

	INT			nPosX, nPosY;
	COLOR		colBlend, colBlendText;
	COLOR		colDefault = 0xFFFFFF00;
		
	// ½Ã°£¿¡ µû¸¥ À§Ä¡/¾ËÆÄ/Å©±â Á¶Á¤
	if( dDealyTime <= fMiddleTime )
	{
		(*iter).fY = fShowHeight * fTimeRatio;
		(*iter).fAlpha = 1.0f * fTimeRatio;

		if (nIndex > 0)
		{
			if (nIndex % 2)
				(*iter).fX = (fOffsetY * 2.f);
			else
				(*iter).fX = (fOffsetY * 2.f);

			(*iter).fY -= (fOffsetY * 1.5f) * nIndex;
		}

		//LOG_DEBUG("RenderDamage : idx(%d) score(%d)", nIndex, (*iter).ulDamage);
	}
	else
	{
		(*iter).fY += fMoveSpeed;
		(*iter).fAlpha = 1.0f - ( ( dDealyTime - fMiddleTime ) / ( SHOW_DAMAGE_TIME - fMiddleTime ) ) ;
	}

	(*iter).fSize = fDefaultSize - ( fReSize * ( dDealyTime / SHOW_DAMAGE_TIME ) ) ;

	// Ãâ·Â À§Ä¡ ¼³Á¤
	nPosX = nX - (*iter).fX;
	nPosY = nY - (*iter).fY + fOffsetY;

	// Alpha Ã³¸® 
	if( (*iter).fAlpha < 0.0f ) (*iter).fAlpha = 0.0f;
		
	UBYTE ubAlpha = ( UBYTE( (*iter).fAlpha * 0xFF ) );

	if( (*iter).bDamaged )	// ³»°¡ °ø°ÝÀ» ¹Þ´Â´Ù¸é ºÓÀº »ö °è¿­ 
	{
		colDefault = ATTACKED_COLOR;
	}
	
	colBlend = colDefault | ubAlpha;
	colBlendText = 0xFFFFFF00 | ubAlpha;

	
	// µ¥¹ÌÁö Å¸ÀÔ¿¡ µû¸¥ Ãß°¡ ÀÌ¹ÌÁö 
	switch( (*iter).sbTargetFlag )
	{
		case HITTYPE_MISS:
			DrawText( nPosX, nPosY, ST_MISS, colBlendText, (*iter).fSize );		
			return; // Miss´Â µ¥¹ÌÁö ¼öÄ¡¸¦ Ç¥½ÃÇÏÁö ¾Ê´Â´Ù.
		
		case HITTYPE_CRITICAL:// Å©¸®Æ¼ÄÃ	
			DrawText( nPosX - 20, nPosY - 20, ST_CRITICAL, colBlendText, (*iter).fSize );
			nPosX += 35;
			break;

		case HITTYPE_DEADLY: // µ¥µé¸®
			DrawText( nPosX - 20, nPosY - 20, ST_DEADLY, colBlendText, (*iter).fSize );
			nPosX += 35;
			break;
	}
		
	DrawNumber( nPosX, nPosY, (*iter).ulDamage, colBlend, (*iter).fSize ); 
}


//------------------------------------------------------------------------------
// CUIManager::DrawTex
// Explain:  µ¥¹ÌÁö Å¸ÀÔ¿¡ µû¸¥ Ãß°¡ ÀÌ¹ÌÁö (Text)
// Date : 2005-11-17,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::DrawText( int nX, int nY, SBYTE sbTargetFlag, COLOR colColor, FLOAT fRatio )
{
	UIRectUV rtShowText	=	m_rtShowText[sbTargetFlag];
	UIRect	rcShowText	=	m_rcShowText[sbTargetFlag];

	float fWidth = rcShowText.GetWidth();
	float fHieght = rcShowText.GetHeight();

	fWidth *= fRatio;
	fHieght *= fRatio;
	
	nX -= ( fWidth / 2 );
	
	GetDrawPort()->AddTexture( nX, nY, nX + fWidth ,nY + fHieght,
							rtShowText.U0, rtShowText.V0, rtShowText.U1, rtShowText.V1,
							colColor );
}


//------------------------------------------------------------------------------
// CUISiegeWarfare::DrawNumber
// Explain:  Ðåíäåð öèôð äëÿ îòîáðàæåíèÿ óðîíà(îñòàëüíîå ïîêà íå èçâåñòíî)
// Date : 2005-06-28,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::DrawNumber( int nX, int nY, int nNumber, COLOR colColor, FLOAT fRatio )
{
	static int nSpacing = 7;	// Èíòåðâàë ìåæäó Íîìåð

	UIRectUV rtNumber;
	
	BOOL bEnd = TRUE;
	CTString strNumber;
	strNumber.PrintF( "%d", nNumber );
	int nLength = strNumber.Length();
	int nUnitNumber;		
	
	float fWidth = m_rcNumber.GetWidth();
	float fHieght = m_rcNumber.GetHeight();
	
	fWidth	*= fRatio;
	fHieght *= fRatio;
	
	nX -= ( nLength * fWidth ) / 2;

	for( int i = 0; i < nLength; i++ )
	{
		char cNumber[2] = { strNumber[i] ,  0 };
		nUnitNumber = atoi( cNumber );

		rtNumber = m_rtNumber[nUnitNumber];
		
		GetDrawPort()->AddTexture( nX, nY, nX + fWidth ,nY + fHieght,
							rtNumber.U0, rtNumber.V0, rtNumber.U1, rtNumber.V1,
							colColor );
		if (nUnitNumber == 1 || nUnitNumber == 4)
			nX += (m_rcNumber.GetWidth() - 2);
		else
			nX += ( m_rcNumber.GetWidth() + nSpacing );
	}
}


// ----------------------------------------------------------------------------
// Name : GetClassOfItem()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::GetClassOfItem( CItemData* pItemData, CTString &strClass )
{
	CTString	strTemp = CTString( "" );
	
	for(int i = 0; i < (TOTAL_JOB); ++i)
	{
		if(pItemData->CanUse(i))
		{
			strTemp += CJobInfo::getSingleton()->GetName(i);
			strTemp += CTString(" ");
		}
	}

	strClass = strTemp;
}


// ----------------------------------------------------------------------------
// Name : IsPetPlus()
// Desc :
// ----------------------------------------------------------------------------
BOOL CUIManager::IsPet(CItemData* pItemData)
{
	if (pItemData == NULL)
		return FALSE;

	if(pItemData->GetType() == CItemData::ITEM_ACCESSORY && pItemData->GetSubType() == CItemData::ACCESSORY_PET ) return TRUE;
	
	return FALSE;
}
BOOL CUIManager::IsWildPet(CItemData* pItemData)
{
	if (pItemData == NULL)
		return FALSE;

	if(pItemData->GetType() == CItemData::ITEM_ACCESSORY && pItemData->GetSubType() == CItemData::ACCESSORY_WILDPET ) return TRUE;
	
	return FALSE;
}

BOOL CUIManager::checkName(CTString strMsg, int chkType)
{
	CTString strTitle;
	CUIMsgBox_Info	MsgBoxInfo;


	if( chkType == 0) // Ä³¸¯ ÀÌ¸§ º¯°æ½Ã
	{
		strTitle = _S(191,"È®ÀÎ");

		if(strMsg.Length()<MIN_NAME_SIZE)
		{			
			strMsg	 = _S(433,"Ä³¸¯ÅÍ ÀÌ¸§ÀÌ ³Ê¹« Âª½À´Ï´Ù.\n(ÇÑ±Û 2~8ÀÚ, ¿µ¹® 4~16ÀÚ)");
			MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_OK,UI_NONE,MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			CreateMessageBox(MsgBoxInfo);
			return FALSE;
		}
		
		if(strMsg.Length()>MAX_MY_NAME_SIZE )
		{
			strMsg	 = _S(434,"Ä³¸¯ÅÍ ÀÌ¸§ÀÌ ³Ê¹« ±é´Ï´Ù.\n(ÇÑ±Û 2~8ÀÚ, ¿µ¹® 4~16ÀÚ)");
			MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_OK,UI_NONE,MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			CreateMessageBox(MsgBoxInfo);
			return FALSE;
		}
				
		if(_UIFilteringCharacter.Filtering((char *)((const char *)strMsg)))
		{
			strMsg	 = _S( 437, "¹®Àå¿¡ ±ÝÁöµÈ ´Ü¾î°¡ Æ÷ÇÔµÇ¾î ÀÖ½À´Ï´Ù."); 
			MsgBoxInfo.SetMsgBoxInfo(strTitle, UMBS_OK,UI_NONE, MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			CreateMessageBox(MsgBoxInfo);
			return FALSE;
		}
	
		// °ø¹é Ã¼Å©.		
		for(const char *chr = strMsg.str_String; *chr != 0; chr++)
		{
			if( (*chr) == ' ' || (*chr) == '\t' || (*chr) == '\n' || (*chr) == '\r' || 
				(*chr) == '%' || (*chr) == '#' || (*chr) == '&' || (*chr) == '?' || (*chr) == '+' || (*chr) == '=' )
			{
				CloseMessageBox(MSGCMD_CREATE_ERROR);
				CUIMsgBox_Info	MsgBoxInfo;
				MsgBoxInfo.SetMsgBoxInfo( strTitle, UMBS_OK,
					UI_NONE, MSGCMD_BAN_NAME );
				CTString	strMsg = _S( 146, "Ä³¸¯ÅÍ¸í¿¡ °ø¹éÀÌ³ª Æ¯Á¤¹®ÀÚ´Â µé¾î°¥ ¼ö ¾ø½À´Ï´Ù." );
				MsgBoxInfo.AddString( strMsg );
				CreateMessageBox( MsgBoxInfo );
				
				return FALSE;
			}

			if( !((*chr) >= 48 && (*chr) <=57)  //! 0 ~ 9
				&& !((*chr) >= 65 && (*chr) <=90) // ! A ~ Z 
				&& !((*chr) >= 97 && (*chr) <=122) // ! a ~ z 
				)
			{
			#if defined(G_USA) || defined(G_BRAZIL) || defined(G_GERMAN) || defined(G_EUROPE3) || defined(G_EUROPE2) || defined(G_NETHERLANDS)

				CloseMessageBox(MSGCMD_CREATE_ERROR);
				MsgBoxInfo.SetMsgBoxInfo( strTitle, UMBS_OK,
					UI_CREATE_CHAR, MSGCMD_CREATE_ERROR );
				CTString	strMessage = _S(2980, "¾ÆÀÌµð´Â ¿µ¹®°ú ¼ýÀÚ¸¸ Çã¿ëµË´Ï´Ù." );
				MsgBoxInfo.AddString( strMessage );
				CreateMessageBox( MsgBoxInfo );
				return FALSE;

			#endif

			}


			//if(g_iCountry == RUSSIA)
			#if defined G_RUSSIA
			{
				// [100510: selo] LC-RU-P20100504-006
				// http://en.wikipedia.org/wiki/Windows-1251 Âü°íÇÏ¿© º¯°æ
				if( !((*chr) >= 48 && (*chr) <= 57 )
					&& !((*chr) >= -64 && (*chr) <= -1)
					&& !((*chr) == -88)
					&& !((*chr) == -72)	)				
				{
					CloseMessageBox(MSGCMD_CREATE_ERROR);
					MsgBoxInfo.SetMsgBoxInfo( strTitle, UMBS_OK,
						UI_CREATE_CHAR, MSGCMD_CREATE_ERROR );
					CTString	strMessage = _S(2980, "¾ÆÀÌµð´Â ¿µ¹®°ú ¼ýÀÚ¸¸ Çã¿ëµË´Ï´Ù." );
					MsgBoxInfo.AddString( strMessage );
					CreateMessageBox( MsgBoxInfo );
					return FALSE;
				}
			}
			#endif
		}
		
	} // Ä³¸¯ÀÌ¸§ º¯°æ½Ã
	else if( chkType == 1) // ±æµåÀÌ¸§ º¯°æ½Ã
	{
		strTitle = _S(191,"È®ÀÎ");
		if(strMsg.Length()<MIN_NAME_SIZE)
		{
			strMsg	 = _S(882,"±æµå ÀÌ¸§ÀÌ ³Ê¹« Âª½À´Ï´Ù.\n(ÇÑ±Û 2ÀÚÀÌ»ó, ¿µ¹® 4ÀÚÀÌ»ó)");
			MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_OK,UI_NONE,MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			CreateMessageBox(MsgBoxInfo);
			return FALSE;

		}

		if(strMsg.Length()>MAX_GUILD_NAME_SIZE) 
		{
			strMsg	 =_S( 2143,  "±æµå ÀÌ¸§ÀÌ ³Ê¹« ±é´Ï´Ù \n(ÇÑ±Û 2~8ÀÚ ¿µ¹® 4~16ÀÚ ÀÔ´Ï´Ù)" );		
			MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_OK,UI_NONE,MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			CreateMessageBox(MsgBoxInfo);
			return FALSE; 
		}
		if(_UIFilteringCharacter.Filtering((char *)(const char *)strMsg))
		{
			strMsg	 = _S( 437, "¹®Àå¿¡ ±ÝÁöµÈ ´Ü¾î°¡ Æ÷ÇÔµÇ¾î ÀÖ½À´Ï´Ù."); 
			MsgBoxInfo.SetMsgBoxInfo(strTitle, UMBS_OK,UI_NONE, MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			CreateMessageBox(MsgBoxInfo);
			return FALSE;
		}
	
		// °ø¹é Ã¼Å©.		
		for(const char *chr = strMsg.str_String; *chr != 0; chr++)
		{
			/*
			if( (*chr) == ' ' || (*chr) == '\t' || (*chr) == '\n' || (*chr) == '\r' || 
				(*chr) == '%' || (*chr) == '#' || (*chr) == '&' || (*chr) == '?' || (*chr) == '+' || (*chr) == '=' ||
				(g_iCountry == HONGKONG && !GetCreateChar()->CheckCharacterHK(chr)))
			{
				CloseMessageBox(MSGCMD_CREATE_ERROR);
				CUIMsgBox_Info	MsgBoxInfo;
				MsgBoxInfo.SetMsgBoxInfo( strTitle, UMBS_OK,
					UI_NONE, MSGCMD_BAN_NAME );
				CTString	strMsg = _S( 883, "±æµå ÀÌ¸§¿¡ Àß¸øµÈ ¹®ÀÚ°¡ Æ÷ÇÔµÇ¾î ÀÖ½À´Ï´Ù." );
				MsgBoxInfo.AddString( strMsg );
				CreateMessageBox( MsgBoxInfo );
				
				return FALSE;
			}
			/**/

			if( (*chr) == ' ' || (*chr) == '\t' || (*chr) == '\n' || (*chr) == '\r' || 
				(*chr) == '%' || (*chr) == '#' || (*chr) == '&' || (*chr) == '?' || (*chr) == '+' || (*chr) == '=' )
			{
				CloseMessageBox(MSGCMD_CREATE_ERROR);
				CUIMsgBox_Info	MsgBoxInfo;
				MsgBoxInfo.SetMsgBoxInfo( strTitle, UMBS_OK,
					UI_NONE, MSGCMD_BAN_NAME );
				CTString	strMsg = _S( 883, "±æµå ÀÌ¸§¿¡ Àß¸øµÈ ¹®ÀÚ°¡ Æ÷ÇÔµÇ¾î ÀÖ½À´Ï´Ù." );
				MsgBoxInfo.AddString( strMsg );
				CreateMessageBox( MsgBoxInfo );
				
				return FALSE;
			}

			/*
			// ¸»·¹ÀÌ½Ã¾Æ °³¸íÄ«µå »ç¿ë½Ã ¿µ¹®¼ýÀÚ¸¸ °¡´ÉÇÏ°Ô
			if( !((*chr) >= 48 && (*chr) <=57)  //! 0 ~ 9
				&& !((*chr) >= 65 && (*chr) <=90) // ! A ~ Z 
				&& !((*chr) >= 97 && (*chr) <=122) // ! a ~ z 
				&& ( g_iCountry == MALAYSIA || g_iCountry == USA || g_iCountry == BRAZIL || g_iCountry == GERMANY 
					|| g_iCountry == SPAIN || g_iCountry == FRANCE || g_iCountry == POLAND || g_iCountry == MEXICO 
					|| g_iCountry == ITALY || g_iCountry == TURKEY || g_iCountry == NETHERLANDS) )//FRANCE_SPAIN_CLOSEBETA_NA_20081124
			{
				CloseMessageBox(MSGCMD_CREATE_ERROR);
				CUIMsgBox_Info	MsgBoxInfo;
				MsgBoxInfo.SetMsgBoxInfo( strTitle, UMBS_OK,
					UI_CREATE_CHAR, MSGCMD_CREATE_ERROR );
				CTString	strMessage = _S(3113, "±æµå ÀÌ¸§Àº ¿µ¹®°ú ¼ýÀÚ¸¸ Çã¿ëÇÕ´Ï´Ù." );
				MsgBoxInfo.AddString( strMessage );
				CreateMessageBox( MsgBoxInfo );
				return FALSE;

			}
			*/
			// ¸»·¹ÀÌ½Ã¾Æ °³¸íÄ«µå »ç¿ë½Ã ¿µ¹®¼ýÀÚ¸¸ °¡´ÉÇÏ°Ô
			if( !((*chr) >= 48 && (*chr) <=57)  //! 0 ~ 9
				&& !((*chr) >= 65 && (*chr) <=90) // ! A ~ Z 
				&& !((*chr) >= 97 && (*chr) <=122) // ! a ~ z 
				)//FRANCE_SPAIN_CLOSEBETA_NA_20081124
			{
				#if defined(G_USA) || defined(G_BRAZIL) || defined(G_GERMAN) || defined(G_EUROPE3) || defined(G_EUROPE2) || defined(G_NETHERLANDS)
				CloseMessageBox(MSGCMD_CREATE_ERROR);
				CUIMsgBox_Info	MsgBoxInfo;
				MsgBoxInfo.SetMsgBoxInfo( strTitle, UMBS_OK,
					UI_CREATE_CHAR, MSGCMD_CREATE_ERROR );
				CTString	strMessage = _S(3113, "±æµå ÀÌ¸§Àº ¿µ¹®°ú ¼ýÀÚ¸¸ Çã¿ëÇÕ´Ï´Ù." );
				MsgBoxInfo.AddString( strMessage );
				CreateMessageBox( MsgBoxInfo );
				return FALSE;
				#endif
			}
			
			//if(g_iCountry == RUSSIA)
			#if defined G_RUSSIA
			{
				// [100510: selo] LC-RU-P20100504-006
				if( !((*chr) >= 48 && (*chr) <= 57 )
					&& !((*chr) >= -64 && (*chr) <= -1)
					&& !((*chr) == -88)
					&& !((*chr) == -72)	)
				{
					CloseMessageBox(MSGCMD_CREATE_ERROR);
					MsgBoxInfo.SetMsgBoxInfo( strTitle, UMBS_OK,
						UI_CREATE_CHAR, MSGCMD_CREATE_ERROR );
					CTString	strMessage = _S(2980, "¾ÆÀÌµð´Â ¿µ¹®°ú ¼ýÀÚ¸¸ Çã¿ëµË´Ï´Ù." );
					MsgBoxInfo.AddString( strMessage );
					CreateMessageBox( MsgBoxInfo );
					return FALSE;
				}
			}
			#endif
		}

	}
	//ÆêÀÌ¸§ º¯°æ added by sam 11/01/03
	else if ( 2 == chkType )
	{
		strTitle = _S(191,"È®ÀÎ");
		if(strMsg.Length()<1)
		{
			strMsg	 = _S(3257,"¿äÃ»ÇÑ ÀÛ¾÷ÀÌ ½ÇÆÐ ÇÏ¿´½À´Ï´Ù.");
			MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_OK,UI_NONE,MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			CreateMessageBox(MsgBoxInfo);
			return FALSE;

		}

		if(strMsg.Length()>16) 
		{
			strMsg	 =_S( 3257,  "¿äÃ»ÇÑ ÀÛ¾÷ÀÌ ½ÇÆÐ ÇÏ¿´½À´Ï´Ù." );		
			MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_OK,UI_NONE,MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			CreateMessageBox(MsgBoxInfo);
			return FALSE; 
		}
		if(_UIFilteringCharacter.Filtering((char *)(const char *)strMsg))
		{
			strMsg	 = _S( 437, "¹®Àå¿¡ ±ÝÁöµÈ ´Ü¾î°¡ Æ÷ÇÔµÇ¾î ÀÖ½À´Ï´Ù."); 
			MsgBoxInfo.SetMsgBoxInfo(strTitle, UMBS_OK,UI_NONE, MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			CreateMessageBox(MsgBoxInfo);
			return FALSE;
		}
	
	
	
	
	
	
		// °ø¹é Ã¼Å©.		
		for (const char *chr = strMsg.str_String; *chr != 0; chr++)
		{
		/*if( (*chr) == ' ' || (*chr) == '\t' || (*chr) == '\n' || (*chr) == '\r' || 
				(*chr) == '%' || (*chr) == '#' || (*chr) == '&' || (*chr) == '?' || (*chr) == '+' || (*chr) == '=' ||
				(g_iCountry == HONGKONG && !GetCreateChar()->CheckCharacterHK(chr)))
			{
				CloseMessageBox(MSGCMD_CREATE_ERROR);
				CUIMsgBox_Info	MsgBoxInfo;
				MsgBoxInfo.SetMsgBoxInfo( strTitle, UMBS_OK,
					UI_NONE, MSGCMD_BAN_NAME );
				CTString	strMsg = _S( 3257, "¿äÃ»ÇÑ ÀÛ¾÷ÀÌ ½ÇÆÐ ÇÏ¿´½À´Ï´Ù." );
				MsgBoxInfo.AddString( strMsg );
				CreateMessageBox( MsgBoxInfo );
			return FALSE;
			}
			*/
			if( (*chr) == ' ' || (*chr) == '\t' || (*chr) == '\n' || (*chr) == '\r' || 
				(*chr) == '%' || (*chr) == '#' || (*chr) == '&' || (*chr) == '?' || (*chr) == '+' || (*chr) == '=' )
			{
				CloseMessageBox(MSGCMD_CREATE_ERROR);
				CUIMsgBox_Info	MsgBoxInfo;
				MsgBoxInfo.SetMsgBoxInfo( strTitle, UMBS_OK,
					UI_NONE, MSGCMD_BAN_NAME );
				CTString	strMsg = _S( 3257, "¿äÃ»ÇÑ ÀÛ¾÷ÀÌ ½ÇÆÐ ÇÏ¿´½À´Ï´Ù." );
				MsgBoxInfo.AddString( strMsg );
				CreateMessageBox( MsgBoxInfo );
				return FALSE;
			}

// ¸»·¹ÀÌ½Ã¾Æ °³¸íÄ«µå »ç¿ë½Ã ¿µ¹®¼ýÀÚ¸¸ °¡´ÉÇÏ°Ô
			/*
			if( !((*chr) >= 48 && (*chr) <=57)  //! 0 ~ 9
				&& !((*chr) >= 65 && (*chr) <=90) // ! A ~ Z 
				&& !((*chr) >= 97 && (*chr) <=122) // ! a ~ z 



				&& ( g_iCountry == MALAYSIA || g_iCountry == USA || g_iCountry == BRAZIL || g_iCountry == GERMANY 
					|| g_iCountry == SPAIN || g_iCountry == FRANCE || g_iCountry == POLAND || g_iCountry == MEXICO 
					|| g_iCountry == ITALY || g_iCountry == TURKEY || g_iCountry == NETHERLANDS) )//FRANCE_SPAIN_CLOSEBETA_NA_20081124
			{
				CloseMessageBox(MSGCMD_CREATE_ERROR);
				CUIMsgBox_Info	MsgBoxInfo;


				MsgBoxInfo.SetMsgBoxInfo( strTitle, UMBS_OK,
					UI_CREATE_CHAR, MSGCMD_CREATE_ERROR );
				CTString	strMessage = _S(3, "Àß¸øµÈ ¹®ÀÚ°¡ Æ÷ÇÔµÇ¾î ÀÖ½À´Ï´Ù." );



				MsgBoxInfo.AddString( strMessage );
				CreateMessageBox( MsgBoxInfo );
				return FALSE;

			}
			/**/
			if( !((*chr) >= 48 && (*chr) <=57)  //! 0 ~ 9
				&& !((*chr) >= 65 && (*chr) <=90) // ! A ~ Z 
				&& !((*chr) >= 97 && (*chr) <=122) // ! a ~ z 
				)//FRANCE_SPAIN_CLOSEBETA_NA_20081124
			{
			}

#if defined G_RUSSIA
			//if(g_iCountry == RUSSIA)
			{
				// [100510: selo] LC-RU-P20100504-006
				// http://en.wikipedia.org/wiki/Windows-1251 Âü°íÇÏ¿© º¯°æ
				if (!((*chr) >= 48 && (*chr) <= 57)
					&& !((*chr) >= -64 && (*chr) <= -1)
					&& !((*chr) == -88)
					&& !((*chr) == -72))
				{
					CloseMessageBox(MSGCMD_CREATE_ERROR);
					MsgBoxInfo.SetMsgBoxInfo( strTitle, UMBS_OK,
						UI_CREATE_CHAR, MSGCMD_CREATE_ERROR );
					CTString	strMessage = _S(3, "Àß¸øµÈ ¹®ÀÚ°¡ Æ÷ÇÔµÇ¾î ÀÖ½À´Ï´Ù." );
					MsgBoxInfo.AddString( strMessage );
					CreateMessageBox( MsgBoxInfo );
					return FALSE;
				}
			}
#endif
		}
	}
		if( chkType == 3) // Check name for other things (Dark)
	{
		strTitle = _S(191, "Confirm");

		if(strMsg.Length() < MIN_NAME_SIZE)
		{			
			strMsg	 = _S(433, "Name is too short.\nCharacter name must have 4-16 characters");
			MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_OK,UI_NONE,MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			CreateMessageBox(MsgBoxInfo);
			return FALSE;
		}
		
		if(strMsg.Length() > MAX_MY_NAME_SIZE )
		{
			strMsg	 = _S(434,"Name is too long.\nCharacter name must have 4-16 characters");
			MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_OK,UI_NONE,MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			CreateMessageBox(MsgBoxInfo);
			return FALSE;
		}
				
		if(_UIFilteringCharacter.Filtering((char *)((const char *)strMsg)))
		{
			strMsg	 = _S( 437, "There are inappropriate words in the sentence."); 
			MsgBoxInfo.SetMsgBoxInfo(strTitle, UMBS_OK,UI_NONE, MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			CreateMessageBox(MsgBoxInfo);
			return FALSE;
		}
	
		//Checking every symbol.		
		for(const char *chr = strMsg.str_String; *chr != 0; chr++)
		{
			if( (*chr) == ' ' || (*chr) == '\t' || (*chr) == '\n' || (*chr) == '\r' || 
				(*chr) == '%' || (*chr) == '&' || (*chr) == '?' )//|| (*chr) == '=' ) || (*chr) == '+'
			{
				CloseMessageBox(MSGCMD_CREATE_ERROR);
				CUIMsgBox_Info	MsgBoxInfo;
				MsgBoxInfo.SetMsgBoxInfo( strTitle, UMBS_OK,
					UI_NONE, MSGCMD_BAN_NAME );
				CTString	strMsg = _S( 146, "Do not enter spaces in the character name." );
				MsgBoxInfo.AddString( strMsg );
				CreateMessageBox( MsgBoxInfo );
				
				return FALSE;
			}

			// The list of available characters
			if( !((*chr) >= 48 && (*chr) <=57)  //! 0 ~ 9
				&& !((*chr) >= 65 && (*chr) <=90) // ! A ~ Z 
				&& !((*chr) >= 97 && (*chr) <=122) // ! a ~ z 
				&& (*chr) != 33 && (*chr) != 35 // ! #
				&& !((*chr) >= 40 && (*chr) <= 43) && (*chr) != 45 // () * +
				&& (*chr) != 60 && (*chr) != 62 && (*chr) != 64 // <> @
				&& (*chr) != 91 && (*chr) != 93 && (*chr) != 94 // [] ^
				)
			{
			#if defined(G_USA) || defined(G_BRAZIL) || defined(G_GERMAN) || defined(G_EUROPE3) || defined(G_EUROPE2) || defined(G_NETHERLANDS)

				CloseMessageBox(MSGCMD_CREATE_ERROR);
				MsgBoxInfo.SetMsgBoxInfo( strTitle, UMBS_OK,
					UI_CREATE_CHAR, MSGCMD_CREATE_ERROR );
				CTString	strMessage = _S(8112, "Only alphabetical letters, numbers and !#()*+<>@[]^ symbols are allowed in character names." );
				MsgBoxInfo.AddString( strMessage );
				CreateMessageBox( MsgBoxInfo );
				return FALSE;

			#endif

			}
		}	
	}
	/*if (chkType == 3) // Ä³¸¯ ÀÌ¸§ º¯°æ½Ã
	{
		strTitle = _S(191, "È®ÀÎ");

		if (strMsg.Length()<MIN_NAME_SIZE)
		{
			strMsg = _S(433, "Ä³¸¯ÅÍ ÀÌ¸§ÀÌ ³Ê¹« Âª½À´Ï´Ù.\n(ÇÑ±Û 2~8ÀÚ, ¿µ¹® 4~16ÀÚ)");
			MsgBoxInfo.SetMsgBoxInfo(strTitle, UMBS_OK, UI_NONE, MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			CreateMessageBox(MsgBoxInfo);
			return FALSE;
		}

		if (strMsg.Length()>MAX_MY_NAME_SIZE)
		{
			strMsg = _S(434, "Ä³¸¯ÅÍ ÀÌ¸§ÀÌ ³Ê¹« ±é´Ï´Ù.\n(ÇÑ±Û 2~8ÀÚ, ¿µ¹® 4~16ÀÚ)");
			MsgBoxInfo.SetMsgBoxInfo(strTitle, UMBS_OK, UI_NONE, MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			CreateMessageBox(MsgBoxInfo);
			return FALSE;
		}

		if (_UIFilteringCharacter.Filtering((char *)((const char *)strMsg)))
		{
			strMsg = _S(437, "¹®Àå¿¡ ±ÝÁöµÈ ´Ü¾î°¡ Æ÷ÇÔµÇ¾î ÀÖ½À´Ï´Ù.");
			MsgBoxInfo.SetMsgBoxInfo(strTitle, UMBS_OK, UI_NONE, MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			CreateMessageBox(MsgBoxInfo);
			return FALSE;
		}

		// °ø¹é Ã¼Å©.		
		for (const char *chr = strMsg.str_String; *chr != 0; chr++)
		{
			if ((*chr) == ' ' || (*chr) == '\t' || (*chr) == '\n' || (*chr) == '\r' ||
				(*chr) == '%' || (*chr) == '&' || (*chr) == '?' || (*chr) == '+')
			{
				CloseMessageBox(MSGCMD_CREATE_ERROR);
				CUIMsgBox_Info	MsgBoxInfo;
				MsgBoxInfo.SetMsgBoxInfo(strTitle, UMBS_OK,
					UI_NONE, MSGCMD_BAN_NAME);
				CTString	strMsg = _S(146, "Ä³¸¯ÅÍ¸í¿¡ °ø¹éÀÌ³ª Æ¯Á¤¹®ÀÚ´Â µé¾î°¥ ¼ö ¾ø½À´Ï´Ù.");
				MsgBoxInfo.AddString(strMsg);
				CreateMessageBox(MsgBoxInfo);

				return FALSE;
			}


			//if(g_iCountry == RUSSIA)
#if defined G_RUSSIA
			{
				// [100510: selo] LC-RU-P20100504-006
				// http://en.wikipedia.org/wiki/Windows-1251 Âü°íÇÏ¿© º¯°æ
				if (!((*chr) >= 48 && (*chr) <= 57) // 0-9
					&& !((*chr) >= -64 && (*chr) <= -1)
					&& !((*chr) == -88)
					&& !((*chr) == -72)
					&& !((*chr) >= 65 && (*chr) <= 90) // A-Z
					&& !((*chr) >= 97 && (*chr) <= 122) // a-z
					&& !((*chr) == 91) // [
					&& !((*chr) == 93) // ]
					&& !((*chr) == 36) // $
					&& !((*chr) == 35) // #
					&& !((*chr) == 40) // (
					&& !((*chr) == 41)
					&& !((*chr) == 94)
					&& !((*chr) == 126)
					&& !((*chr) == 42)) // )
				{
					CloseMessageBox(MSGCMD_CREATE_ERROR);
					MsgBoxInfo.SetMsgBoxInfo(strTitle, UMBS_OK,
						UI_CREATE_CHAR, MSGCMD_CREATE_ERROR);
					CTString	strMessage = _S(2980, "¾ÆÀÌµð´Â ¿µ¹®°ú ¼ýÀÚ¸¸ Çã¿ëµË´Ï´Ù.");
					MsgBoxInfo.AddString(strMessage);
					CreateMessageBox(MsgBoxInfo);
					return FALSE;
				}
			}
#endif
		}

	} // Ä³¸¯ÀÌ¸§ º¯°æ½Ã
	*/
	else if (chkType == 4) // ±æµåÀÌ¸§ º¯°æ½Ã
	{
		strTitle = _S(191, "È®ÀÎ");
		if (strMsg.Length()<MIN_NAME_SIZE)
		{
			strMsg = _S(882, "±æµå ÀÌ¸§ÀÌ ³Ê¹« Âª½À´Ï´Ù.\n(ÇÑ±Û 2ÀÚÀÌ»ó, ¿µ¹® 4ÀÚÀÌ»ó)");
			MsgBoxInfo.SetMsgBoxInfo(strTitle, UMBS_OK, UI_NONE, MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			CreateMessageBox(MsgBoxInfo);
			return FALSE;

		}

		if (strMsg.Length()>MAX_GUILD_NAME_SIZE)
		{
			strMsg = _S(2143, "±æµå ÀÌ¸§ÀÌ ³Ê¹« ±é´Ï´Ù \n(ÇÑ±Û 2~8ÀÚ ¿µ¹® 4~16ÀÚ ÀÔ´Ï´Ù)");
			MsgBoxInfo.SetMsgBoxInfo(strTitle, UMBS_OK, UI_NONE, MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			CreateMessageBox(MsgBoxInfo);
			return FALSE;
		}
		if (_UIFilteringCharacter.Filtering((char *)(const char *)strMsg))
		{
			strMsg = _S(437, "¹®Àå¿¡ ±ÝÁöµÈ ´Ü¾î°¡ Æ÷ÇÔµÇ¾î ÀÖ½À´Ï´Ù.");
			MsgBoxInfo.SetMsgBoxInfo(strTitle, UMBS_OK, UI_NONE, MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			CreateMessageBox(MsgBoxInfo);
			return FALSE;
		}

		// °ø¹é Ã¼Å©.		
		for (const char *chr = strMsg.str_String; *chr != 0; chr++)
		{

			if ((*chr) == ' ' || (*chr) == '\t' || (*chr) == '\n' || (*chr) == '\r' ||
				(*chr) == '%' || (*chr) == '&' || (*chr) == '?' || (*chr) == '+')
			{
				CloseMessageBox(MSGCMD_CREATE_ERROR);
				CUIMsgBox_Info	MsgBoxInfo;
				MsgBoxInfo.SetMsgBoxInfo(strTitle, UMBS_OK,
					UI_NONE, MSGCMD_BAN_NAME);
				CTString	strMsg = _S(883, "±æµå ÀÌ¸§¿¡ Àß¸øµÈ ¹®ÀÚ°¡ Æ÷ÇÔµÇ¾î ÀÖ½À´Ï´Ù.");
				MsgBoxInfo.AddString(strMsg);
				CreateMessageBox(MsgBoxInfo);

				return FALSE;
			}

			//if(g_iCountry == RUSSIA)
#if defined G_RUSSIA
			{
				// [100510: selo] LC-RU-P20100504-006
				if (!((*chr) >= 48 && (*chr) <= 57) // 0-9
					&& !((*chr) >= -64 && (*chr) <= -1)
					&& !((*chr) == -88)
					&& !((*chr) == -72)
					&& !((*chr) >= 65 && (*chr) <= 90) // A-Z
					&& !((*chr) >= 97 && (*chr) <= 122) // a-z
					&& !((*chr) == 91) // [
					&& !((*chr) == 93) // ]
					&& !((*chr) == 36) // $
					&& !((*chr) == 35) // #
					&& !((*chr) == 40) // (
					&& !((*chr) == 41)
					&& !((*chr) == 94)
					&& !((*chr) == 126)
					&& !((*chr) == 42)) // )
				{
					CloseMessageBox(MSGCMD_CREATE_ERROR);
					MsgBoxInfo.SetMsgBoxInfo(strTitle, UMBS_OK,
						UI_CREATE_CHAR, MSGCMD_CREATE_ERROR);
					CTString	strMessage = _S(2980, "¾ÆÀÌµð´Â ¿µ¹®°ú ¼ýÀÚ¸¸ Çã¿ëµË´Ï´Ù.");
					MsgBoxInfo.AddString(strMessage);
					CreateMessageBox(MsgBoxInfo);
					return FALSE;
				}
			}
#endif
		}

	}

	return TRUE;

}

void CUIManager::SetRareOption( CNetworkMessage *istr, CItems& rItem )
{
	SBYTE	sbOptionType;
	LONG	lOptionLevel;

	//·¹¾î ¿É¼Ç ÀÎµ¦½º
	(*istr) >> sbOptionType;
	(*istr) >> lOptionLevel;
	
	LONG iRareIndex = lOptionLevel;

	rItem.SetRareIndex(iRareIndex);

	//·¹¾î ¿É¼Ç Á¾·ù
	(*istr) >> sbOptionType;
	(*istr) >> lOptionLevel;
	
	WORD iRareOption = lOptionLevel;
	WORD wCBit =1;
	SBYTE sbOption =-1;
	for(int iBit=0; iBit<10; ++iBit)
	{
		if(iRareOption & wCBit)
		{
			CItemRareOption* pItem = CItemRareOption::getData(iRareIndex);

			if (pItem == NULL )
				continue;

			if (pItem->GetIndex() < 0)
				continue;

			int OptionType = pItem->rareOption[iBit].OptionIdx;
			int OptionLevel = pItem->rareOption[iBit].OptionLevel;
			
			rItem.SetOptionData( ++sbOption, OptionType, OptionLevel, ORIGIN_VAR_DEFAULT );
		}
		wCBit <<=1;
	}
}

void CUIManager::SetRareOption( UpdateClient::itemInfo* pInfo, CItems& rItem )
{
	if (pInfo == NULL)
		return;
	
	// option_level[0] rare_option index
	LONG iRareIndex = pInfo->option_level[0];
	rItem.SetRareIndex(iRareIndex);

	// option_level[1] bit mask
	WORD iRareOption = pInfo->option_level[1];
	WORD wCBit =1;
	SBYTE sbOption =-1;
	for(int iBit=0; iBit<10; ++iBit)
	{
		if(iRareOption & wCBit)
		{
			CItemRareOption* pItem = CItemRareOption::getData(iRareIndex);

			if (pItem == NULL )
				continue;

			if (pItem->GetIndex() < 0)
				continue;

			int OptionType = pItem->rareOption[iBit].OptionIdx;
			int OptionLevel = pItem->rareOption[iBit].OptionLevel;
			rItem.SetOptionData( ++sbOption, OptionType, OptionLevel, ORIGIN_VAR_DEFAULT );
		}
		wCBit <<=1;
	}
}


// WSS_MINIGAME_070422 ---------------------------------------------------------------------------->>
// For multilined string
void CUIManager::AddStringToList(CUIListBox* pListBox,CTString& tStr, INDEX iMaxChar, COLOR tColor,INDEX ilistCol)
{	
	// Get length of string
	INDEX	nLength = tStr.Length();
	if( nLength <= 0 )
		return;

	int		iPos;

	// wooss 051002
	//if(g_iCountry == THAILAND)
#if defined G_THAI
	{
		// Get length of string
		INDEX	nThaiLen = FindThaiLen(tStr);
		INDEX	nChatMax= (iMaxChar-1)*(_pUIFontTexMgr->GetFontWidth()+_pUIFontTexMgr->GetFontSpacing());
		
		// If length of string is less than max char
		if( nThaiLen <= nChatMax )
		{
			pListBox->AddString(ilistCol,tStr, tColor);
		}
		// Need multi-line
		else
		{
			// Check splitting position for 2 byte characters
			int		nSplitPos;
			BOOL	b2ByteChar = FALSE;
			for( iPos = 0; iPos < nLength; iPos++ )
			{
				if(nChatMax < FindThaiLen(tStr,0,iPos))
					break;
			}
			nSplitPos = iPos;

			// Split string
			CTString	strLeft,strRight;
			
			tStr.Split( nSplitPos, strLeft, strRight );
			pListBox->AddString(ilistCol,strLeft, tColor);
			AddStringToList(pListBox,strRight, iMaxChar, tColor, ilistCol);
		}
		
	}
	//else
	#else
	{
		// If length of string is less than max char
		if( nLength <= iMaxChar )
		{	
			// Check line character
			for( iPos = 0; iPos < nLength; iPos++ )
			{
				if( tStr[iPos] == '\n' || tStr[iPos] == '\r' )
					break;	
			}

			// Not exist
			if( iPos == nLength )
			{
				pListBox->AddString(ilistCol,tStr,tColor);
			}
			else
			{
				// Split string
				CTString	strTemp, strTemp2;
				tStr.Split(iPos, strTemp2, strTemp);
				pListBox->AddString(ilistCol, strTemp2, tColor);

				// Trim line character
				if( strTemp[0] == '\r' && strTemp[1] == '\n' )
					strTemp.TrimLeft( strTemp.Length() - 2 );
				else
					strTemp.TrimLeft( strTemp.Length() - 1 );

				AddStringToList(pListBox, strTemp, iMaxChar, tColor, ilistCol );
			}
		}
		// Need multi-line
		else
		{
			// Check splitting position for 2 byte characters
			int		nSplitPos = iMaxChar;
#if defined(G_RUSSIA)
			for( iPos=nSplitPos; iPos >=0; --iPos )
			{
				if( tStr[iPos] == ' ' )
				{
					nSplitPos = iPos;
					break;
				}
			}
#else
			BOOL	b2ByteChar = FALSE;
			for( iPos = 0; iPos < nSplitPos; iPos++ )
			{
				if( tStr[iPos] & 0x80 )
					b2ByteChar = !b2ByteChar;
				else
					b2ByteChar = FALSE;
			}

			if( b2ByteChar )
				nSplitPos--;
#endif
			// Check line character			
			for( iPos = 0; iPos < nSplitPos; iPos++ )
			{
				if( tStr[iPos] == '\n' || tStr[iPos] == '\r' )
					break;
			}

			// Not exist
			if( iPos == nSplitPos )
			{
				// Split string
				CTString	strTemp, strTemp2;
				tStr.Split( nSplitPos, strTemp2, strTemp );
				pListBox->AddString(ilistCol, strTemp2, tColor);

				// Trim space
				if( strTemp[0] == ' ' )
				{
					int	nTempLength = strTemp.Length();
					for( iPos = 1; iPos < nTempLength; iPos++ )
					{
						if( strTemp[iPos] != ' ' )
							break;
					}

					strTemp.TrimLeft( strTemp.Length() - iPos );
				}

				AddStringToList(pListBox, strTemp, iMaxChar, tColor, ilistCol );
			}
			else
			{
				// Split string
				CTString	strTemp, strTemp2;
				tStr.Split( iPos, strTemp2, strTemp );
				pListBox->AddString(ilistCol, strTemp2, tColor);

				// Trim line character
				if( strTemp[0] == '\r' && strTemp[1] == '\n' )
					strTemp.TrimLeft( strTemp.Length() - 2 );
				else
					strTemp.TrimLeft( strTemp.Length() - 1 );

				AddStringToList(pListBox, strTemp, iMaxChar, tColor, ilistCol );
			}
		
			/*
			// Check splitting position for 2 byte characters			
			int		nSplitPos = iMaxChar;
			BOOL	b2ByteChar = FALSE;
			for( int iPos = 0; iPos < nSplitPos; iPos++ )
			{
				if( tStr[iPos] & 0x80 )
					b2ByteChar = !b2ByteChar;
				else
					b2ByteChar = FALSE;
			}

			if( b2ByteChar )
				nSplitPos--;

			// Split string
			CTString	strLeft,strRight;
			
			tStr.Split( nSplitPos, strLeft, strRight );
			pListBox->AddString(ilistCol,strLeft,tColor);
			AddStringToList(pListBox,strRight, iMaxChar, tColor, ilistCol);
			*/

		}
	}
	#endif
}
// ------------------------------------------------------------------------------------------------<<

BOOL CUIManager::IsEnemy( void* pTarget, TARGET_TYPE eType, BOOL bSearch )
{
	INDEX iCha_Index =-1;
	INDEX iGuild_Index =-1;
	BOOL bLegit =FALSE;

	if (pTarget == NULL)
	{ return FALSE; }

	// rvrÁ¸ÀÌ°í
	if (_pNetwork->IsRvrZone())
	{	// ³» °á»ç´ë Å¸ÀÔ°ú Å¸°ÙÀÇ °á»ç´ë Å¸ÀÔÀÌ ´Ù¸£´Ù¸é Àû!!!!!!!!!!!!!!!
		if (_pNetwork->MyCharacterInfo.iSyndicateType != INFO()->GetTargetSyndiType())
			return TRUE;
		return FALSE;
	}

	switch(eType)
	{
		case CHARACTER:
			{
				if( bSearch )
				{// ¿©±â¼­ CharacterTargetÅ¬·¡½ºÀÇ ¼Ò¸êÀÚ°¡ È£Ãâ µÇ¸é ¾ÈµÈ´Ù.(ItemEffect ¼Ò¸êÀÚ±îÁö È£ÃâµÇ¹Ç·Î)
					CCharacterTarget* ptCharacterTarget = NULL;

					if (static_cast<CEntity*>(pTarget)->en_pCharacterTarget == NULL)
						return FALSE;

					ptCharacterTarget = (static_cast<CEntity*>(pTarget)->en_pCharacterTarget);
					iCha_Index = ptCharacterTarget->m_nIdxServer;
					iGuild_Index = ptCharacterTarget->cha_lGuildIndex;
					bLegit = ptCharacterTarget->cha_bLegit;
				}
				else
				{
					// safe code.
					//if(NULL == static_cast<CCharacterTarget*>(pTarget))
					if(NULL == pTarget)
					{
						return FALSE;
					}
					iCha_Index = (static_cast<CCharacterTarget*>(pTarget))->m_nIdxServer;
					iGuild_Index =(static_cast<CCharacterTarget*>(pTarget))->cha_lGuildIndex;
					bLegit =(static_cast<CCharacterTarget*>(pTarget))->cha_bLegit;
				}
			}
			break;
		case MOB:
			{
				CMobTarget* stMobTarget = NULL;

				if( bSearch )
				{
					if (NULL == static_cast<CEntity*>(pTarget)->en_pMobTarget)
						return FALSE;

					stMobTarget = (static_cast<CEntity*>(pTarget)->en_pMobTarget);
				}
				else
				{
					// safe code.
					//if(NULL == static_cast<CMobTarget*>(pTarget))
					if(NULL == pTarget)
						return FALSE;
					stMobTarget = static_cast<CMobTarget*>(pTarget);
				}

				if ( stMobTarget->IsTotem() )
					return FALSE;

				if( stMobTarget->mob_iOwnerIndex == _pNetwork->MyCharacterInfo.index )
					return FALSE;

				ObjectBase* pObject = ACTORMGR()->GetObject(eOBJ_CHARACTER, stMobTarget->mob_iOwnerIndex);

				if (pObject != NULL)
				{
					CCharacterTarget* pCharTarget = static_cast< CCharacterTarget* >(pObject);

					iCha_Index = pCharTarget->m_nIdxServer;
					iGuild_Index = pCharTarget->cha_lGuildIndex;
				}

				if( iCha_Index < 0 )
					return TRUE;
			}
			break;
		case NPC:
			return FALSE;
		case P1PET:
			{
				CPetTarget* ptPetTarget = NULL;

				if( bSearch)
				{
					if (static_cast<CEntity*>(pTarget)->en_pPetTarget == NULL)
						return FALSE;

					ptPetTarget = (static_cast<CEntity*>(pTarget)->en_pPetTarget);
				}
				else
				{
					// safe code.
					//if(NULL == static_cast<CPetTarget*>(pTarget))
					if(NULL == pTarget)
						return FALSE;

					ptPetTarget = (static_cast<CPetTarget*>(pTarget));
				}

				ObjectBase* pObject = ACTORMGR()->GetObject(eOBJ_CHARACTER, ptPetTarget->pet_OwnerIndex);

				if (pObject != NULL)
				{
					CCharacterTarget* pCharTarget = static_cast< CCharacterTarget* >(pObject);

					iCha_Index = pCharTarget->m_nIdxServer;
					iGuild_Index = pCharTarget->cha_lGuildIndex;
				}
			}
			break;
		case SUMMON:
			{
				CSlaveTarget* stSlaveTarget = NULL;

				if( bSearch )
				{
					if (static_cast<CEntity*>(pTarget)->en_pSlaveTarget == NULL)
						return FALSE;

					stSlaveTarget = (static_cast<CEntity*>(pTarget)->en_pSlaveTarget);
				}
				else
				{
					// safe code.
					//if(NULL == static_cast<CSlaveTarget*>(pTarget))
					if(NULL == pTarget)
						return FALSE;

					stSlaveTarget = (static_cast<CSlaveTarget*>(pTarget));
				}

				ObjectBase* pObject = ACTORMGR()->GetObject(eOBJ_CHARACTER, stSlaveTarget->slave_OwnerIndex);

				if (pObject != NULL)
				{
					CCharacterTarget* pCharTarget = static_cast< CCharacterTarget* >(pObject);

					iCha_Index = pCharTarget->m_nIdxServer;
					iGuild_Index = pCharTarget->cha_lGuildIndex;
				}
			}
			break;
		case WILDPET:
			{
				CWildPetTarget* ptPetTarget = NULL;

				if( bSearch)
				{
					if (static_cast<CEntity*>(pTarget)->en_pWildPetTarget == NULL)
						return FALSE;

					ptPetTarget = (static_cast<CEntity*>(pTarget)->en_pWildPetTarget);
				}
				else
				{
					// safe code.
					if(NULL == pTarget)
						return FALSE;

					ptPetTarget = static_cast< CWildPetTarget* >(pTarget);
				}

				ObjectBase* pObject = ACTORMGR()->GetObject(eOBJ_CHARACTER, ptPetTarget->m_nOwnerIndex);

				if (pObject != NULL)
				{
					CCharacterTarget* pCharTarget = static_cast< CCharacterTarget* >(pObject);

					iCha_Index = pCharTarget->m_nIdxServer;
					iGuild_Index = pCharTarget->cha_lGuildIndex;
				}
			}
			break;
		default:
			return FALSE;
	}

	//±æµå ÀüÅõ½Ã »ó´ë ±æµå¿øÀÌ¸é Àû!!!
	if( this->GetGuildBattle()->IsEnemy( iCha_Index) )
		return TRUE;

	//Á¤´ç¹æÀ§ »ó´ëÀÌ¸é Àû
	if( bLegit )
		return TRUE;

	const BOOL bIsDartanWar = GetSiegeWarfareNew()->GetWarState();
	const BOOL bIsMeracWar	 = _pUISWDoc->IsWar();

	//pTarget ÀÇ NULLÃ¼Å©´Â À§¿¡¼­ ¸ðµÎ Çß´Ù. ¸¸¾à Ã£Áö ¸øÇß´Ù¸é return FALSE;·Î ÀÌÇÏÀÇ pTarget°ªÀÌ NULL¾Æ´ÔÀ» º¸ÁõÇÑ´Ù.
	const SBYTE sbJoinFlagMerac = _pNetwork->MyCharacterInfo.sbJoinFlagMerac;
	const SBYTE sbJoinFlagDratan = _pNetwork->MyCharacterInfo.sbJoinFlagDratan;
	const UWORD sbAttributePos = _pNetwork->MyCharacterInfo.sbAttributePos;

	//ga_srvServer.srv_actCha[]¿¡ ÀÚ½ÅÀÇ Á¤º¸´Â ¾ø´Ù. µû¶ó¼­ °Ë»öÀÌ ¾ÈµÉ ¼ö ÀÖ´Ù.
	//¶§¸± ¼ö ÀÖ´Â ´ë»óÀ» Ã£°í ¸ø Ã£À¸¸é ¸ø ¶§¸°´Ù.
	SBYTE sbCharacterJoinFlagMerac = WCJF_NONE;
	SBYTE sbCharacterJoinFlagDratan = WCJF_NONE;
	UWORD sbCharAttributePos = MATT_UNWALKABLE;
	BOOL bIsCharacterInsideDratan = FALSE;

	ObjectBase* pObject = ACTORMGR()->GetObject(eOBJ_CHARACTER, iCha_Index);

	if (pObject != NULL)
	{
		CCharacterTarget* pTarget = static_cast< CCharacterTarget* >(pObject);

		sbCharacterJoinFlagMerac = pTarget->cha_sbJoinFlagMerac;
		sbCharacterJoinFlagDratan = pTarget->cha_sbJoinFlagDratan;
		sbCharAttributePos = pTarget->cha_sbAttributePos;
		bIsCharacterInsideDratan = CheckDratanWarInside( pTarget );
	}

#ifdef SIGEWAR_ATTACKRULE
	//ÇÇ½ºÁ¸¿¡¼± °ø°ÝÀº ´Ã ¾ÈµÈ´Ù.
	if(sbAttributePos & MATT_PEACE || sbCharAttributePos & MATT_PEACE)
	{
		return FALSE;
	}
	//PK ½Ã...
	//ÆÄÆ¼¿øÀÌ°Å³ª °°Àº ±æµå¿øÀÌ¸é Àû ¾Æ´Ô
	if( (GAMEDATAMGR()->GetPartyInfo()->IsPartyMember(iCha_Index)) && (GAMEDATAMGR()->GetPartyInfo()->IsExpedetionMember(iCha_Index)) && 
		(iGuild_Index == _pNetwork->MyCharacterInfo.lGuildIndex) && 
		_pNetwork->MyCharacterInfo.EntranceType != CURRENT_ENTER_PARTYCUBE)
	{
		return FALSE;
	}
	// ÁøÇàÁßÀÎ °ø¼ºÀü¿¡ Âü°¡ Çß´Â°¡?
	if( (bIsDartanWar && sbJoinFlagDratan != WCJF_NONE && sbCharacterJoinFlagDratan != WCJF_NONE) || 
		 (bIsMeracWar && sbJoinFlagMerac != WCJF_NONE&& sbCharacterJoinFlagMerac != WCJF_NONE) )
	{
		return TRUE;
	}
	// ³»°¡ °ø¼ºÀü¿¡ Âü¿©Çß´Ù¸é °ø¼ºÁö¿ª¿¡¼­´Â ¹«Á¶°Ç ¶§¸± ¼ö ÀÖ´Ù.
	else if( (bIsDartanWar && sbJoinFlagDratan != WCJF_NONE && sbCharAttributePos & MATT_WAR && bIsCharacterInsideDratan) ||
		(bIsMeracWar && sbJoinFlagDratan != WCJF_NONE && sbCharAttributePos & MATT_WAR && !bIsCharacterInsideDratan) )
	{
		return TRUE;
	}
	if( _pNetwork->MyCharacterInfo.pk_mode != CHA_PVP_STATE_PEACE )
	{
		return TRUE;
	}
#else //SIGEWAR_ATTACKRULE
		//PK ½Ã...
	if( _pNetwork->MyCharacterInfo.pk_mode != CHA_PVP_STATE_PEACE || 
		GetSiegeWarfareNew()->GetWarState() ) // WSS_DRATAN_SEIGEWARFARE 2007/08/30
	{
		//ÆÄÆ¼¿øµµ ¾Æ´Ï°í °°Àº ±æµå¿øµµ ¾Æ´Ï¸é Àû!!! [sora] ¿øÁ¤´ë Ã¼Å©Ãß°¡
		if( (!GAMEDATAMGR()->GetPartyInfo()->IsPartyMember(iCha_Index)) && ( !GAMEDATAMGR()->GetPartyInfo()->IsExpedetionMember(iCha_Index) ) &&
			(iGuild_Index != _pNetwork->MyCharacterInfo.lGuildIndex || _pNetwork->MyCharacterInfo.lGuildIndex<0) )
			return TRUE;
		else
			return FALSE;
	}
#endif //SIGEWAR_ATTACKRULE
	else 
		return FALSE;
}

void CUIManager::StartTargetEffect( SLONG slIndex, CEntity* penEntity, BOOL bEnemy )
{
	//ÀÌÆåÆ®°¡ Àû¿ëµÈ »óÅÂÀÏ ¶§...
	if( m_mapEG.find( slIndex ) != m_mapEG.end() )
	{
		//CEffectGroupÀÌ À¯È¿ÇÑ °ªÀÌ ¾Æ´Ï¸é...
		if( !CEffectGroupManager::Instance().IsValidCreated(m_mapEG[slIndex]) )
		{
			//map¿¡¼­ »èÁ¦
			m_mapEG.erase( slIndex );
		}
		else
		{
			//¿Ã¹Ù¸¥ »ö±òÀÇ ÀÌÆåÆ®°¡ Àû¿ëµÇ¾îÀÖÀ¸¸é ¸®ÅÏ
			if( m_mapEG[slIndex]->GetName() == std::string(bEnemy?"STATE_LED":"STATE_YELLOW") )
				return;

			//´Ù¸¥ »ö±òÀÇ ÀÌÆåÆ®°¡ Àû¿ëµÇ¾î ÀÖÀ¸¸é ÀÌÆåÆ® »èÁ¦
			StopTargetEffect( slIndex );
		}
	}

	//ÀÌÆåÆ® »ý¼º
	CEffectGroup *pEG = StartEffectGroup( bEnemy?"STATE_LED":"STATE_YELLOW"
						, &penEntity->en_pmiModelInstance->m_tmSkaTagManager
						,_pTimer->GetLerpedCurrentTick());

	if( pEG == NULL)
		return;

	//¸ðµ¨ÀÇ Ãæµ¹¹Ú½º Å©±â¿¡ ¸ÂÃç ÀÌÆåÆ® Å©±â Á¶Á¤
	FLOAT3D vBox = penEntity->en_pmiModelInstance->GetCollisionBoxMax()*3;
	vBox(1) *= penEntity->en_pmiModelInstance->mi_vStretch(1);
	vBox(2) *= penEntity->en_pmiModelInstance->mi_vStretch(2);
	vBox(3) *= penEntity->en_pmiModelInstance->mi_vStretch(3);

	((CMdlEffect*)(pEG->GetEffectKeyVector()[0].m_pCreatedEffect))->SetStretch(vBox);
	
	std::map<SLONG, CEffectGroup *>::value_type tmpVal( slIndex, pEG);
	m_mapEG.insert(tmpVal);
}

void CUIManager::StopTargetEffect( SLONG slIndex )
{
	if( m_mapEG.find( slIndex ) == m_mapEG.end() ) return;

	DestroyEffectGroup( m_mapEG[slIndex] );

	m_mapEG.erase( slIndex );
}

// ----------------------------------------------------------------------------
// Name : IsPlayInZone()
// Desc : [sora] ÀÎ½ºÅÏÆ®Á¸ ÇÃ·¹ÀÌÁßÀÎÁö Ã¼Å©
// ----------------------------------------------------------------------------
BOOL CUIManager::IsPlayInZone()
{
	return IsInstantZone(_pNetwork->MyCharacterInfo.zoneNo);
}

BOOL CUIManager::IsInstantZone(int nZone)
{
	return CZoneInfo::getSingleton()->GetRaidDungeon(nZone);
}

// WSS_SELECTIVE_UI_FUCNTION 2007/08/15 
// SELECTIVE UI ------------------------------------------------------------------------->>
void CUIManager::CloseSelectiveUI( int nUIidx )
{
	if ( nUIidx == -1 ) // Close Selective All
	{
		// Find message box and return result
		for( int iUI = UI_SELECTIVE_SHOW_START; iUI < UI_SELECTIVE_SHOW_END; iUI++ )
		{
			if( m_apUIs[iUI]->IsEnabled())
				RearrangeOrder(iUI,FALSE);
		}	
	}
	else 
	{
		if( m_apUIs[nUIidx]->IsEnabled())
				RearrangeOrder(nUIidx,FALSE);
	}
	

}

BOOL CUIManager::DoesUIExist( int nUIidx )
{
	// Find message box and return result
	if( m_apUIs[nUIidx]->IsEnabled() )
		return TRUE;
	return FALSE;
}

BOOL CUIManager::IsUIVisible(int nUIidx)
{
	if (m_apUIs[nUIidx]->IsVisible())
		return TRUE;
	return FALSE;
}

BOOL CUIManager::IsFocusAllEditBox()
{
	if (MSGBOXMGR()->IsEditBoxFocused())
		return TRUE;

	for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
	{
		if ( m_apUIs[iUI] == NULL)
			continue;

		if ( m_apUIs[iUI]->IsEditBoxFocused() )
			return TRUE;
	}
	return FALSE;
}
// ----------------------------------------------------------------------------
// Name : GetSubJobName()
// Desc : [ADD_SUBJOB] º¸Á¶ Á÷¾÷¸íÀ» °¡Á®¿Â´Ù
// ----------------------------------------------------------------------------
CTString CUIManager::GetSubJobName(SLONG slSubJobCode)
{
	switch( slSubJobCode )
	{
		case SUBJOB_MERCHANT:
			return m_strSubJobName[0];
	}

	return CTString("");
}

// ----------------------------------------------------------------------------
// Name : CheckSellerItem()
// Desc : [ADD_SUBJOB] seller Ã¼Å©µÈ ¾ÆÀÌÅÛ °¢ UI¿¡¼­ »ç¿ë °¡´É ¿©ºÎ È®ÀÎ
// ----------------------------------------------------------------------------
BOOL CUIManager::CheckSellerItem( UI_TYPE uiType, int flag )
{
	BOOL bMerchant = _pNetwork->IsMySubJob( SUBJOB_MERCHANT );

	if( ( flag & ITEM_FLAG_CASH ) ) //cash + seller
	{
		// [2010/10/14 : Sora] ¿äÃ»À¸·Î Á¶°Ç¿¡ ITEM_FLAG_COMPOSITE Ãß°¡
		if( ( flag & ITEM_FLAG_ABS ) || ( flag & ITEM_FLAG_COSTUME2 ) || ( flag & ITEM_FLAG_COMPOSITE ) )
		{
			return FALSE; // ±â°£Á¦ ÄÚ½ºÆ¬2 ¾ÆÀÌÅÛÀº ¹«Á¶°Ç FALSE
		}
		else // À§¿¡Ç×¸ñ Á¦¿ÜÇÑ ³ª¸ÓÁö
		{
			if( bMerchant ) 
				return ( uiType == UI_SHOP ? FALSE : TRUE ); // »óÀÎÀº »óÁ¡ÆÇ¸Å¸¦ Á¦¿ÜÇÏ°í´Â ¸ðµÎ °¡´É 
			else
			{
				// [2012/04/09 : Sora]  ITS 8019 ºÎÈ° ÁÖ¹®¼­ Ã¢°í º¸°üÀÌ °¡´ÉÇÑ ¹®Á¦¼öÁ¤ 
				if( flag & ITEM_FLAG_NO_STASH )
					return FALSE;
				else
					return ( uiType == UI_WAREHOUSE ? TRUE : FALSE ); // »óÀÎÀÌ ¾Æ´Ï¸é Ã¢°í¸¦ Á¦¿ÜÇÏ°í´Â ¸ðµÎ ºÒ°¡
			}
		}
	}
	else //not cash + seller
	{
		return ( uiType == UI_SHOP ? FALSE : TRUE );	// »óÁ¡ ÆÇ¸Å»©°í ¸ðµÎ °¡´É
	}

	return FALSE;
}

// ----------------------------------------------------------------------------
// Name : OpenSocketSystem()
// Desc : Player.es¿¡¼­ defineÀÌ Àû¿ëµÇÁö ¾Ê¾Æ¼­ UIManager¿¡¼­ defineÀ¸·Î È£Ãâ¿©ºÎ È®ÀÎ
// ----------------------------------------------------------------------------
void CUIManager::OpenSocketSystem(int iMobIndex, BOOL bHasQuest, FLOAT fX, FLOAT fZ )
{
	GetSocketSystem()->OpenSocketSystem( iMobIndex, NULL, fX, fZ );
}

// --------------------------------------------------------------------------------------<<
void CUIManager::AddItemInfoString(CTString &strItemInfo, COLOR colItemInfo ,int maxLine, int maxChars)
{
	if( m_nCurInfoLines >= maxLine )
		return ;

	// Get length of string
	INDEX	nLength = strItemInfo.Length();
	if( nLength <= 0 )
		return;

	// wooss 051002
	//if(g_iCountry == THAILAND)
#if defined G_THAI
	{
		// Get length of string
		int		iPos;
		INDEX	nThaiLen = FindThaiLen(strItemInfo);
		INDEX	nChatMax= (maxChars-1)*(_pUIFontTexMgr->GetFontWidth()+_pUIFontTexMgr->GetFontSpacing());
		if( nLength == 0 )
			return;
		// If length of string is less than max char
		if( nThaiLen <= nChatMax )
		{
			// Check line character
			for( iPos = 0; iPos < nLength; iPos++ )
			{
				if( strItemInfo[iPos] == '\n' || strItemInfo[iPos] == '\r' )
					break;	
			}

			// Not exist
			if (iPos == nLength)
			{
				m_strItemInfo[m_nCurInfoLines] = strItemInfo;
				m_colItemInfo[m_nCurInfoLines++] = colItemInfo;
			}
			else
			{
				// Split string
				CTString	strTemp;
				strItemInfo.Split( iPos, m_strItemInfo[m_nCurInfoLines], strTemp );
				m_colItemInfo[m_nCurInfoLines++] = colItemInfo;

				// Trim line character
				if( strTemp[0] == '\r' && strTemp[1] == '\n' )
					strTemp.TrimLeft( strTemp.Length() - 2 );
				else
					strTemp.TrimLeft( strTemp.Length() - 1 );

				AddItemInfoString(strTemp, colItemInfo, maxLine, maxChars);

			}
		}
		// Need multi-line
		else
		{
			// Check splitting position for 2 byte characters
			int		nSplitPos = maxChars;
			BOOL	b2ByteChar = FALSE;
			for( iPos = 0; iPos < nLength; iPos++ )
			{
				if(nChatMax < FindThaiLen(strItemInfo,0,iPos))
					break;
			}
			nSplitPos = iPos;

			// Check line character
			for( iPos = 0; iPos < nSplitPos; iPos++ )
			{
				if( strItemInfo[iPos] == '\n' || strItemInfo[iPos] == '\r' )
					break;
			}

			// Not exist
			if (iPos == nSplitPos)
			{
				// Split string
				CTString	strTemp;
				strItemInfo.Split( nSplitPos, m_strItemInfo[m_nCurInfoLines], strTemp );
				m_colItemInfo[m_nCurInfoLines++] = colItemInfo;

				// Trim space
				if( strTemp[0] == ' ' )
				{
					int	nTempLength = strTemp.Length();
					for( iPos = 1; iPos < nTempLength; ++iPos )
					{
						if( strTemp[iPos] != ' ' )
							break;
					}

					strTemp.TrimLeft( strTemp.Length() - iPos );
				}

				AddItemInfoString(strTemp, colItemInfo, maxLine, maxChars);
			}
			else
			{
				// Split string
				CTString	strTemp;
				strItemInfo.Split( nSplitPos, m_strItemInfo[m_nCurInfoLines], strTemp );
				m_colItemInfo[m_nCurInfoLines++] = colItemInfo;

				// Trim line character
				if( strTemp[0] == '\r' && strTemp[1] == '\n' )
					strTemp.TrimLeft( strTemp.Length() - 2 );
				else
					strTemp.TrimLeft( strTemp.Length() - 1 );

				AddItemInfoString(strTemp, colItemInfo, maxLine, maxChars);
			}
		}
		
	}
	 //else
#else	// G_THAI
	 {
#if defined(G_RUSSIA)
			{
				INDEX iStrSub = strItemInfo.FindSubstr("\n");
				if(iStrSub != -1)
				{
					CTString	strTemp, strTemp2;
					strTemp = strItemInfo;
					strTemp.str_String[iStrSub] = ' ';


					strTemp.Split( iStrSub+1, strTemp, strTemp2 );

					AddItemInfoString(strTemp, colItemInfo, maxLine, maxChars);
					AddItemInfoString(strTemp2, colItemInfo, maxLine, maxChars);
					return;
				}
			}
#endif//#if defined(RUSSIA)

		// If length of string is less than max char
#if defined(G_RUSSIA)
		int nMaxWidth = _pUIFontTexMgr->GetFontSpacing() + 34/*MAX_CASH_ITEMINFO_CHAR*/ *
					( _pUIFontTexMgr->GetFontWidth() + _pUIFontTexMgr->GetFontSpacing() );
		if( UTIL_HELP()->GetNoFixedWidth(_pfdDefaultFont, strItemInfo.str_String ) <= nMaxWidth )
#else
		if( nLength <= maxChars )
#endif
		{
			// Check line character
			int iPos;
			for( iPos = 0; iPos < nLength; iPos++ )
			{
				if( strItemInfo[iPos] == '\n' || strItemInfo[iPos] == '\r' )
					break;	
			}

			// Not exist
			if (iPos == nLength)
			{
				m_strItemInfo[m_nCurInfoLines] = strItemInfo;
				m_colItemInfo[m_nCurInfoLines++] = colItemInfo;
			}
			else
			{
				// Split string
				CTString	strTemp;
				strItemInfo.Split( iPos, m_strItemInfo[m_nCurInfoLines], strTemp );
				m_colItemInfo[m_nCurInfoLines++] = colItemInfo;

				// Trim line character
				if( strTemp[0] == '\r' && strTemp[1] == '\n' )
					strTemp.TrimLeft( strTemp.Length() - 2 );
				else
					strTemp.TrimLeft( strTemp.Length() - 1 );

				AddItemInfoString(strTemp, colItemInfo, maxLine, maxChars);
			}
		}
		// Need multi-line
		else
		{
			// Check splitting position for 2 byte characters
			int		iPos;

#if defined(G_RUSSIA)
			int nSplitPos = UTIL_HELP()->CheckNoFixedLength(_pfdDefaultFont, strItemInfo.str_String, nMaxWidth);

			for( int iPos=nSplitPos; iPos >=0; --iPos )
			{
				if( strItemInfo[iPos] == ' ' )
				{
					nSplitPos = iPos;
					break;
				}
			}
#else
			int		nSplitPos = maxChars;
			BOOL	b2ByteChar = FALSE;			
			for( iPos = 0; iPos < nSplitPos; iPos++ )
			{
				if( strItemInfo[iPos] & 0x80 )
					b2ByteChar = !b2ByteChar;
				else
					b2ByteChar = FALSE;
			}

			if( b2ByteChar )
				nSplitPos--;
#endif

			// Check line character			
			for( iPos = 0; iPos < nSplitPos; iPos++ )
			{
				if( strItemInfo[iPos] == '\n' || strItemInfo[iPos] == '\r' )
					break;
			}

			// Not exist
			if (iPos == nSplitPos)
			{
				// Split string
				CTString	strTemp;
				strItemInfo.Split( nSplitPos, m_strItemInfo[m_nCurInfoLines], strTemp );
				m_colItemInfo[m_nCurInfoLines++] = colItemInfo;

				// Trim space
				if( strTemp[0] == ' ' )
				{
					int	nTempLength = strTemp.Length();
					for( iPos = 1; iPos < nTempLength; iPos++ )
					{
						if( strTemp[iPos] != ' ' )
							break;
					}

					strTemp.TrimLeft( strTemp.Length() - iPos );
				}

				AddItemInfoString(strTemp, colItemInfo, maxLine, maxChars);
			}
			else
			{
				// Split string
				CTString	strTemp;
				strItemInfo.Split( iPos, m_strItemInfo[m_nCurInfoLines], strTemp );
				m_colItemInfo[m_nCurInfoLines++] = colItemInfo;

				// Trim line character
				if( strTemp[0] == '\r' && strTemp[1] == '\n' )
					strTemp.TrimLeft( strTemp.Length() - 2 );
				else
					strTemp.TrimLeft( strTemp.Length() - 1 );

				AddItemInfoString(strTemp, colItemInfo, maxLine, maxChars);
			}
		}
	}
	#endif
}

void CUIManager::RenderBtnInfo(CTextureData* texData, CUIButton& srcBtn, UIRectUV rtUV[], int nLength/* =34 */)
{
	if (texData == NULL)
	{
		return;
	}

	int tv_x =  srcBtn.GetAbsPosX() + BTN_SIZE+5/*SLOT_GAP*/;
	int tv_y =  srcBtn.GetAbsPosY();
	int tv_width = 25 - _pUIFontTexMgr->GetFontSpacing() + nLength/*MAX_CASH_ITEMINFO_CHAR*/ *
					( _pUIFontTexMgr->GetFontWidth() + _pUIFontTexMgr->GetFontSpacing() );
	int tv_height = 19 - _pUIFontTexMgr->GetLineSpacing() + m_nCurInfoLines * _pUIFontTexMgr->GetLineHeight();
	UIRect rtTmpInfo = UIRect(tv_x,tv_y,tv_x+tv_width,tv_y+tv_height);
	// Initialize texture data
	GetDrawPort()->InitTextureData(texData);

	// Item information region
	GetDrawPort()->AddTexture( rtTmpInfo.Left, rtTmpInfo.Top,
										rtTmpInfo.Left + 7, rtTmpInfo.Top + 7,
										rtUV[UV_UL].U0, rtUV[UV_UL].V0, rtUV[UV_UL].U1, rtUV[UV_UL].V1,
										0xFFFFFFFF );
	GetDrawPort()->AddTexture( rtTmpInfo.Left + 7, rtTmpInfo.Top,
										rtTmpInfo.Right - 7, rtTmpInfo.Top + 7,
										rtUV[UV_UM].U0, rtUV[UV_UM].V0, rtUV[UV_UM].U1, rtUV[UV_UM].V1,
										0xFFFFFFFF );
	GetDrawPort()->AddTexture( rtTmpInfo.Right - 7, rtTmpInfo.Top,
										rtTmpInfo.Right, rtTmpInfo.Top + 7,
										rtUV[UV_UR].U0, rtUV[UV_UR].V0, rtUV[UV_UR].U1, rtUV[UV_UR].V1,
										0xFFFFFFFF );
	GetDrawPort()->AddTexture( rtTmpInfo.Left, rtTmpInfo.Top + 7,
										rtTmpInfo.Left + 7, rtTmpInfo.Bottom - 7,
										rtUV[UV_ML].U0, rtUV[UV_ML].V0, rtUV[UV_ML].U1, rtUV[UV_ML].V1,
										0xFFFFFFFF );
	GetDrawPort()->AddTexture( rtTmpInfo.Left + 7, rtTmpInfo.Top + 7,
										rtTmpInfo.Right - 7, rtTmpInfo.Bottom - 7,
										rtUV[UV_MM].U0, rtUV[UV_MM].V0, rtUV[UV_MM].U1, rtUV[UV_MM].V1,
										0xFFFFFFFF );
	GetDrawPort()->AddTexture( rtTmpInfo.Right - 7, rtTmpInfo.Top + 7,
										rtTmpInfo.Right, rtTmpInfo.Bottom - 7,
										rtUV[UV_MR].U0, rtUV[UV_MR].V0, rtUV[UV_MR].U1, rtUV[UV_MR].V1,
										0xFFFFFFFF );
	GetDrawPort()->AddTexture( rtTmpInfo.Left, rtTmpInfo.Bottom - 7,
										rtTmpInfo.Left + 7, rtTmpInfo.Bottom,
										rtUV[UV_LL].U0, rtUV[UV_LL].V0, rtUV[UV_LL].U1, rtUV[UV_LL].V1,
										0xFFFFFFFF );
	GetDrawPort()->AddTexture( rtTmpInfo.Left + 7, rtTmpInfo.Bottom - 7,
										rtTmpInfo.Right - 7, rtTmpInfo.Bottom,
										rtUV[UV_LM].U0, rtUV[UV_LM].V0, rtUV[UV_LM].U1, rtUV[UV_LM].V1,
										0xFFFFFFFF );
	GetDrawPort()->AddTexture( rtTmpInfo.Right - 7, rtTmpInfo.Bottom - 7,
										rtTmpInfo.Right, rtTmpInfo.Bottom,
										rtUV[UV_LR].U0, rtUV[UV_LR].V0, rtUV[UV_LR].U1, rtUV[UV_LR].V1,
										0xFFFFFFFF );

	
	// Render item information
	int	nInfoX = rtTmpInfo.Left + 12;
	int	nInfoY = rtTmpInfo.Top + 8;
	for( int iInfo = 0; iInfo < m_nCurInfoLines; iInfo++ )
	{
		GetDrawPort()->PutTextEx( m_strItemInfo[iInfo], nInfoX, nInfoY, m_colItemInfo[iInfo] );
		nInfoY += _pUIFontTexMgr->GetLineHeight();
	}

	GetDrawPort()->FlushRenderingQueue();
	GetDrawPort()->EndTextEx();
}

// added by sam 11/03/02 ¹ø¿ªµÇÁö ¾ÊÀº ½ºÆ®¸µ ³Ñ¹ö º¸ÀÌ±â
//[sora] ¹Ì¹ø¿ª ½ºÆ®¸µ index Ç¥½Ã
void _stHELP1::SetNoTranslate()
{
	CUIManager* pUIManager = CUIManager::getSingleton();

	if( pUIManager->IsNotTranslated( TRANS_NAME, transFlag ) )
		m_strName.PrintF( "[%d] : help1 name", m_index );
	if( pUIManager->IsNotTranslated( TRANS_DESC, transFlag ) )
		m_strDesc.PrintF( "[%d] : help1 desc", m_index );
}

void _stHELP1::ClearNoTranslate()
{
	CUIManager* pUIManager = CUIManager::getSingleton();

	if( pUIManager->IsNotTranslated( TRANS_NAME, transFlag ) )
		m_strName.Clear();
	if( pUIManager->IsNotTranslated( TRANS_DESC, transFlag ) )
		m_strDesc.Clear();
}

// ·¹¾î ¿É¼ÇÀº ¿Ö vector...OTL ±×·¡¼­ T* »ç¿ë
template <typename T>
void SetNoTranslate( NO_TRANS_STRING_INDEX transList, T* array )
{
	NO_TRANS_STRING_INDEX_IT it = transList.begin();

	for ( ; it != transList.end(); ++it )
	{
		(*array)[(*it)].SetNoTranslate();
	}
}

template <typename T>
void SetNoTranslateNew( NO_TRANS_STRING_INDEX transList )
{
	NO_TRANS_STRING_INDEX_IT it = transList.begin();

	for ( ; it != transList.end(); ++it )
	{
		T* pData = T::getData((*it));

		if (pData != NULL)
			pData->SetNoTranslate();
	}
}

template <typename T>
void ClearNoTranslate( NO_TRANS_STRING_INDEX transList, T* array )
{
	NO_TRANS_STRING_INDEX_IT it = transList.begin();

	for ( ; it != transList.end(); ++it )
	{
		(*array)[(*it)].ClearNoTranslate();
	}
}

template <typename T>
void ClearNoTranslateNew( NO_TRANS_STRING_INDEX transList )
{
	NO_TRANS_STRING_INDEX_IT it = transList.begin();

	for ( ; it != transList.end(); ++it )
	{
		T* pData = T::getData((*it));

		if (pData != NULL)
			pData->ClearNoTranslate();
	}
}

// ¹Ì¹ø¿ª Ã£¾Æ³»±â. [10/13/2011 rumist]
void CUIManager::ShowNoTranslationString ()
{
	NO_TRANS_STRING_INDEX_IT it = m_vecNoTrans[CLIENT_STRING].begin();
	for ( ; it != m_vecNoTrans[CLIENT_STRING].end(); ++it )
	{		
		CTString tempString;
		tempString.PrintF("[%d] : client", *it );
		m_aStringData[(*it)] = tempString;
	}		

	SetNoTranslateNew<CItemData>( m_vecNoTrans[ITEM_STRING] );	
	SetNoTranslateNew<CMobData>( m_vecNoTrans[NPC_STRING] );	
	SetNoTranslateNew<CItemRareOption>( m_vecNoTrans[RARE_OPTION_STRING]);
	SetNoTranslateNew<CAction>( m_vecNoTrans[ACTION_STRING]);
	SetNoTranslateNew<COptionData>( m_vecNoTrans[OPTION_STRING]);
	SetNoTranslateNew<CSpecialSkill>( m_vecNoTrans[SPECIAL_SKILL_STRING]);
	SetNoTranslateNew<CMissionCase>( m_vecNoTrans[MONSTER_COMBO_STRING]);
	SetNoTranslateNew<CItemCollectionData>( m_vecNoTrans[ITEMCOLLECTION_STRING] );

	SetNoTranslate( m_vecNoTrans[SKILL_STRING], &_pNetwork->ga_World.wo_aSkillData );
	SetNoTranslate( m_vecNoTrans[HELP1_STRING], &m_aHelp1Data );

	CQuestSystem::Instance().SetNoTranslate( m_vecNoTrans[QUEST_STRING] );

	_pNetwork->GetAffinityData()->SetNoTranslate( m_vecNoTrans[AFFINITY_STRING] );

	GetChattingUI()->AddSysMessage( _s("No Translation : On"), SYSMSG_ERROR );
}

void CUIManager::HideNoTranslationString()
{
	NO_TRANS_STRING_INDEX_IT it = m_vecNoTrans[CLIENT_STRING].begin();
	for ( ; it != m_vecNoTrans[CLIENT_STRING].end(); ++it )
	{	
		m_aStringData[(*it)] = "";		
	}		
	
	ClearNoTranslateNew<CItemData>( m_vecNoTrans[ITEM_STRING] );	
	ClearNoTranslateNew<CMobData>( m_vecNoTrans[NPC_STRING] );	
	ClearNoTranslateNew<CItemRareOption>( m_vecNoTrans[RARE_OPTION_STRING]);
	ClearNoTranslateNew<CAction>( m_vecNoTrans[ACTION_STRING]);
	ClearNoTranslateNew<COptionData>( m_vecNoTrans[OPTION_STRING]);
	ClearNoTranslateNew<CSpecialSkill>( m_vecNoTrans[SPECIAL_SKILL_STRING]);
	ClearNoTranslateNew<CMissionCase>( m_vecNoTrans[MONSTER_COMBO_STRING]);	
	ClearNoTranslateNew<CItemCollectionData>( m_vecNoTrans[ITEMCOLLECTION_STRING] );

	ClearNoTranslate( m_vecNoTrans[SKILL_STRING], &_pNetwork->ga_World.wo_aSkillData );
	ClearNoTranslate( m_vecNoTrans[HELP1_STRING], &m_aHelp1Data );

	CQuestSystem::Instance().ClearNoTranslate( m_vecNoTrans[QUEST_STRING] );

	_pNetwork->GetAffinityData()->ClearNoTranslate( m_vecNoTrans[AFFINITY_STRING] );

	GetChattingUI()->AddSysMessage( _s("No Translation : Off"), SYSMSG_ERROR );
}

void CUIManager::ToggleNoTranslationString()
{
	static bool bShow = false;

	bShow = !bShow;

	if ( bShow )
		ShowNoTranslationString();
	else
		HideNoTranslationString();
}

void CUIManager::SetNoTranslationString( int transType, int index )
{
	m_vecNoTrans[transType].push_back( index );
}

void CUIManager::InitRenderTarget(int nWidth, int nHeight)
{
	if (m_RenderTarget == NULL)
	{
		m_RenderTarget = new CRenderTexture();
		m_RenderTarget->Init(nWidth, nHeight);
	}
}

void CUIManager::DestroyRenderTarget()
{
	SAFE_DELETE(m_RenderTarget);
}

void CUIManager::HUD_SetItemModelData( INDEX iIndex )
{
	m_fAniStartTime = _pTimer->GetLerpedCurrentTick();
	((CPlayerEntity*)CEntity::GetPlayerEntity(0))->HUD_SetModelData(HUD_ITEM_TYPE, iIndex, eRENDER_UI_TYPE_NONE, 0.0f);
}

void CUIManager::HUD_DrawItemModel()
{
	FLOAT fAniTime = ((CPlayerEntity*)CEntity::GetPlayerEntity(0))->GetAnimationTime();
	FLOAT fCurTime = _pTimer->GetLerpedCurrentTick();

	if ( fCurTime - m_fAniStartTime > fAniTime )
	{
		SetShowAni( FALSE );
		return;
	}

	int nPosX, nPosY;
	nPosX = ( GetDrawPort()->GetWidth() - _RTRusToyWidth ) / 2;
	nPosY = ( GetDrawPort()->GetHeight() - _RTRusToyHeight ) / 2;

	GetDrawPort()->InitTextureData( m_ptdAniBG );
	m_AniBackGround.SetPos( nPosX, nPosY );
	m_AniBackGround.RenderRectSurface(GetDrawPort(), 0xFFFFFFFF);
	GetDrawPort()->FlushRenderingQueue();

	GetDrawPort()->Unlock();
	m_RenderTarget->Begin();
	m_RenderTarget->Clear(0x00000000);

	((CPlayerEntity*)CEntity::GetPlayerEntity(0))->HUD_DrawModel(GetDrawPort(), DEF_DEFAULT_RT_WIDTH-_RTRusToyWidth, 0, DEF_DEFAULT_RT_WIDTH, _RTRusToyHeight, HUD_ITEM_TYPE, 0.0f, 0.0f);
	m_RenderTarget->End();
	GetDrawPort()->Lock();
	
	FLOAT fU;
	fU = (DEF_DEFAULT_RT_WIDTH-_RTRusToyWidth)/(FLOAT)DEF_DEFAULT_RT_WIDTH;

	GetDrawPort()->InitTextureData(&m_RenderTarget->rt_tdTexture, FALSE, PBT_ADD);
	GetDrawPort()->AddTexture( nPosX, nPosY, nPosX+_RTRusToyWidth, nPosY+_RTRusToyHeight, fU,0.0f,1.0f,1.0f,0xFFFFFFFF);
	GetDrawPort()->FlushRenderingQueue();
}

BOOL CUIManager::CheckDratanWarInside(CCharacterTarget* pTarget)
{
	if (pTarget == NULL)
		return FALSE;

	//[ttos_2010_5_25]:µå¶óÅº °ø¼º Áö¿ª Ã¼Å©
	if (_pNetwork->MyCharacterInfo.zoneNo == 4 &&
		(_pNetwork->MyCharacterInfo.x >= 72 && _pNetwork->MyCharacterInfo.x <= 696 &&
		_pNetwork->MyCharacterInfo.z >= 2344 && _pNetwork->MyCharacterInfo.z <= 3016))
	{
		FLOAT3D			vObjectPos;
		vObjectPos = pTarget->GetEntity()->en_plPlacement.pl_PositionVector;
		if( vObjectPos(1) >= 72 && vObjectPos(1) <= 696 &&
			vObjectPos(3) >= 2344 && vObjectPos(3) <= 3016)
		{
			return TRUE;
		}
	}
	
	return FALSE;
}

BOOL CUIManager::MyCheckDratanWarInside()
{
	//[ttos_2010_5_25]:µå¶óÅº °ø¼º Áö¿ª Ã¼Å©
	if (_pNetwork->MyCharacterInfo.zoneNo == 4 &&
		(_pNetwork->MyCharacterInfo.x >= 72 && _pNetwork->MyCharacterInfo.x <= 696 &&
		_pNetwork->MyCharacterInfo.z >= 2344 && _pNetwork->MyCharacterInfo.z <= 3016))
	{
		return TRUE;
	}
	
	return FALSE;
}

DWORD CUIManager::IsCSFlagOnElapsed( DWORD dwCSF, TIME tElapsedTime )
{
	TIME tTiem = (_pTimer->GetLerpedCurrentTick() * 1000) - m_tCSFElapsedTime;

	if (tTiem > tElapsedTime) // Æ¯Á¤ °æ°ú ½Ã°£ÀÌ Áö³ª¸é ResetÇÑ´Ù.
		SetCSFlagOffElapsed( dwCSF );

	return m_dwCSF & dwCSF;
}

void CUIManager::Update( float fDeltaTime, float fElapsedTime )
{
	CUIBase::Update(fDeltaTime, fElapsedTime);

	MSGBOXMGR()->Update(fDeltaTime, fElapsedTime);
	TOOLTIPMGR()->Update(fDeltaTime, fElapsedTime);

	for( INDEX iUI = UI_TYPE_END - 1; iUI >= UI_TYPE_START; iUI-- )
	{
		INDEX	iCurUI = m_aUIOrder[iUI];
		if (m_apUIs[iCurUI] != NULL )
			m_apUIs[iCurUI]->Update(fDeltaTime, fElapsedTime);

	}

	if (STAGEMGR()->GetCurStage() == eSTAGE_GAMEPLAY)
	{
		static int cnt = 0;
		static int last_send = 0;

		const int nBase = 100;

		if (++cnt > nBase)
		{
			cnt = 0;

			int	gap = abs(_pNetwork->slServerTime - time(NULL));
			int cur = time(NULL);
			// ¿ÀÂ÷°¡ 5ºÐ ÀÌ»óÀÌ°í, µ¿±âÈ­ ½Ã°£ÀÌ 1ºÐ ÀÌ»óÀÎÁö °Ë»ç
			if (gap > 300 && 
				abs(cur - last_send) > 60)
			{
				last_send = time(NULL);
				_pNetwork->SendReqServerTime();
			}
		}
	}
}

BOOL CUIManager::IsInputLock()
{
	if( IsCSFlagOn( CSF_TELEPORT ) )
		return TRUE;
	
	return FALSE;
}

void CUIManager::InitHardCoreCreate()
{
	if ( m_apUIs[UI_HARDCORE_WARNING] == NULL )
		return;

	static bool bLoad = false;

	if (bLoad == false)
	{
		bLoad = true;
		LoadXML( "HardCoreServerWarning.xml", m_apUIs[UI_HARDCORE_WARNING] );
		m_apUIs[UI_HARDCORE_WARNING]->updatePosition(true);
	}
}

std::string CUIManager::GetFullPath( std::string strFileName )
{
	int i, max = m_vecAdditionalPath.size();
	
	std::string path;
	BOOL bFileExists = FALSE;

	for (i = 0; i < max; ++i)
	{
		path = m_vecAdditionalPath[i] + strFileName;
		
		bFileExists = FileExists(path.c_str());

		if (bFileExists == TRUE)
			break;
	}

	// ¿¡µð¼Å³¯ ÆÐ½º·Îµµ Ã£Áö ¸øÇß´Ù¸é ±âº» ÆÐ½º ¸®ÅÏ.
	if (bFileExists == FALSE)
		return strFileName;

	return path;
}

void CUIManager::ItemNameColorInI()
{
	std::string strFullPath = _fnmApplicationPath.FileDir();
	strFullPath += DEF_INI_PATH;

	char szBuff[16];
	std::string strTmp;

	GetPrivateProfileString("DROP_ITEM", "NORMAL_NAME", "0xfff7f0FF", szBuff, 16, strFullPath.c_str());
	m_colItemDropName[eDROPITEM_NORMAL_NAME] = (COLOR)strtoul(szBuff, NULL, 16);
	GetPrivateProfileString("DROP_ITEM", "NORMAL_NAME_RARE", "0xfffb40FF", szBuff, 16, strFullPath.c_str());
	m_colItemDropName[eDROPITEM_NORMAL_NAME_RARE] = (COLOR)strtoul(szBuff, NULL, 16);
	GetPrivateProfileString("DROP_ITEM", "NORMAL_NAME_ORIGIN", "0xD338FFFF", szBuff, 16, strFullPath.c_str());
	m_colItemDropName[eDROPITEM_NORMAL_NAME_ORIGIN] = (COLOR)strtoul(szBuff, NULL, 16);
	GetPrivateProfileString("DROP_ITEM", "NORMAL_BG", "0xD0E0DF44", szBuff, 16, strFullPath.c_str());
	m_colItemDropName[eDROPITEM_NORMAL_BG] = (COLOR)strtoul(szBuff, NULL, 16);
	GetPrivateProfileString("DROP_ITEM", "OVER_NAME", "0xFFFFFFFF", szBuff, 16, strFullPath.c_str());
	m_colItemDropName[eDROPITEM_OVER_NAME] = (COLOR)strtoul(szBuff, NULL, 16);
	GetPrivateProfileString("DROP_ITEM", "OVER_NAME_RARE", "0xFFD31DFF", szBuff, 16, strFullPath.c_str());
	m_colItemDropName[eDROPITEM_OVER_NAME_RARE] = (COLOR)strtoul(szBuff, NULL, 16);
	GetPrivateProfileString("DROP_ITEM", "OVER_NAME_ORIGIN", "0x9900ccFF", szBuff, 16, strFullPath.c_str());
	m_colItemDropName[eDROPITEM_OVER_NAME_ORIGIN] = (COLOR)strtoul(szBuff, NULL, 16);
	GetPrivateProfileString("DROP_ITEM", "OVER_BG", "0x2EFF0A44", szBuff, 16, strFullPath.c_str());
	m_colItemDropName[eDROPITEM_OVER_BG] = (COLOR)strtoul(szBuff, NULL, 16);
}

void CUIManager::DropItemCallback()
{
	if (GetInventory()->IsLocked() == TRUE || GetInventory()->IsLockedArrange() == TRUE)
	{
		GetInventory()->ShowLockErrorMessage();
		return;
	}

	if (GetMsgBoxNumOnly()->GetData() > 0)
		SendDropItem( nTempTab, nTempInvenIdx, GetMsgBoxNumOnly()->GetData() );
}

void CUIManager::SetGuildMark()
{
	stGuildMark& mark = MY_INFO()->_guildmark;
	
	if (mark.gm_row < 0)
	{
		SAFE_DELETE(m_pIconGuildMark);
	}
	else
	{
		if (m_pIconGuildMark == NULL)
		{
			m_pIconGuildMark = new CUIGuildMarkIcon;
			m_pIconGuildMark->Create(this, 0, 0, 22, 22);
		}

		m_pIconGuildMark->CalcUV(mark.gm_row, mark.gm_col, true);
		m_pIconGuildMark->CalcUV(mark.bg_row, mark.bg_col, false);
	}	
}

void CUIManager::SetHoldBtn( CUIIcon* pIcon )
{
	if (pIcon == NULL)
		return;

	if (pIcon->getBtnType() >= UBET_TYPE_MAX)
		return;

	if (pIcon->getBtnType() == UBET_ITEM)
	{
		CItems* pItems = pIcon->getItems();

		if (pItems != NULL)
		{
			if (pItems->Item_Toggle == true)
			{
				if (GetInventory()->IsLocked() == TRUE ||
					GetInventory()->IsLockedArrange() == TRUE)
				{
					GetChattingUI()->AddSysMessage(_S(7035, "È°¼ºÈ­ µÈ ¾ÆÀÌÅÛÀº ¿Å±æ ¼ö ¾ø½À´Ï´Ù."));
					return;
				}
				else if (pIcon->GetWhichUI() != UI_QUICKSLOT &&
						 (pIcon->GetWhichUI() < UI_INVENTORY ||
						  pIcon->GetWhichUI() > UI_QUICKSLOT3))
				{
					GetChattingUI()->AddSysMessage(_S(7035, "È°¼ºÈ­ µÈ ¾ÆÀÌÅÛÀº ¿Å±æ ¼ö ¾ø½À´Ï´Ù."));
					return;
				}
			}
		}
	}

	m_pIconDrag = pIcon;
}

void CUIManager::SetHoldBtn( CUIBase* pBase )
{
	if (pBase == NULL)
		return;

	m_pBaseDrag = pBase;
}

void CUIManager::SetCSFlagOn( DWORD dwCSF )
{
	if (dwCSF == CSF_TELEPORT)
	{
		// ÀÌµ¿ Àá±ÝÀÏ °æ¿ì, ³ª¸¦ Á¤Áö ½ÃÅ²´Ù.
		LOG_DEBUG("##### LOCK CSF_TELEPORT");

		CEntity* penPlEntity;
		CPlayerEntity* penPlayerEntity;
		penPlEntity = CEntity::GetPlayerEntity(0); //Ä³¸¯ÅÍ ÀÚ±â ÀÚ½Å
		penPlayerEntity = (CPlayerEntity*) penPlEntity;

		penPlayerEntity->ClearMove();
	}

	m_dwCSF |= dwCSF;
}

void CUIManager::MsgProcWeb( MSG *pMsg )
{
	if (pMsg->message == WM_KEYDOWN)
	{
		if (pMsg->wParam == VK_ESCAPE)
		{
			if (GetNewsWebUI()->GetHide() == FALSE)
			{
				GetNewsWebUI()->CloseWindowByEsc();
			}
			else if (GetHelpWebUI()->GetHide() == FALSE)
			{
				GetHelpWebUI()->CloseWindowByEsc();
			}
			else
			{
				HWND hTmpDlg = g_web.GetWebHandle();
				ShowWindow(hTmpDlg, SW_HIDE);

				if (GetCashShopEX()->IsVisible() == TRUE)
				{
					_pNetwork->SendCashItemMessage(MSG_EX_CASHITEM_BALANCE_REQ);
				}
			}
		}
	}
	else if (pMsg->message >= WM_MOUSEFIRST &&
		pMsg->message <= WM_MOUSELAST)
	{
		if (pMsg->hwnd == _hwndMain)
		{
			GetNewsWebUI()->MouseMessage(pMsg);
			GetHelpWebUI()->MouseMessage(pMsg);
		}
	}
}

void CUIManager::RenderHUDObjectNamePopup(CEntity* pHudEntity, CDrawPort* pDraw, CProjection3D* pprProjection ) // new
{
	if (pHudEntity == NULL)
		return;
	// If game state is not on game
	if( STAGEMGR()->GetCurStage() != eSTAGE_GAMEPLAY || _pInput->inp_bFreeMode )
		return;

	COLOR	colNameBlend = 0xFFFFFF00 | COLOR( 0x3C + 0xC3 * 1.0f );

	// Get font size
	int	nBoxWidth = 0, nTextSX, nTextSY;
	int	nFontWidth = _pUIFontTexMgr->GetFontWidth() + _pUIFontTexMgr->GetFontSpacing();
	int	nFontHeight = _pUIFontTexMgr->GetLineHeight();

	CEntity			*penObject;
	CTString		strName, strTemp;
	CTString		myNick, otherNick;
	CModelInstance	*pmi;
	FLOAT3D			vObjectPos, vViewPos, vPopupPos;
	FLOATaabbox3D	boxModel;
	int				nColIndex, nPopupY;
	FLOAT			fRadius, fHeight, fPopupZ;

	UtilHelp* pHelp = UtilHelp::getSingleton();
	ObjInfo* pInfo = ObjInfo::getSingleton();

	if (pHelp == NULL)
		return;

	penObject = pHudEntity;
	vObjectPos = FLOAT3D(0.f, 0.0f, 0.0f);

	// Get frame box
	pmi = penObject->GetModelInstance();

	if(pmi == NULL)						
		return;
	if( pmi->GetName() == "" )
		return;

	pmi->GetAllFramesBBox( boxModel );
	boxModel.StretchByVector( pmi->mi_vStretch );
	fHeight = boxModel.maxvect(2) - boxModel.minvect(2);

	fRadius = fHeight * 0.5f;

	// Object point to screen point
	vObjectPos(2) += fHeight;

	pprProjection->PreClip( vObjectPos, vViewPos );
	pprProjection->PostClip( vViewPos, vPopupPos );
	fPopupZ = 0.f;

	// Get box region
#if defined G_THAI
	{
		nBoxWidth = FindThaiLen(_pNetwork->MyCharacterInfo.name); //wooss 051017
		if(_pNetwork->MyCharacterInfo.pk_mode == 0 ) 
			nBoxWidth+=13;
		else 
			nBoxWidth+=27;
	} 
	//else 
#else
	if( _pNetwork->MyCharacterInfo.pk_mode == 0 )
	{
		//if(g_iCountry == RUSSIA)
#if defined G_RUSSIA
		nBoxWidth = pDraw->GetTextWidth(_pNetwork->MyCharacterInfo.name) + 13;
		//else
#else
		nBoxWidth = _pNetwork->MyCharacterInfo.name.Length() * nFontWidth + 13;
#endif
	}
	else
	{
		//if(g_iCountry == RUSSIA)
#if defined G_RUSSIA
		nBoxWidth = pDraw->GetTextWidth(_pNetwork->MyCharacterInfo.name) + 27;
		//else
#else
		nBoxWidth = _pNetwork->MyCharacterInfo.name.Length() * nFontWidth + 27;
#endif
	}
#endif

	m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
	m_rcName.Right = m_rcName.Left + nBoxWidth;
	m_rcName.Bottom = vPopupPos(2) - 7;
	m_rcName.Top = m_rcName.Bottom - 15;
	nPopupY = m_rcName.Top;

	// Set popup texture
	pDraw->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

	// Add render regions
	if( _pNetwork->MyCharacterInfo.pk_mode == 0 )
	{
		pDraw->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
			m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
		pDraw->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
			m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
		pDraw->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
			m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );
	}
	else
	{
		COLOR	colBlend = 0xFFFFFFFF;
		if( _pNetwork->MyCharacterInfo.pk_mode == 2 )
			colBlend = colNameBlend;

		pDraw->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
			m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colBlend, fPopupZ );
		pDraw->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 16, m_rcName.Bottom,
			m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colBlend, fPopupZ );
		pDraw->AddTexture( m_rcName.Right - 16, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
			m_rtNameRPK.U0, m_rtNameRPK.V0, m_rtNameRPK.U1, m_rtNameRPK.V1, colBlend, fPopupZ );
	}

	// È£Äª
	COLOR myNickColor;	
	TitleNetwork* pTitle = GAMEDATAMGR()->GetTitleNetwork();

	if (pTitle != NULL)
	{
		myNick		= pTitle->getCustomTitleName();
		COLOR tmpColor = CustomTitleData::m_vecBackColor[pTitle->getSelectBCIndex()];

#if defined G_RUSSIA
		nBoxWidth = pDraw->GetTextWidth(myNick) + 13; 
#else
		nBoxWidth = myNick.Length() * nFontWidth + 13;
#endif
		m_rcNickName.Left = vPopupPos(1) - nBoxWidth / 2;
		m_rcNickName.Right = m_rcNickName.Left + nBoxWidth;
		m_rcNickName.Bottom = nPopupY - 5;
		m_rcNickName.Top = (m_rcNickName.Bottom - 1 * nFontHeight) - 4;
		nPopupY = m_rcNickName.Top;

		if (m_pIsMakeTitleGuideLine != NULL)
		{
			pDraw->FlushRenderingQueue();

			m_pIsMakeTitleGuideLine->InitPos(m_rcNickName.Left - 1, m_rcNickName.Top - 1, m_rcNickName.GetWidth() + 2, m_rcNickName.GetHeight() + 2);
			m_pIsMakeTitleGuideLine->UpdateSplit();
			m_pIsMakeTitleGuideLine->OnRender(pDraw);
			
			pDraw->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );
		}

		pDraw->AddTexture( m_rcNickName.Left, m_rcNickName.Top, m_rcNickName.Left + 2, m_rcNickName.Bottom,
			m_rtNickNameL.U0, m_rtNickNameL.V0, m_rtNickNameL.U1, m_rtNickNameL.V1, tmpColor, fPopupZ );
		pDraw->AddTexture( m_rcNickName.Left + 2, m_rcNickName.Top, m_rcNickName.Right - 2, m_rcNickName.Bottom,
			m_rtNickNameC.U0, m_rtNickNameC.V0, m_rtNickNameC.U1, m_rtNickNameC.V1, tmpColor, fPopupZ );
		pDraw->AddTexture( m_rcNickName.Right - 2, m_rcNickName.Top, m_rcNickName.Right, m_rcNickName.Bottom,
			m_rtNickNameR.U0, m_rtNickNameR.V0, m_rtNickNameR.U1, m_rtNickNameR.V1, tmpColor, fPopupZ );

		pDraw->FlushRenderingQueue();
	}

	pDraw->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

	// Guild Name
	if( _pNetwork->MyCharacterInfo.lGuildIndex > 0)
	{
		// Get box region
#if defined G_THAI
		nBoxWidth = FindThaiLen(_pNetwork->MyCharacterInfo.strGuildName)+13; //wooss 051017
		//else
#else
		{
#if defined G_RUSSIA
			nBoxWidth = pDraw->GetTextWidth(_pNetwork->MyCharacterInfo.strGuildName) + 13;
			//else
#else
			nBoxWidth = _pNetwork->MyCharacterInfo.strGuildName.Length() * nFontWidth + 13;
#endif
		}
#endif
		m_rcGuildName.Left = vPopupPos(1) - nBoxWidth / 2;
		m_rcGuildName.Right = m_rcGuildName.Left + nBoxWidth;
		m_rcGuildName.Bottom = nPopupY - 5;
		m_rcGuildName.Top = (m_rcGuildName.Bottom - 1 * nFontHeight) - 4;
		nPopupY = m_rcGuildName.Top;

		pDraw->AddTexture( m_rcGuildName.Left, m_rcGuildName.Top, m_rcGuildName.Left + 2, m_rcGuildName.Bottom,
			m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
		pDraw->AddTexture( m_rcGuildName.Left + 2, m_rcGuildName.Top, m_rcGuildName.Right - 2, m_rcGuildName.Bottom,
			m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
		pDraw->AddTexture( m_rcGuildName.Right - 2, m_rcGuildName.Top, m_rcGuildName.Right, m_rcGuildName.Bottom,
			m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );
	}
	// Render all elements
	pDraw->FlushRenderingQueue();

	// Text
	nTextSX = m_rcName.Left + 7;
	nTextSY = m_rcName.Top + 1;
	// Title
#ifdef NEW_CHAO_SYS
	//ÀÚ±â ÀÚ½Å
	if (_pNetwork->MyCharacterInfo.pkpenalty  > 19000 && _pNetwork->MyCharacterInfo.pkpenalty  <= 32000)
		nColIndex = 14;
	else if(_pNetwork->MyCharacterInfo.pkpenalty  > 6000 && _pNetwork->MyCharacterInfo.pkpenalty  <= 19000)
		nColIndex = 15;
	else if(_pNetwork->MyCharacterInfo.pkpenalty  > 0 && _pNetwork->MyCharacterInfo.pkpenalty  <= 6000)
		nColIndex = 16;
	else if(_pNetwork->MyCharacterInfo.pkpenalty  >= -6000 && _pNetwork->MyCharacterInfo.pkpenalty  < 0)
		nColIndex = 17;
	else if(_pNetwork->MyCharacterInfo.pkpenalty  >= -19000 && _pNetwork->MyCharacterInfo.pkpenalty  < -6000)
		nColIndex = 18;
	else if(_pNetwork->MyCharacterInfo.pkpenalty  >= -32000 && _pNetwork->MyCharacterInfo.pkpenalty  < -19000)
		nColIndex = 19;
	else nColIndex = 9;
#else
	if( _pNetwork->MyCharacterInfo.pkpenalty < -9 ) nColIndex = 11;
	else if( _pNetwork->MyCharacterInfo.pkpenalty > 9 ) nColIndex = 7;
	else nColIndex = 9;
	// PK
	if( _pNetwork->MyCharacterInfo.pk_mode != 0 )
		nColIndex--;
#endif

	if( _pNetwork->MyCharacterInfo.sbPresscorps > 0)
	{
		if ( _pNetwork->MyCharacterInfo.lGuildIndex > 0 && _pNetwork->MyCharacterInfo.ubGuildNameColor == 6)
			pDraw->PutTextEx( _pNetwork->MyCharacterInfo.name, nTextSX, nTextSY,
			0xFF8C00FF, fPopupZ );
		else
			pDraw->PutTextEx( _pNetwork->MyCharacterInfo.name, nTextSX, nTextSY,
			0x00C80FFF, fPopupZ );
	}
	else
	{
		if ( _pNetwork->MyCharacterInfo.lGuildIndex > 0 && _pNetwork->MyCharacterInfo.ubGuildNameColor == 6)
				 nColIndex = 22;
		pDraw->PutTextEx( _pNetwork->MyCharacterInfo.name, nTextSX, nTextSY,
			pHelp->GetTargetNameColor( nColIndex ), fPopupZ );
	}

	// È£Äª
	nTextSX = m_rcNickName.Left + 7;
	nTextSY = m_rcNickName.Top + 2;

	if( pTitle != NULL)
	{
		myNickColor = CustomTitleData::m_vecFrontColor[pTitle->getSelectFCIndex()];

		pDraw->PutTextEx(myNick, nTextSX, nTextSY, myNickColor, fPopupZ );
	}
	// Text
	nTextSX = m_rcGuildName.Left + 7;
	nTextSY = m_rcGuildName.Top + 2;

	// Guild Name
	if( _pNetwork->MyCharacterInfo.lGuildIndex > 0)
	{		
		COLOR colGuildName = 0xD6A4D6FF;

		if( _pNetwork->MyCharacterInfo.ubGuildNameColor == 1 )			//¸Þ¶óÅ© ¼ºÁÖ ±æµå 
			colGuildName = 0xFF4500FF;
		else if( _pNetwork->MyCharacterInfo.ubGuildNameColor == 2 )		//µå¶óÅº ¼ºÁÖ ±æµå
			colGuildName = 0xFFD700FF;

		pDraw->PutTextEx( _pNetwork->MyCharacterInfo.strGuildName, nTextSX, nTextSY,
			colGuildName, fPopupZ );
	}

	// Flush all render text queue
	pDraw->EndTextEx( TRUE );	
}

void CUIManager::InteractionMsgBoxReject()	//new
{
	CUIManager* pUIManager = CUIManager::getSingleton();

	// ÆÄÆ¼ ÃÊ´ë[½ÅÃ»¹ÞÀ½]
	if(pUIManager->DoesMessageBoxExist(MSGCMD_PARTY_ALLOW))
	{
		pUIManager->GetMessageBox(MSGCMD_PARTY_ALLOW)->ReturnCommand(FALSE);
	}

	// ÆÄÆ¼ ÃÊ´ë[½ÅÃ»]
	if(pUIManager->DoesMessageBoxExist(MSGCMD_PARTY_INVITE))
	{
		pUIManager->GetMessageBox(MSGCMD_PARTY_INVITE)->ReturnCommand(FALSE);
	}

	// ÆÄÆ¼¸®ÄÝ[½ÅÃ» ¹ÞÀ½]
	if(pUIManager->DoesMessageBoxExist(MSGCMD_EX_PARTY_RECALL_PROMPT))
	{
		pUIManager->GetMessageBox(MSGCMD_EX_PARTY_RECALL_PROMPT)->ReturnCommand(FALSE);
	}

	// ±³È¯ ¿äÃ» [¿äÃ»]
	if(pUIManager->DoesMessageBoxExist(MSGCMD_EXCH_REQ_SRC))
	{
		pUIManager->GetMessageBox(MSGCMD_EXCH_REQ_SRC)->ReturnCommand(FALSE);
	}

	// ±³È¯ ¿äÃ» [¿äÃ»¹ÞÀ½]
	if(pUIManager->DoesMessageBoxExist(MSGCMD_EXCH_REQ_DEST))
	{
		pUIManager->GetMessageBox(MSGCMD_EXCH_REQ_DEST)->ReturnCommand(FALSE);
	}

	// ±æµå °¡ÀÔ ¿äÃ» [¿äÃ»¹ÞÀ½]
	if(pUIManager->DoesMessageBoxExist(MSGCMD_GUILD_JOIN))
	{
		pUIManager->GetMessageBox(MSGCMD_GUILD_JOIN)->ReturnCommand(FALSE);
	}

	// ±æµå °¡ÀÔ ¿äÃ» [¿äÃ»]
	if(pUIManager->DoesMessageBoxExist(MSGCMD_GUILD_JOIN_REQ))
	{
		pUIManager->GetMessageBox(MSGCMD_GUILD_JOIN_REQ)->ReturnCommand(FALSE);
	}

	// ±æµå ÀüÅõ ¿äÃ»
	if(pUIManager->DoesMessageBoxExist(MSGCMD_GUILD_BATTLE_REQ))
	{
		pUIManager->GetMessageBox(MSGCMD_GUILD_BATTLE_REQ)->ReturnCommand(FALSE);
	}

	// ±æµå ÀüÅõ ½ÅÃ» Ã¢
	if(pUIManager->DoesMessageBoxExist(MSGCMD_GUILD_BATTLE_MESSAGE))
	{
		pUIManager->GetMessageBox(MSGCMD_GUILD_BATTLE_MESSAGE)->ReturnCommand(FALSE);
	}

	// ±æµå ÀüÅõ ¼ö¶ôÃ¢ [¿äÃ» ¹ÞÀ½]
	if(pUIManager->DoesMessageBoxExist(MSGCMD_GUILD_BATTLE_ACCEPT))
	{
		pUIManager->GetMessageBox(MSGCMD_GUILD_BATTLE_ACCEPT)->ReturnCommand(FALSE);
	}

	// ¼ø°£ÀÌµ¿ ¿äÃ»À» ¹Þ¾ÒÀ» °æ¿ì sessionState¿¡¼­ Ã³¸® 
	if(pUIManager->DoesMessageBoxExist(MSGCMD_WARP_TO_REQ_CALL))
	{
		pUIManager->GetMessageBox(MSGCMD_WARP_TO_REQ_CALL)->ReturnCommand(FALSE);
	}

	// ¼ÒÈ¯ ¿äÃ»À» ¹Þ¾ÒÀ» °æ¿ì sessionState¿¡¼­ Ã³¸®
	if(pUIManager->DoesMessageBoxExist(MSGCMD_WARP_TAKE_REQ_CALL))
	{
		pUIManager->GetMessageBox(MSGCMD_WARP_TAKE_REQ_CALL)->ReturnCommand(FALSE);
	}

	// °ø¼º Áö¿ª ÀÌµ¿ È®ÀÎ
	if(pUIManager->DoesMessageBoxExist(MSGCMD_SIEGE_WARFARE_MOVEING_CONFIRM))
	{
		pUIManager->GetMessageBox(MSGCMD_SIEGE_WARFARE_MOVEING_CONFIRM)->ReturnCommand(FALSE);
	}

	// ÈÄ°ßÀÎÀ¸·Î µî·Ï È®ÀÎ
	if(pUIManager->DoesMessageBoxExist(MSGCMD_HELPER_STUDENT_ACCEPT))
	{
		pUIManager->GetMessageBox(MSGCMD_HELPER_STUDENT_ACCEPT)->ReturnCommand(FALSE);
	}

	// go to royal rumble zone.
	if(pUIManager->DoesMessageBoxExist(MSGCMD_ROYALRUMBLE_GO_ZONE))
	{
		pUIManager->GetMessageBox(MSGCMD_ROYALRUMBLE_GO_ZONE)->ReturnCommand(FALSE);
	}
}
